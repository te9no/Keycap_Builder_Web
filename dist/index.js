(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(e2) {
        return e2 && e2.__esModule ? e2 : {
          "default": e2
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/node/formatMuiErrorMessage/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/node/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        let url = "https://mui.com/production-error/?code=" + code;
        for (let i2 = 1; i2 < arguments.length; i2 += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i2]);
        }
        return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/@mui/utils/node/formatMuiErrorMessage/index.js
  var require_formatMuiErrorMessage2 = __commonJS({
    "node_modules/@mui/utils/node/formatMuiErrorMessage/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n2) {
      for (var e2 = 1; e2 < arguments.length; e2++) {
        var t2 = arguments[e2];
        for (var r3 in t2) ({}).hasOwnProperty.call(t2, r3) && (n2[r3] = t2[r3]);
      }
      return n2;
    }, _extends.apply(null, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement5(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement33(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement20(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement20(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement20(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext23(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef135(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo3(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext36(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState31(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef40(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect29(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback20(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo22(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle9(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue4(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId7() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i2 = 0; i2 < node2.length; i2++) {
                var child = node2[i2];
                if (isValidElement20(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement20(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement20(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement5.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement33.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children18 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children18;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext23;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef135;
          exports.isValidElement = isValidElement20;
          exports.lazy = lazy;
          exports.memo = memo3;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback20;
          exports.useContext = useContext36;
          exports.useDebugValue = useDebugValue4;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect29;
          exports.useId = useId7;
          exports.useImperativeHandle = useImperativeHandle9;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo22;
          exports.useReducer = useReducer;
          exports.useRef = useRef40;
          exports.useState = useState31;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn2) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0) cache[arg] = fn2(arg);
      return cache[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag) {
        return document.styleSheets[i2];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet;
  var init_emotion_sheet_browser_esm = __esm({
    "node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js"() {
      StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e2) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e2);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
    }
  });

  // node_modules/stylis/src/Enum.js
  var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MS = "-ms-";
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      IMPORT = "@import";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      // ; { } breakpoint token
      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token
      case 58:
        return 3;
      // " ' ( [ opening delimit token
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        // ] ) " '
        case type:
          return position;
        // " '
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        // (
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        // \
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        // (
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        // " ' [
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        // \
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        // /
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        // {
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;
            case 59 + offset2:
              if (ampersand == -1) characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            // @ ;
            case 59:
              characters2 += ";";
            // { rule/at-rule
            default:
              append(reference2 = ruleset(characters2, root, parent, index, offset2, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        // :
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            // &
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            // ,
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            // @
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            // -
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset2, rules, points, type, props, children, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i2 = 0, j = 0, k = 0; i2 < index; ++i2)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i2])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset2 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i2 = 0; i2 < length2; i2++)
      output += callback(children[i2], i2, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length) break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i2 = 0; i2 < length2; i2++)
        output += collection[i2](element, index, children, callback) || "";
      return output;
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize;
  var init_emotion_weak_memoize_esm = __esm({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
      weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var emotion_cache_browser_esm_exports = {};
  __export(emotion_cache_browser_esm_exports, {
    default: () => createCache
  });
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      // color-adjust
      case 5103:
        return WEBKIT + "print-" + value + value;
      // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      // appearance, user-select, transform, hyphens, text-size-adjust
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      // flex, flex-direction
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      // order
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      // align-items
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      // align-self
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      // align-content
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      // flex-shrink
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      // flex-basis
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      // flex-grow
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      // transition
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      // cursor
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      // background, background-image
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      // justify-content
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      // (margin|padding)-inline-(start|end)
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      // (min|max)?(width|height|inline-size|block-size)
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            if (charat(value, length2 + 4) !== 45) break;
          // (f)ill-available, (f)it-content
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          // (s)tretch
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
        break;
      // position: sticky
      case 4949:
        if (charat(value, length2 + 1) !== 115) break;
      // display: (flex|inline-flex)
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          // stic(k)y
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          // (inline-)?fl(e)x
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      // writing-mode
      case 5936:
        switch (charat(value, length2 + 11)) {
          // vertical-l(r)
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          // vertical-r(l)
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          // horizontal(-)tb
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, ignoreFlag, isIgnoringComment, createUnsafeSelectorsAlarm, isImportRule, isPrependedWithRegularRules, nullifyElement, incorrectImportAlarm, prefixer, defaultStylisPlugins, createCache;
  var init_emotion_cache_browser_esm = __esm({
    "node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
      init_emotion_sheet_browser_esm();
      init_stylis();
      init_emotion_weak_memoize_esm();
      init_emotion_memoize_esm();
      identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character2 = 0;
        while (true) {
          previous = character2;
          character2 = peek();
          if (previous === 38 && character2 === 12) {
            points[index] = 1;
          }
          if (token(character2)) {
            break;
          }
          next();
        }
        return slice(begin, position);
      };
      toRules = function toRules2(parsed, points) {
        var index = -1;
        var character2 = 44;
        do {
          switch (token(character2)) {
            case 0:
              if (character2 === 38 && peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(position - 1, points, index);
              break;
            case 2:
              parsed[index] += delimit(character2);
              break;
            case 4:
              if (character2 === 44) {
                parsed[++index] = peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            // fallthrough
            default:
              parsed[index] += from(character2);
          }
        } while (character2 = next());
        return parsed;
      };
      getRules = function getRules2(value, points) {
        return dealloc(toRules(alloc(value), points));
      };
      fixedElements = /* @__PURE__ */ new WeakMap();
      compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent) return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i2 = 0, k = 0; i2 < rules.length; i2++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i2];
          }
        }
      };
      removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
          ) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      isIgnoringComment = function isIgnoringComment2(element) {
        return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
      };
      createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
        return function(element, index, children) {
          if (element.type !== "rule" || cache.compat) return;
          var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = !!element.parent;
            var commentContainer = isNested ? element.parent.children : (
              // global rule at the root level
              children
            );
            for (var i2 = commentContainer.length - 1; i2 >= 0; i2--) {
              var node2 = commentContainer[i2];
              if (node2.line < element.line) {
                break;
              }
              if (node2.column < element.column) {
                if (isIgnoringComment(node2)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      isImportRule = function isImportRule2(element) {
        return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
      };
      isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
        for (var i2 = index - 1; i2 >= 0; i2--) {
          if (!isImportRule(children[i2])) {
            return true;
          }
        }
        return false;
      };
      nullifyElement = function nullifyElement2(element) {
        element.type = "";
        element.value = "";
        element["return"] = "";
        element.children = "";
        element.props = "";
      };
      incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
        if (!isImportRule(element)) {
          return;
        }
        if (element.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element);
        } else if (isPrependedWithRegularRules(index, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element);
        }
      };
      prefixer = function prefixer2(element, index, children, callback) {
        if (element.length > -1) {
          if (!element["return"]) switch (element.type) {
            case DECLARATION:
              element["return"] = prefix(element.value, element.length);
              break;
            case KEYFRAMES:
              return serialize([copy(element, {
                value: replace(element.value, "@", "@" + WEBKIT)
              })], callback);
            case RULESET:
              if (element.length) return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  // :read-(only|write)
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, {
                      props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })], callback);
                  // :placeholder
                  case "::placeholder":
                    return serialize([copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
          }
        }
      };
      defaultStylisPlugins = [prefixer];
      createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        {
          container = options.container || document.head;
          Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i2 = 1; i2 < attrib.length; i2++) {
                inserted[attrib[i2]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache.compat;
            }
          }), incorrectImportAlarm);
        }
        {
          var currentSheet;
          var finalizingPlugins = [stringify, true ? function(element) {
            if (!element.root) {
              if (element["return"]) {
                currentSheet.insert(element["return"]);
              } else if (element.value && element.type !== COMMENT) {
                currentSheet.insert(element.value + "{}");
              }
            }
          } : rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis = function stylis2(styles8) {
            return serialize(compile(styles8), serializer);
          };
          _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet.insert(rule + serialized.map);
                }
              };
            }
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        }
        var cache = {
          key,
          sheet: new StyleSheet({
            key,
            container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment30 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment12(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment30;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment12;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i2 = 0; i2 < keys.length; ++i2) {
            var key = keys[i2];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e2) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
  var import_hoist_non_react_statics, hoistNonReactStatics;
  var init_emotion_react_isolated_hnrs_browser_esm = __esm({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js"() {
      import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
      hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
      };
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var isBrowser, registerStyles, insertStyles;
  var init_emotion_utils_browser_esm = __esm({
    "node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
      isBrowser = true;
      registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
        var className = cache.key + "-" + serialized.name;
        if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag2 === false || // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser === false) && cache.registered[className] === void 0
        ) {
          cache.registered[className] = serialized.styles;
        }
      };
      insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
        registerStyles(cache, serialized, isStringTag2);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h2 = 0;
    var k, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h2 = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h2 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h2 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h2 ^= str.charCodeAt(i2) & 255;
        h2 = /* Math.imul(h, m): */
        (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    h2 ^= h2 >>> 13;
    h2 = /* Math.imul(h, m): */
    (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys;
  var init_emotion_unitless_esm = __esm({
    "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
      unitlessKeys = {
        animationIterationCount: 1,
        aspectRatio: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles8 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles8 += interpolation.map;
          }
          return styles8;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR, UNDEFINED_AS_OBJECT_KEY_ERROR, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, contentValuePattern, contentValues, oldProcessStyleValue, msPattern, hyphenPattern, hyphenatedCache, noComponentSelectorMessage, labelPattern, sourceMapPattern, cursor, serializeStyles;
  var init_emotion_serialize_browser_esm = __esm({
    "node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js"() {
      init_emotion_hash_esm();
      init_emotion_unitless_esm();
      init_emotion_memoize_esm();
      ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      hyphenateRegex = /[A-Z]|^ms/g;
      animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      processStyleName = /* @__PURE__ */ memoize(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue3(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles8 = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles8 += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles8 += strings[0];
        }
        for (var i2 = 1; i2 < args.length; i2++) {
          styles8 += handleInterpolation(mergedProps, registered, args[i2]);
          if (stringMode) {
            if (strings[i2] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles8 += strings[i2];
          }
        }
        var sourceMap;
        if (true) {
          styles8 = styles8.replace(sourceMapPattern, function(match3) {
            sourceMap = match3;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match2;
        while ((match2 = labelPattern.exec(styles8)) !== null) {
          identifierName += "-" + // $FlowFixMe we know it's not null
          match2[1];
        }
        var name = murmur2(styles8) + identifierName;
        if (true) {
          return {
            name,
            styles: styles8,
            map: sourceMap,
            next: cursor,
            toString: function toString() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles: styles8,
          next: cursor
        };
      };
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
  var init_emotion_use_insertion_effect_with_fallbacks_browser_esm = __esm({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js"() {
      React = __toESM(require_react());
      syncFallback = function syncFallback2(create) {
        return create();
      };
      useInsertionEffect2 = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
      useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
      useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React.useLayoutEffect;
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
  function withTheme(Component2) {
    var componentName = Component2.displayName || Component2.name || "Component";
    var render = function render2(props, ref) {
      var theme = React2.useContext(ThemeContext);
      return /* @__PURE__ */ React2.createElement(Component2, _extends({
        theme,
        ref
      }, props));
    };
    var WithTheme = /* @__PURE__ */ React2.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return hoistNonReactStatics(WithTheme, Component2);
  }
  var React2, import_react, isBrowser2, hasOwnProperty, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme, getTheme, createCacheWithTheme, ThemeProvider, getLastPart, getFunctionNameFromStackTraceLine, internalReactFunctionNames, sanitizeIdentifier, getLabelFromStackTrace, typePropName, labelPropName, createEmotionProps, Insertion, Emotion, Emotion$1;
  var init_emotion_element_c39617d8_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js"() {
      React2 = __toESM(require_react());
      import_react = __toESM(require_react());
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      init_emotion_react_isolated_hnrs_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      isBrowser2 = true;
      hasOwnProperty = {}.hasOwnProperty;
      EmotionCacheContext = /* @__PURE__ */ React2.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
          key: "css"
        }) : null
      );
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      CacheProvider = EmotionCacheContext.Provider;
      __unsafe_useEmotionCache = function useEmotionCache() {
        return (0, import_react.useContext)(EmotionCacheContext);
      };
      withEmotionCache = function withEmotionCache2(func) {
        return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
          var cache = (0, import_react.useContext)(EmotionCacheContext);
          return func(props, cache, ref);
        });
      };
      if (!isBrowser2) {
        withEmotionCache = function withEmotionCache3(func) {
          return function(props) {
            var cache = (0, import_react.useContext)(EmotionCacheContext);
            if (cache === null) {
              cache = createCache({
                key: "css"
              });
              return /* @__PURE__ */ React2.createElement(EmotionCacheContext.Provider, {
                value: cache
              }, func(props, cache));
            } else {
              return func(props, cache);
            }
          };
        };
      }
      ThemeContext = /* @__PURE__ */ React2.createContext({});
      if (true) {
        ThemeContext.displayName = "EmotionThemeContext";
      }
      useTheme = function useTheme2() {
        return React2.useContext(ThemeContext);
      };
      getTheme = function getTheme2(outerTheme, theme) {
        if (typeof theme === "function") {
          var mergedTheme = theme(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends({}, outerTheme, theme);
      };
      createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
        return weakMemoize(function(theme) {
          return getTheme(outerTheme, theme);
        });
      });
      ThemeProvider = function ThemeProvider2(props) {
        var theme = React2.useContext(ThemeContext);
        if (props.theme !== theme) {
          theme = createCacheWithTheme(theme)(props.theme);
        }
        return /* @__PURE__ */ React2.createElement(ThemeContext.Provider, {
          value: theme
        }, props.children);
      };
      getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
        var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
        if (match2) return getLastPart(match2[1]);
        match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
        if (match2) return getLastPart(match2[1]);
        return void 0;
      };
      internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
        return identifier2.replace(/\$/g, "-");
      };
      getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace) return void 0;
        var lines = stackTrace.split("\n");
        for (var i2 = 0; i2 < lines.length; i2++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i2]);
          if (!functionName) continue;
          if (internalReactFunctionNames.has(functionName)) break;
          if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && // check if there is a css declaration
        props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label) newProps[labelPropName] = label;
        }
        return newProps;
      };
      Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag2);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag2);
        });
        return null;
      };
      Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
          cssProp = cache.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(registeredStyles, void 0, React2.useContext(ThemeContext));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React2.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      Emotion$1 = Emotion;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var emotion_react_browser_esm_exports = {};
  __export(emotion_react_browser_esm_exports, {
    CacheProvider: () => CacheProvider,
    ClassNames: () => ClassNames,
    Global: () => Global,
    ThemeContext: () => ThemeContext,
    ThemeProvider: () => ThemeProvider,
    __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
    createElement: () => jsx,
    css: () => css,
    jsx: () => jsx,
    keyframes: () => keyframes,
    useTheme: () => useTheme,
    withEmotionCache: () => withEmotionCache,
    withTheme: () => withTheme
  });
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function merge(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var React3, import_hoist_non_react_statics2, pkg, jsx, warnedAboutCssPropForGlobal, Global, keyframes, classnames, Insertion3, ClassNames, isBrowser3, isTestEnv, globalContext, globalKey;
  var init_emotion_react_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
      init_emotion_element_c39617d8_browser_esm();
      init_emotion_element_c39617d8_browser_esm();
      React3 = __toESM(require_react());
      init_emotion_utils_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
      pkg = {
        name: "@emotion/react",
        version: "11.11.3",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": {
            types: {
              "import": "./macro.d.mts",
              "default": "./macro.d.ts"
            },
            "default": "./macro.js"
          }
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.*"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.11.0",
          "@emotion/cache": "^11.11.0",
          "@emotion/serialize": "^1.1.3",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
          "@emotion/utils": "^1.2.1",
          "@emotion/weak-memoize": "^0.3.1",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.11.2",
          "@emotion/css-prettifier": "1.1.3",
          "@emotion/server": "11.11.0",
          "@emotion/styled": "11.11.0",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": {
                types: {
                  "import": "./macro.d.mts",
                  "default": "./macro.d.ts"
                },
                "default": "./macro.js"
              }
            }
          }
        }
      };
      jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !hasOwnProperty.call(props, "css")) {
          return React3.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = Emotion$1;
        createElementArgArray[1] = createEmotionProps(type, props);
        for (var i2 = 2; i2 < argsLength; i2++) {
          createElementArgArray[i2] = args[i2];
        }
        return React3.createElement.apply(null, createElementArgArray);
      };
      warnedAboutCssPropForGlobal = false;
      Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
        // probably using the custom createElement which
        // means it will be turned into a className prop
        // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
        (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles8 = props.styles;
        var serialized = serializeStyles([styles8], void 0, React3.useContext(ThemeContext));
        if (!isBrowser2) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next2 = serialized.next;
          while (next2 !== void 0) {
            serializedNames += " " + next2.name;
            serializedStyles += next2.styles;
            next2 = next2.next;
          }
          var shouldCache = cache.compat === true;
          var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React3.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache.sheet.nonce, _ref));
        }
        var sheetRef = React3.useRef();
        useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      if (true) {
        Global.displayName = "EmotionGlobal";
      }
      keyframes = function keyframes2() {
        var insertable = css.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      classnames = function classnames2(args) {
        var len = args.length;
        var i2 = 0;
        var cls = "";
        for (; i2 < len; i2++) {
          var arg = args[i2];
          if (arg == null) continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      Insertion3 = function Insertion4(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        useInsertionEffectAlwaysWithSyncFallback(function() {
          for (var i2 = 0; i2 < serializedArr.length; i2++) {
            insertStyles(cache, serializedArr[i2], false);
          }
        });
        return null;
      };
      ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css3 = function css4() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache.registered, css3, classnames(args));
        };
        var content = {
          css: css3,
          cx,
          theme: React3.useContext(ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Insertion3, {
          cache,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser3 = true;
        isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
        if (isBrowser3 && !isTestEnv) {
          globalContext = // $FlowIgnore
          typeof globalThis !== "undefined" ? globalThis : isBrowser3 ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React4, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, ILLEGAL_ESCAPE_SEQUENCE_ERROR2, Insertion5, createStyled;
  var init_emotion_styled_base_browser_esm = __esm({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
      init_extends();
      React4 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_react_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      testOmitPropsOnStringTag = isPropValid;
      testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      Insertion5 = function Insertion6(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag2);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag2);
        });
        return null;
      };
      createStyled = function createStyled2(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles8 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles8.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles8.push.apply(styles8, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
            }
            styles8.push(args[0][0]);
            var len = args.length;
            var i2 = 1;
            for (; i2 < len; i2++) {
              if (args[0][i2] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
              }
              styles8.push(args[i2], args[0][i2]);
            }
          }
          var Styled = withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React4.useContext(ThemeContext);
            }
            if (typeof props.className === "string") {
              className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serializeStyles(styles8.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as") continue;
              if (
                // $FlowFixMe
                finalShouldForwardProp(_key)
              ) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Insertion5, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React4.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles8;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled2(nextTag, _extends({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles8);
          };
          return Styled;
        };
      };
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var emotion_styled_browser_esm_exports = {};
  __export(emotion_styled_browser_esm_exports, {
    default: () => newStyled
  });
  var import_react3, tags, newStyled;
  var init_emotion_styled_browser_esm = __esm({
    "node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
      init_emotion_styled_base_browser_esm();
      init_extends();
      import_react3 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        // SVG
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      newStyled = createStyled.bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment30 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment12(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment30;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment12;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from2 = Object(arguments[s2]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from2, symbols[i2])) {
                to[symbols[i2]] = from2[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is2();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement20, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement20(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement20(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is2();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React221 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React221.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement20(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i2 = 0; i2 < node2.length; i2++) {
                  var child = node2[i2];
                  if (isValidElement20(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement20(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement20(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys.length; i2++) {
                var key = keys[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx3;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StyledEngineProvider2;
      var React221 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _cache = _interopRequireDefault((init_emotion_cache_browser_esm(), __toCommonJS(emotion_cache_browser_esm_exports)));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var cache;
      if (typeof document === "object") {
        cache = (0, _cache.default)({
          key: "css",
          prepend: true
        });
      }
      function StyledEngineProvider2(props) {
        const {
          injectFirst,
          children
        } = props;
        return injectFirst && cache ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
          value: cache,
          children
        }) : children;
      }
      true ? StyledEngineProvider2.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * By default, the styles are injected last in the <head> element of the page.
         * As a result, they gain more specificity than any other style sheet.
         * If you want to override MUI's styles, set this prop.
         */
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = GlobalStyles4;
      var React221 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function isEmpty4(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles4(props) {
        const {
          styles: styles8,
          defaultTheme: defaultTheme7 = {}
        } = props;
        const globalStyles = typeof styles8 === "function" ? (themeInput) => styles8(isEmpty4(themeInput) ? defaultTheme7 : themeInput) : styles8;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles4.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/styled-engine/node/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports.default = styled4;
      exports.internal_processStyles = void 0;
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault((init_emotion_styled_browser_esm(), __toCommonJS(emotion_styled_browser_esm_exports)));
      var _react = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled4(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles8) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles8.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles8.some((style4) => style4 === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles8);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports.internal_processStyles = internal_processStyles;
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends3() {
        return module.exports = _extends3 = Object.assign ? Object.assign.bind() : function(n2) {
          for (var e2 = 1; e2 < arguments.length; e2++) {
            var t2 = arguments[e2];
            for (var r3 in t2) ({}).hasOwnProperty.call(t2, r3) && (n2[r3] = t2[r3]);
          }
          return n2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends3.apply(null, arguments);
      }
      module.exports = _extends3, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/node/deepmerge/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/node/deepmerge/deepmerge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deepmerge15;
      exports.isPlainObject = isPlainObject3;
      var _extends22 = _interopRequireDefault(require_extends());
      function isPlainObject3(item) {
        if (typeof item !== "object" || item === null) {
          return false;
        }
        const prototype = Object.getPrototypeOf(item);
        return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
      }
      function deepClone(source) {
        if (!isPlainObject3(source)) {
          return source;
        }
        const output = {};
        Object.keys(source).forEach((key) => {
          output[key] = deepClone(source[key]);
        });
        return output;
      }
      function deepmerge15(target, source, options = {
        clone: true
      }) {
        const output = options.clone ? (0, _extends22.default)({}, target) : target;
        if (isPlainObject3(target) && isPlainObject3(source)) {
          Object.keys(source).forEach((key) => {
            if (isPlainObject3(source[key]) && // Avoid prototype pollution
            Object.prototype.hasOwnProperty.call(target, key) && isPlainObject3(target[key])) {
              output[key] = deepmerge15(target[key], source[key], options);
            } else if (options.clone) {
              output[key] = isPlainObject3(source[key]) ? deepClone(source[key]) : source[key];
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/@mui/utils/node/deepmerge/index.js
  var require_deepmerge2 = __commonJS({
    "node_modules/@mui/utils/node/deepmerge/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      Object.keys(_deepmerge).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _deepmerge[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _deepmerge[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/capitalize/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/node/capitalize/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize7;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      function capitalize7(string) {
        if (typeof string !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/node/capitalize/index.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/utils/node/capitalize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      var _capitalize = _interopRequireDefault(require_capitalize());
    }
  });

  // node_modules/@mui/utils/node/ClassNameGenerator/ClassNameGenerator.js
  var require_ClassNameGenerator = __commonJS({
    "node_modules/@mui/utils/node/ClassNameGenerator/ClassNameGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var defaultGenerator = (componentName) => componentName;
      var createClassNameGenerator = () => {
        let generate = defaultGenerator;
        return {
          configure(generator) {
            generate = generator;
          },
          generate(componentName) {
            return generate(componentName);
          },
          reset() {
            generate = defaultGenerator;
          }
        };
      };
      var ClassNameGenerator = createClassNameGenerator();
      var _default = exports.default = ClassNameGenerator;
    }
  });

  // node_modules/@mui/utils/node/ClassNameGenerator/index.js
  var require_ClassNameGenerator2 = __commonJS({
    "node_modules/@mui/utils/node/ClassNameGenerator/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator());
    }
  });

  // node_modules/@mui/utils/node/generateUtilityClass/generateUtilityClass.js
  var require_generateUtilityClass = __commonJS({
    "node_modules/@mui/utils/node/generateUtilityClass/generateUtilityClass.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClass121;
      exports.globalStateClasses = void 0;
      exports.isGlobalState = isGlobalState;
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      var globalStateClasses2 = exports.globalStateClasses = {
        active: "active",
        checked: "checked",
        completed: "completed",
        disabled: "disabled",
        error: "error",
        expanded: "expanded",
        focused: "focused",
        focusVisible: "focusVisible",
        open: "open",
        readOnly: "readOnly",
        required: "required",
        selected: "selected"
      };
      function generateUtilityClass121(componentName, slot, globalStatePrefix = "Mui") {
        const globalStateClass = globalStateClasses2[slot];
        return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
      }
      function isGlobalState(slot) {
        return globalStateClasses2[slot] !== void 0;
      }
    }
  });

  // node_modules/@mui/utils/node/generateUtilityClass/index.js
  var require_generateUtilityClass2 = __commonJS({
    "node_modules/@mui/utils/node/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _generateUtilityClass[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/generateUtilityClasses/generateUtilityClasses.js
  var require_generateUtilityClasses = __commonJS({
    "node_modules/@mui/utils/node/generateUtilityClasses/generateUtilityClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClasses119;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
      function generateUtilityClasses119(componentName, slots, globalStatePrefix = "Mui") {
        const result = {};
        slots.forEach((slot) => {
          result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
        });
        return result;
      }
    }
  });

  // node_modules/@mui/utils/node/generateUtilityClasses/index.js
  var require_generateUtilityClasses2 = __commonJS({
    "node_modules/@mui/utils/node/generateUtilityClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses());
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment30 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment12(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment30;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment12;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/@mui/utils/node/getDisplayName/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/node/getDisplayName/getDisplayName.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getDisplayName3;
      exports.getFunctionName = getFunctionName;
      var _reactIs = require_react_is3();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn2) {
        const match2 = `${fn2}`.match(fnNameMatchRegex);
        const name = match2 && match2[1];
        return name || "";
      }
      function getFunctionComponentName(Component2, fallback = "") {
        return Component2.displayName || Component2.name || getFunctionName(Component2) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName3(Component2) {
        if (Component2 == null) {
          return void 0;
        }
        if (typeof Component2 === "string") {
          return Component2;
        }
        if (typeof Component2 === "function") {
          return getFunctionComponentName(Component2, "Component");
        }
        if (typeof Component2 === "object") {
          switch (Component2.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component2, Component2.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component2, Component2.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/node/getDisplayName/index.js
  var require_getDisplayName2 = __commonJS({
    "node_modules/@mui/utils/node/getDisplayName/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      var _getDisplayName = _interopRequireWildcard(require_getDisplayName());
      Object.keys(_getDisplayName).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _getDisplayName[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _getDisplayName[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/resolveProps/resolveProps.js
  var require_resolveProps = __commonJS({
    "node_modules/@mui/utils/node/resolveProps/resolveProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = resolveProps4;
      var _extends22 = _interopRequireDefault(require_extends());
      function resolveProps4(defaultProps2, props) {
        const output = (0, _extends22.default)({}, props);
        Object.keys(defaultProps2).forEach((propName) => {
          if (propName.toString().match(/^(components|slots)$/)) {
            output[propName] = (0, _extends22.default)({}, defaultProps2[propName], output[propName]);
          } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
            const defaultSlotProps = defaultProps2[propName] || {};
            const slotProps = props[propName];
            output[propName] = {};
            if (!slotProps || !Object.keys(slotProps)) {
              output[propName] = defaultSlotProps;
            } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
              output[propName] = slotProps;
            } else {
              output[propName] = (0, _extends22.default)({}, slotProps);
              Object.keys(defaultSlotProps).forEach((slotPropName) => {
                output[propName][slotPropName] = resolveProps4(defaultSlotProps[slotPropName], slotProps[slotPropName]);
              });
            }
          } else if (output[propName] === void 0) {
            output[propName] = defaultProps2[propName];
          }
        });
        return output;
      }
    }
  });

  // node_modules/@mui/utils/node/resolveProps/index.js
  var require_resolveProps2 = __commonJS({
    "node_modules/@mui/utils/node/resolveProps/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _resolveProps.default;
        }
      });
      var _resolveProps = _interopRequireDefault(require_resolveProps());
    }
  });

  // node_modules/@mui/utils/node/useEnhancedEffect/useEnhancedEffect.js
  var require_useEnhancedEffect = __commonJS({
    "node_modules/@mui/utils/node/useEnhancedEffect/useEnhancedEffect.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var useEnhancedEffect10 = typeof window !== "undefined" ? React221.useLayoutEffect : React221.useEffect;
      var _default = exports.default = useEnhancedEffect10;
    }
  });

  // node_modules/@mui/utils/node/useEnhancedEffect/index.js
  var require_useEnhancedEffect2 = __commonJS({
    "node_modules/@mui/utils/node/useEnhancedEffect/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
    }
  });

  // node_modules/@mui/utils/node/clamp/clamp.js
  var require_clamp = __commonJS({
    "node_modules/@mui/utils/node/clamp/clamp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function clamp5(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
        return Math.max(min2, Math.min(val, max2));
      }
      var _default = exports.default = clamp5;
    }
  });

  // node_modules/@mui/utils/node/clamp/index.js
  var require_clamp2 = __commonJS({
    "node_modules/@mui/utils/node/clamp/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _clamp.default;
        }
      });
      var _clamp = _interopRequireDefault(require_clamp());
    }
  });

  // node_modules/@mui/utils/node/chainPropTypes/chainPropTypes.js
  var require_chainPropTypes = __commonJS({
    "node_modules/@mui/utils/node/chainPropTypes/chainPropTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = chainPropTypes16;
      function chainPropTypes16(propType1, propType2) {
        if (false) {
          return () => null;
        }
        return function validate(...args) {
          return propType1(...args) || propType2(...args);
        };
      }
    }
  });

  // node_modules/@mui/utils/node/chainPropTypes/index.js
  var require_chainPropTypes2 = __commonJS({
    "node_modules/@mui/utils/node/chainPropTypes/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _chainPropTypes.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
    }
  });

  // node_modules/@mui/utils/node/elementAcceptingRef/elementAcceptingRef.js
  var require_elementAcceptingRef = __commonJS({
    "node_modules/@mui/utils/node/elementAcceptingRef/elementAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
      function isClassComponent(elementType) {
        const {
          prototype = {}
        } = elementType;
        return Boolean(prototype.isReactComponent);
      }
      function acceptingRef(props, propName, componentName, location, propFullName) {
        const element = props[propName];
        const safePropName = propFullName || propName;
        if (element == null || // When server-side rendering React doesn't warn either.
        // This is not an accurate check for SSR.
        // This is only in place for Emotion compat.
        // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
        typeof window === "undefined") {
          return null;
        }
        let warningHint;
        const elementType = element.type;
        if (typeof elementType === "function" && !isClassComponent(elementType)) {
          warningHint = "Did you accidentally use a plain function component for an element instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var elementAcceptingRef9 = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
      elementAcceptingRef9.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
      var _default = exports.default = elementAcceptingRef9;
    }
  });

  // node_modules/@mui/utils/node/elementAcceptingRef/index.js
  var require_elementAcceptingRef2 = __commonJS({
    "node_modules/@mui/utils/node/elementAcceptingRef/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _elementAcceptingRef.default;
        }
      });
      var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef());
    }
  });

  // node_modules/@mui/utils/node/elementTypeAcceptingRef/elementTypeAcceptingRef.js
  var require_elementTypeAcceptingRef = __commonJS({
    "node_modules/@mui/utils/node/elementTypeAcceptingRef/elementTypeAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
      function isClassComponent(elementType) {
        const {
          prototype = {}
        } = elementType;
        return Boolean(prototype.isReactComponent);
      }
      function elementTypeAcceptingRef8(props, propName, componentName, location, propFullName) {
        const propValue = props[propName];
        const safePropName = propFullName || propName;
        if (propValue == null || // When server-side rendering React doesn't warn either.
        // This is not an accurate check for SSR.
        // This is only in place for emotion compat.
        // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
        typeof window === "undefined") {
          return null;
        }
        let warningHint;
        if (typeof propValue === "function" && !isClassComponent(propValue)) {
          warningHint = "Did you accidentally provide a plain function component instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var _default = exports.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef8);
    }
  });

  // node_modules/@mui/utils/node/elementTypeAcceptingRef/index.js
  var require_elementTypeAcceptingRef2 = __commonJS({
    "node_modules/@mui/utils/node/elementTypeAcceptingRef/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _elementTypeAcceptingRef.default;
        }
      });
      var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef());
    }
  });

  // node_modules/@mui/utils/node/exactProp/exactProp.js
  var require_exactProp = __commonJS({
    "node_modules/@mui/utils/node/exactProp/exactProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exactProp8;
      var _extends22 = _interopRequireDefault(require_extends());
      var specialProperty = "exact-prop: \u200B";
      function exactProp8(propTypes) {
        if (false) {
          return propTypes;
        }
        return (0, _extends22.default)({}, propTypes, {
          [specialProperty]: (props) => {
            const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
            if (unsupportedProps.length > 0) {
              return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
            }
            return null;
          }
        });
      }
    }
  });

  // node_modules/@mui/utils/node/exactProp/index.js
  var require_exactProp2 = __commonJS({
    "node_modules/@mui/utils/node/exactProp/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _exactProp.default;
        }
      });
      var _exactProp = _interopRequireDefault(require_exactProp());
    }
  });

  // node_modules/@mui/utils/node/HTMLElementType/HTMLElementType.js
  var require_HTMLElementType = __commonJS({
    "node_modules/@mui/utils/node/HTMLElementType/HTMLElementType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = HTMLElementType8;
      function HTMLElementType8(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        const propValue = props[propName];
        const safePropName = propFullName || propName;
        if (propValue == null) {
          return null;
        }
        if (propValue && propValue.nodeType !== 1) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/node/HTMLElementType/index.js
  var require_HTMLElementType2 = __commonJS({
    "node_modules/@mui/utils/node/HTMLElementType/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _HTMLElementType.default;
        }
      });
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType());
    }
  });

  // node_modules/@mui/utils/node/ponyfillGlobal/ponyfillGlobal.js
  var require_ponyfillGlobal = __commonJS({
    "node_modules/@mui/utils/node/ponyfillGlobal/ponyfillGlobal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = exports.default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
    }
  });

  // node_modules/@mui/utils/node/ponyfillGlobal/index.js
  var require_ponyfillGlobal2 = __commonJS({
    "node_modules/@mui/utils/node/ponyfillGlobal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ponyfillGlobal.default;
        }
      });
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal());
    }
  });

  // node_modules/@mui/utils/node/refType/refType.js
  var require_refType = __commonJS({
    "node_modules/@mui/utils/node/refType/refType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var refType18 = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
      var _default = exports.default = refType18;
    }
  });

  // node_modules/@mui/utils/node/refType/index.js
  var require_refType2 = __commonJS({
    "node_modules/@mui/utils/node/refType/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _refType.default;
        }
      });
      var _refType = _interopRequireDefault(require_refType());
    }
  });

  // node_modules/@mui/utils/node/createChainedFunction/createChainedFunction.js
  var require_createChainedFunction = __commonJS({
    "node_modules/@mui/utils/node/createChainedFunction/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createChainedFunction4;
      function createChainedFunction4(...funcs) {
        return funcs.reduce((acc, func) => {
          if (func == null) {
            return acc;
          }
          return function chainedFunction(...args) {
            acc.apply(this, args);
            func.apply(this, args);
          };
        }, () => {
        });
      }
    }
  });

  // node_modules/@mui/utils/node/createChainedFunction/index.js
  var require_createChainedFunction2 = __commonJS({
    "node_modules/@mui/utils/node/createChainedFunction/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
    }
  });

  // node_modules/@mui/utils/node/debounce/debounce.js
  var require_debounce = __commonJS({
    "node_modules/@mui/utils/node/debounce/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = debounce5;
      function debounce5(func, wait = 166) {
        let timeout3;
        function debounced(...args) {
          const later = () => {
            func.apply(this, args);
          };
          clearTimeout(timeout3);
          timeout3 = setTimeout(later, wait);
        }
        debounced.clear = () => {
          clearTimeout(timeout3);
        };
        return debounced;
      }
    }
  });

  // node_modules/@mui/utils/node/debounce/index.js
  var require_debounce2 = __commonJS({
    "node_modules/@mui/utils/node/debounce/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      var _debounce = _interopRequireWildcard(require_debounce());
      Object.keys(_debounce).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _debounce[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _debounce[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/deprecatedPropType/deprecatedPropType.js
  var require_deprecatedPropType = __commonJS({
    "node_modules/@mui/utils/node/deprecatedPropType/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deprecatedPropType;
      function deprecatedPropType(validator, reason) {
        if (false) {
          return () => null;
        }
        return (props, propName, componentName, location, propFullName) => {
          const componentNameSafe = componentName || "<<anonymous>>";
          const propFullNameSafe = propFullName || propName;
          if (typeof props[propName] !== "undefined") {
            return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
          }
          return null;
        };
      }
    }
  });

  // node_modules/@mui/utils/node/deprecatedPropType/index.js
  var require_deprecatedPropType2 = __commonJS({
    "node_modules/@mui/utils/node/deprecatedPropType/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
    }
  });

  // node_modules/@mui/utils/node/isMuiElement/isMuiElement.js
  var require_isMuiElement = __commonJS({
    "node_modules/@mui/utils/node/isMuiElement/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isMuiElement3;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function isMuiElement3(element, muiNames) {
        var _muiName, _element$type;
        return /* @__PURE__ */ React221.isValidElement(element) && muiNames.indexOf(
          // For server components `muiName` is avaialble in element.type._payload.value.muiName
          // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
          // eslint-disable-next-line no-underscore-dangle
          (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
        ) !== -1;
      }
    }
  });

  // node_modules/@mui/utils/node/isMuiElement/index.js
  var require_isMuiElement2 = __commonJS({
    "node_modules/@mui/utils/node/isMuiElement/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      var _isMuiElement = _interopRequireDefault(require_isMuiElement());
    }
  });

  // node_modules/@mui/utils/node/ownerDocument/ownerDocument.js
  var require_ownerDocument = __commonJS({
    "node_modules/@mui/utils/node/ownerDocument/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerDocument9;
      function ownerDocument9(node2) {
        return node2 && node2.ownerDocument || document;
      }
    }
  });

  // node_modules/@mui/utils/node/ownerDocument/index.js
  var require_ownerDocument2 = __commonJS({
    "node_modules/@mui/utils/node/ownerDocument/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
    }
  });

  // node_modules/@mui/utils/node/ownerWindow/ownerWindow.js
  var require_ownerWindow = __commonJS({
    "node_modules/@mui/utils/node/ownerWindow/ownerWindow.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerWindow7;
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      function ownerWindow7(node2) {
        const doc = (0, _ownerDocument.default)(node2);
        return doc.defaultView || window;
      }
    }
  });

  // node_modules/@mui/utils/node/ownerWindow/index.js
  var require_ownerWindow2 = __commonJS({
    "node_modules/@mui/utils/node/ownerWindow/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      var _ownerWindow = _interopRequireDefault(require_ownerWindow());
    }
  });

  // node_modules/@mui/utils/node/requirePropFactory/requirePropFactory.js
  var require_requirePropFactory = __commonJS({
    "node_modules/@mui/utils/node/requirePropFactory/requirePropFactory.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = requirePropFactory2;
      var _extends22 = _interopRequireDefault(require_extends());
      function requirePropFactory2(componentNameInError, Component2) {
        if (false) {
          return () => null;
        }
        const prevPropTypes = Component2 ? (0, _extends22.default)({}, Component2.propTypes) : null;
        const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
          const propFullNameSafe = propFullName || propName;
          const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
          if (defaultTypeChecker) {
            const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
            if (typeCheckerResult) {
              return typeCheckerResult;
            }
          }
          if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
            return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
          }
          return null;
        };
        return requireProp;
      }
    }
  });

  // node_modules/@mui/utils/node/requirePropFactory/index.js
  var require_requirePropFactory2 = __commonJS({
    "node_modules/@mui/utils/node/requirePropFactory/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory());
    }
  });

  // node_modules/@mui/utils/node/setRef/setRef.js
  var require_setRef = __commonJS({
    "node_modules/@mui/utils/node/setRef/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = setRef4;
      function setRef4(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }
  });

  // node_modules/@mui/utils/node/setRef/index.js
  var require_setRef2 = __commonJS({
    "node_modules/@mui/utils/node/setRef/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      var _setRef = _interopRequireDefault(require_setRef());
    }
  });

  // node_modules/@mui/utils/node/useId/useId.js
  var require_useId = __commonJS({
    "node_modules/@mui/utils/node/useId/useId.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useId7;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var globalId = 0;
      function useGlobalId(idOverride) {
        const [defaultId, setDefaultId] = React221.useState(idOverride);
        const id = idOverride || defaultId;
        React221.useEffect(() => {
          if (defaultId == null) {
            globalId += 1;
            setDefaultId(`mui-${globalId}`);
          }
        }, [defaultId]);
        return id;
      }
      var maybeReactUseId = React221["useId".toString()];
      function useId7(idOverride) {
        if (maybeReactUseId !== void 0) {
          const reactId = maybeReactUseId();
          return idOverride != null ? idOverride : reactId;
        }
        return useGlobalId(idOverride);
      }
    }
  });

  // node_modules/@mui/utils/node/useId/index.js
  var require_useId2 = __commonJS({
    "node_modules/@mui/utils/node/useId/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      var _useId = _interopRequireDefault(require_useId());
    }
  });

  // node_modules/@mui/utils/node/unsupportedProp/unsupportedProp.js
  var require_unsupportedProp = __commonJS({
    "node_modules/@mui/utils/node/unsupportedProp/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = unsupportedProp2;
      function unsupportedProp2(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/node/unsupportedProp/index.js
  var require_unsupportedProp2 = __commonJS({
    "node_modules/@mui/utils/node/unsupportedProp/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp());
    }
  });

  // node_modules/@mui/utils/node/useControlled/useControlled.js
  var require_useControlled = __commonJS({
    "node_modules/@mui/utils/node/useControlled/useControlled.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControlled6;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function useControlled6({
        controlled,
        default: defaultProp,
        name,
        state = "value"
      }) {
        const {
          current: isControlled
        } = React221.useRef(controlled !== void 0);
        const [valueState, setValue] = React221.useState(defaultProp);
        const value = isControlled ? controlled : valueState;
        if (true) {
          React221.useEffect(() => {
            if (isControlled !== (controlled !== void 0)) {
              console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
            }
          }, [state, name, controlled]);
          const {
            current: defaultValue
          } = React221.useRef(defaultProp);
          React221.useEffect(() => {
            if (!isControlled && !Object.is(defaultValue, defaultProp)) {
              console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
            }
          }, [JSON.stringify(defaultProp)]);
        }
        const setValueIfUncontrolled = React221.useCallback((newValue) => {
          if (!isControlled) {
            setValue(newValue);
          }
        }, []);
        return [value, setValueIfUncontrolled];
      }
    }
  });

  // node_modules/@mui/utils/node/useControlled/index.js
  var require_useControlled2 = __commonJS({
    "node_modules/@mui/utils/node/useControlled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      var _useControlled = _interopRequireDefault(require_useControlled());
    }
  });

  // node_modules/@mui/utils/node/useEventCallback/useEventCallback.js
  var require_useEventCallback = __commonJS({
    "node_modules/@mui/utils/node/useEventCallback/useEventCallback.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React221 = _interopRequireWildcard(require_react());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function useEventCallback8(fn2) {
        const ref = React221.useRef(fn2);
        (0, _useEnhancedEffect.default)(() => {
          ref.current = fn2;
        });
        return React221.useRef((...args) => (
          // @ts-expect-error hide `this`
          (0, ref.current)(...args)
        )).current;
      }
      var _default = exports.default = useEventCallback8;
    }
  });

  // node_modules/@mui/utils/node/useEventCallback/index.js
  var require_useEventCallback2 = __commonJS({
    "node_modules/@mui/utils/node/useEventCallback/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
    }
  });

  // node_modules/@mui/utils/node/useForkRef/useForkRef.js
  var require_useForkRef = __commonJS({
    "node_modules/@mui/utils/node/useForkRef/useForkRef.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useForkRef14;
      var React221 = _interopRequireWildcard(require_react());
      var _setRef = _interopRequireDefault(require_setRef2());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function useForkRef14(...refs) {
        return React221.useMemo(() => {
          if (refs.every((ref) => ref == null)) {
            return null;
          }
          return (instance) => {
            refs.forEach((ref) => {
              (0, _setRef.default)(ref, instance);
            });
          };
        }, refs);
      }
    }
  });

  // node_modules/@mui/utils/node/useForkRef/index.js
  var require_useForkRef2 = __commonJS({
    "node_modules/@mui/utils/node/useForkRef/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      var _useForkRef = _interopRequireDefault(require_useForkRef());
    }
  });

  // node_modules/@mui/utils/node/useLazyRef/useLazyRef.js
  var require_useLazyRef = __commonJS({
    "node_modules/@mui/utils/node/useLazyRef/useLazyRef.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useLazyRef;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var UNINITIALIZED = {};
      function useLazyRef(init, initArg) {
        const ref = React221.useRef(UNINITIALIZED);
        if (ref.current === UNINITIALIZED) {
          ref.current = init(initArg);
        }
        return ref;
      }
    }
  });

  // node_modules/@mui/utils/node/useLazyRef/index.js
  var require_useLazyRef2 = __commonJS({
    "node_modules/@mui/utils/node/useLazyRef/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useLazyRef.default;
        }
      });
      var _useLazyRef = _interopRequireDefault(require_useLazyRef());
    }
  });

  // node_modules/@mui/utils/node/useOnMount/useOnMount.js
  var require_useOnMount = __commonJS({
    "node_modules/@mui/utils/node/useOnMount/useOnMount.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useOnMount;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var EMPTY = [];
      function useOnMount(fn2) {
        React221.useEffect(fn2, EMPTY);
      }
    }
  });

  // node_modules/@mui/utils/node/useTimeout/useTimeout.js
  var require_useTimeout = __commonJS({
    "node_modules/@mui/utils/node/useTimeout/useTimeout.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Timeout = void 0;
      exports.default = useTimeout7;
      var _useLazyRef = _interopRequireDefault(require_useLazyRef());
      var _useOnMount = _interopRequireDefault(require_useOnMount());
      var Timeout2 = class _Timeout {
        constructor() {
          this.currentId = null;
          this.clear = () => {
            if (this.currentId !== null) {
              clearTimeout(this.currentId);
              this.currentId = null;
            }
          };
          this.disposeEffect = () => {
            return this.clear;
          };
        }
        static create() {
          return new _Timeout();
        }
        /**
         * Executes `fn` after `delay`, clearing any previously scheduled call.
         */
        start(delay, fn2) {
          this.clear();
          this.currentId = setTimeout(() => {
            this.currentId = null;
            fn2();
          }, delay);
        }
      };
      exports.Timeout = Timeout2;
      function useTimeout7() {
        const timeout3 = (0, _useLazyRef.default)(Timeout2.create).current;
        (0, _useOnMount.default)(timeout3.disposeEffect);
        return timeout3;
      }
    }
  });

  // node_modules/@mui/utils/node/useTimeout/index.js
  var require_useTimeout2 = __commonJS({
    "node_modules/@mui/utils/node/useTimeout/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Timeout", {
        enumerable: true,
        get: function() {
          return _useTimeout.Timeout;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTimeout.default;
        }
      });
      var _useTimeout = _interopRequireWildcard(require_useTimeout());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/useOnMount/index.js
  var require_useOnMount2 = __commonJS({
    "node_modules/@mui/utils/node/useOnMount/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useOnMount.default;
        }
      });
      var _useOnMount = _interopRequireDefault(require_useOnMount());
    }
  });

  // node_modules/@mui/utils/node/useIsFocusVisible/useIsFocusVisible.js
  var require_useIsFocusVisible = __commonJS({
    "node_modules/@mui/utils/node/useIsFocusVisible/useIsFocusVisible.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useIsFocusVisible4;
      exports.teardown = teardown;
      var React221 = _interopRequireWildcard(require_react());
      var _useTimeout = require_useTimeout();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var hadKeyboardEvent = true;
      var hadFocusVisibleRecently = false;
      var hadFocusVisibleRecentlyTimeout = new _useTimeout.Timeout();
      var inputTypesWhitelist = {
        text: true,
        search: true,
        url: true,
        tel: true,
        email: true,
        password: true,
        number: true,
        date: true,
        month: true,
        week: true,
        time: true,
        datetime: true,
        "datetime-local": true
      };
      function focusTriggersKeyboardModality(node2) {
        const {
          type,
          tagName
        } = node2;
        if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
          return true;
        }
        if (tagName === "TEXTAREA" && !node2.readOnly) {
          return true;
        }
        if (node2.isContentEditable) {
          return true;
        }
        return false;
      }
      function handleKeyDown(event) {
        if (event.metaKey || event.altKey || event.ctrlKey) {
          return;
        }
        hadKeyboardEvent = true;
      }
      function handlePointerDown() {
        hadKeyboardEvent = false;
      }
      function handleVisibilityChange() {
        if (this.visibilityState === "hidden") {
          if (hadFocusVisibleRecently) {
            hadKeyboardEvent = true;
          }
        }
      }
      function prepare(doc) {
        doc.addEventListener("keydown", handleKeyDown, true);
        doc.addEventListener("mousedown", handlePointerDown, true);
        doc.addEventListener("pointerdown", handlePointerDown, true);
        doc.addEventListener("touchstart", handlePointerDown, true);
        doc.addEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function teardown(doc) {
        doc.removeEventListener("keydown", handleKeyDown, true);
        doc.removeEventListener("mousedown", handlePointerDown, true);
        doc.removeEventListener("pointerdown", handlePointerDown, true);
        doc.removeEventListener("touchstart", handlePointerDown, true);
        doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function isFocusVisible(event) {
        const {
          target
        } = event;
        try {
          return target.matches(":focus-visible");
        } catch (error) {
        }
        return hadKeyboardEvent || focusTriggersKeyboardModality(target);
      }
      function useIsFocusVisible4() {
        const ref = React221.useCallback((node2) => {
          if (node2 != null) {
            prepare(node2.ownerDocument);
          }
        }, []);
        const isFocusVisibleRef = React221.useRef(false);
        function handleBlurVisible() {
          if (isFocusVisibleRef.current) {
            hadFocusVisibleRecently = true;
            hadFocusVisibleRecentlyTimeout.start(100, () => {
              hadFocusVisibleRecently = false;
            });
            isFocusVisibleRef.current = false;
            return true;
          }
          return false;
        }
        function handleFocusVisible(event) {
          if (isFocusVisible(event)) {
            isFocusVisibleRef.current = true;
            return true;
          }
          return false;
        }
        return {
          isFocusVisibleRef,
          onFocus: handleFocusVisible,
          onBlur: handleBlurVisible,
          ref
        };
      }
    }
  });

  // node_modules/@mui/utils/node/useIsFocusVisible/index.js
  var require_useIsFocusVisible2 = __commonJS({
    "node_modules/@mui/utils/node/useIsFocusVisible/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      var _useIsFocusVisible = _interopRequireWildcard(require_useIsFocusVisible());
      Object.keys(_useIsFocusVisible).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _useIsFocusVisible[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useIsFocusVisible[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/getScrollbarSize/getScrollbarSize.js
  var require_getScrollbarSize = __commonJS({
    "node_modules/@mui/utils/node/getScrollbarSize/getScrollbarSize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getScrollbarSize3;
      function getScrollbarSize3(doc) {
        const documentWidth = doc.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }
  });

  // node_modules/@mui/utils/node/getScrollbarSize/index.js
  var require_getScrollbarSize2 = __commonJS({
    "node_modules/@mui/utils/node/getScrollbarSize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _getScrollbarSize.default;
        }
      });
      var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize());
    }
  });

  // node_modules/@mui/utils/node/scrollLeft/scrollLeft.js
  var require_scrollLeft = __commonJS({
    "node_modules/@mui/utils/node/scrollLeft/scrollLeft.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.detectScrollType = detectScrollType;
      exports.getNormalizedScrollLeft = getNormalizedScrollLeft;
      var cachedType;
      function detectScrollType() {
        if (cachedType) {
          return cachedType;
        }
        const dummy = document.createElement("div");
        const container = document.createElement("div");
        container.style.width = "10px";
        container.style.height = "1px";
        dummy.appendChild(container);
        dummy.dir = "rtl";
        dummy.style.fontSize = "14px";
        dummy.style.width = "4px";
        dummy.style.height = "1px";
        dummy.style.position = "absolute";
        dummy.style.top = "-1000px";
        dummy.style.overflow = "scroll";
        document.body.appendChild(dummy);
        cachedType = "reverse";
        if (dummy.scrollLeft > 0) {
          cachedType = "default";
        } else {
          dummy.scrollLeft = 1;
          if (dummy.scrollLeft === 0) {
            cachedType = "negative";
          }
        }
        document.body.removeChild(dummy);
        return cachedType;
      }
      function getNormalizedScrollLeft(element, direction2) {
        const scrollLeft = element.scrollLeft;
        if (direction2 !== "rtl") {
          return scrollLeft;
        }
        const type = detectScrollType();
        switch (type) {
          case "negative":
            return element.scrollWidth - element.clientWidth + scrollLeft;
          case "reverse":
            return element.scrollWidth - element.clientWidth - scrollLeft;
          default:
            return scrollLeft;
        }
      }
    }
  });

  // node_modules/@mui/utils/node/scrollLeft/index.js
  var require_scrollLeft2 = __commonJS({
    "node_modules/@mui/utils/node/scrollLeft/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _scrollLeft = require_scrollLeft();
      Object.keys(_scrollLeft).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (key in exports && exports[key] === _scrollLeft[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _scrollLeft[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/utils/node/usePreviousProps/usePreviousProps.js
  var require_usePreviousProps = __commonJS({
    "node_modules/@mui/utils/node/usePreviousProps/usePreviousProps.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var usePreviousProps4 = (value) => {
        const ref = React221.useRef({});
        React221.useEffect(() => {
          ref.current = value;
        });
        return ref.current;
      };
      var _default = exports.default = usePreviousProps4;
    }
  });

  // node_modules/@mui/utils/node/usePreviousProps/index.js
  var require_usePreviousProps2 = __commonJS({
    "node_modules/@mui/utils/node/usePreviousProps/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _usePreviousProps.default;
        }
      });
      var _usePreviousProps = _interopRequireDefault(require_usePreviousProps());
    }
  });

  // node_modules/@mui/utils/node/getValidReactChildren/getValidReactChildren.js
  var require_getValidReactChildren = __commonJS({
    "node_modules/@mui/utils/node/getValidReactChildren/getValidReactChildren.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getValidReactChildren3;
      var React221 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function getValidReactChildren3(children) {
        return React221.Children.toArray(children).filter((child) => /* @__PURE__ */ React221.isValidElement(child));
      }
    }
  });

  // node_modules/@mui/utils/node/getValidReactChildren/index.js
  var require_getValidReactChildren2 = __commonJS({
    "node_modules/@mui/utils/node/getValidReactChildren/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _getValidReactChildren.default;
        }
      });
      var _getValidReactChildren = _interopRequireDefault(require_getValidReactChildren());
    }
  });

  // node_modules/@mui/utils/node/visuallyHidden/visuallyHidden.js
  var require_visuallyHidden = __commonJS({
    "node_modules/@mui/utils/node/visuallyHidden/visuallyHidden.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var visuallyHidden3 = {
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        whiteSpace: "nowrap",
        width: "1px"
      };
      var _default = exports.default = visuallyHidden3;
    }
  });

  // node_modules/@mui/utils/node/visuallyHidden/index.js
  var require_visuallyHidden2 = __commonJS({
    "node_modules/@mui/utils/node/visuallyHidden/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _visuallyHidden.default;
        }
      });
      var _visuallyHidden = _interopRequireDefault(require_visuallyHidden());
    }
  });

  // node_modules/@mui/utils/node/integerPropType/integerPropType.js
  var require_integerPropType = __commonJS({
    "node_modules/@mui/utils/node/integerPropType/integerPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTypeByValue = getTypeByValue;
      function getTypeByValue(value) {
        const valueType = typeof value;
        switch (valueType) {
          case "number":
            if (Number.isNaN(value)) {
              return "NaN";
            }
            if (!Number.isFinite(value)) {
              return "Infinity";
            }
            if (value !== Math.floor(value)) {
              return "float";
            }
            return "number";
          case "object":
            if (value === null) {
              return "null";
            }
            return value.constructor.name;
          default:
            return valueType;
        }
      }
      function ponyfillIsInteger(x) {
        return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
      }
      var isInteger = Number.isInteger || ponyfillIsInteger;
      function requiredInteger(props, propName, componentName, location) {
        const propValue = props[propName];
        if (propValue == null || !isInteger(propValue)) {
          const propType = getTypeByValue(propValue);
          return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
        }
        return null;
      }
      function validator(props, propName, ...other) {
        const propValue = props[propName];
        if (propValue === void 0) {
          return null;
        }
        return requiredInteger(props, propName, ...other);
      }
      function validatorNoop() {
        return null;
      }
      validator.isRequired = requiredInteger;
      validatorNoop.isRequired = validatorNoop;
      var _default = exports.default = false ? validatorNoop : validator;
    }
  });

  // node_modules/@mui/utils/node/integerPropType/index.js
  var require_integerPropType2 = __commonJS({
    "node_modules/@mui/utils/node/integerPropType/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _integerPropType.default;
        }
      });
      var _integerPropType = _interopRequireWildcard(require_integerPropType());
      Object.keys(_integerPropType).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _integerPropType[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _integerPropType[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/utils/node/composeClasses/composeClasses.js
  var require_composeClasses = __commonJS({
    "node_modules/@mui/utils/node/composeClasses/composeClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = composeClasses117;
      function composeClasses117(slots, getUtilityClass, classes2 = void 0) {
        const output = {};
        Object.keys(slots).forEach(
          // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
          // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
          (slot) => {
            output[slot] = slots[slot].reduce((acc, key) => {
              if (key) {
                const utilityClass = getUtilityClass(key);
                if (utilityClass !== "") {
                  acc.push(utilityClass);
                }
                if (classes2 && classes2[key]) {
                  acc.push(classes2[key]);
                }
              }
              return acc;
            }, []).join(" ");
          }
        );
        return output;
      }
    }
  });

  // node_modules/@mui/utils/node/composeClasses/index.js
  var require_composeClasses2 = __commonJS({
    "node_modules/@mui/utils/node/composeClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      var _composeClasses = _interopRequireDefault(require_composeClasses());
    }
  });

  // node_modules/@mui/utils/node/index.js
  var require_node2 = __commonJS({
    "node_modules/@mui/utils/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        chainPropTypes: true,
        deepmerge: true,
        isPlainObject: true,
        elementAcceptingRef: true,
        elementTypeAcceptingRef: true,
        exactProp: true,
        formatMuiErrorMessage: true,
        getDisplayName: true,
        HTMLElementType: true,
        ponyfillGlobal: true,
        refType: true,
        unstable_capitalize: true,
        unstable_createChainedFunction: true,
        unstable_debounce: true,
        unstable_deprecatedPropType: true,
        unstable_isMuiElement: true,
        unstable_ownerDocument: true,
        unstable_ownerWindow: true,
        unstable_requirePropFactory: true,
        unstable_setRef: true,
        unstable_useEnhancedEffect: true,
        unstable_useId: true,
        unstable_unsupportedProp: true,
        unstable_useControlled: true,
        unstable_useEventCallback: true,
        unstable_useForkRef: true,
        unstable_useLazyRef: true,
        unstable_useTimeout: true,
        unstable_Timeout: true,
        unstable_useOnMount: true,
        unstable_useIsFocusVisible: true,
        unstable_getScrollbarSize: true,
        unstable_detectScrollType: true,
        unstable_getNormalizedScrollLeft: true,
        usePreviousProps: true,
        getValidReactChildren: true,
        visuallyHidden: true,
        integerPropType: true,
        internal_resolveProps: true,
        unstable_composeClasses: true,
        unstable_generateUtilityClass: true,
        unstable_isGlobalState: true,
        unstable_generateUtilityClasses: true,
        unstable_ClassNameGenerator: true,
        clamp: true
      };
      Object.defineProperty(exports, "HTMLElementType", {
        enumerable: true,
        get: function() {
          return _HTMLElementType.default;
        }
      });
      Object.defineProperty(exports, "chainPropTypes", {
        enumerable: true,
        get: function() {
          return _chainPropTypes.default;
        }
      });
      Object.defineProperty(exports, "clamp", {
        enumerable: true,
        get: function() {
          return _clamp.default;
        }
      });
      Object.defineProperty(exports, "deepmerge", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      Object.defineProperty(exports, "elementAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "elementTypeAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementTypeAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "exactProp", {
        enumerable: true,
        get: function() {
          return _exactProp.default;
        }
      });
      Object.defineProperty(exports, "formatMuiErrorMessage", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      Object.defineProperty(exports, "getDisplayName", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      Object.defineProperty(exports, "getValidReactChildren", {
        enumerable: true,
        get: function() {
          return _getValidReactChildren.default;
        }
      });
      Object.defineProperty(exports, "integerPropType", {
        enumerable: true,
        get: function() {
          return _integerPropType.default;
        }
      });
      Object.defineProperty(exports, "internal_resolveProps", {
        enumerable: true,
        get: function() {
          return _resolveProps.default;
        }
      });
      Object.defineProperty(exports, "isPlainObject", {
        enumerable: true,
        get: function() {
          return _deepmerge.isPlainObject;
        }
      });
      Object.defineProperty(exports, "ponyfillGlobal", {
        enumerable: true,
        get: function() {
          return _ponyfillGlobal.default;
        }
      });
      Object.defineProperty(exports, "refType", {
        enumerable: true,
        get: function() {
          return _refType.default;
        }
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      Object.defineProperty(exports, "unstable_Timeout", {
        enumerable: true,
        get: function() {
          return _useTimeout.Timeout;
        }
      });
      Object.defineProperty(exports, "unstable_capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "unstable_debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "unstable_deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "unstable_detectScrollType", {
        enumerable: true,
        get: function() {
          return _scrollLeft.detectScrollType;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClass", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClasses", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_getNormalizedScrollLeft", {
        enumerable: true,
        get: function() {
          return _scrollLeft.getNormalizedScrollLeft;
        }
      });
      Object.defineProperty(exports, "unstable_getScrollbarSize", {
        enumerable: true,
        get: function() {
          return _getScrollbarSize.default;
        }
      });
      Object.defineProperty(exports, "unstable_isGlobalState", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.isGlobalState;
        }
      });
      Object.defineProperty(exports, "unstable_isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "unstable_requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "unstable_setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "unstable_useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unstable_useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      Object.defineProperty(exports, "unstable_useLazyRef", {
        enumerable: true,
        get: function() {
          return _useLazyRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_useOnMount", {
        enumerable: true,
        get: function() {
          return _useOnMount.default;
        }
      });
      Object.defineProperty(exports, "unstable_useTimeout", {
        enumerable: true,
        get: function() {
          return _useTimeout.default;
        }
      });
      Object.defineProperty(exports, "usePreviousProps", {
        enumerable: true,
        get: function() {
          return _usePreviousProps.default;
        }
      });
      Object.defineProperty(exports, "visuallyHidden", {
        enumerable: true,
        get: function() {
          return _visuallyHidden.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
      var _deepmerge = _interopRequireWildcard(require_deepmerge2());
      var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef2());
      var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef2());
      var _exactProp = _interopRequireDefault(require_exactProp2());
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal2());
      var _refType = _interopRequireDefault(require_refType2());
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
      var _debounce = _interopRequireDefault(require_debounce2());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
      var _setRef = _interopRequireDefault(require_setRef2());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      var _useId = _interopRequireDefault(require_useId2());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
      var _useControlled = _interopRequireDefault(require_useControlled2());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
      var _useForkRef = _interopRequireDefault(require_useForkRef2());
      var _useLazyRef = _interopRequireDefault(require_useLazyRef2());
      var _useTimeout = _interopRequireWildcard(require_useTimeout2());
      var _useOnMount = _interopRequireDefault(require_useOnMount2());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible2());
      var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize2());
      var _scrollLeft = require_scrollLeft2();
      var _usePreviousProps = _interopRequireDefault(require_usePreviousProps2());
      var _getValidReactChildren = _interopRequireDefault(require_getValidReactChildren2());
      var _visuallyHidden = _interopRequireDefault(require_visuallyHidden2());
      var _integerPropType = _interopRequireDefault(require_integerPropType2());
      var _resolveProps = _interopRequireDefault(require_resolveProps2());
      var _composeClasses = _interopRequireDefault(require_composeClasses2());
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass2());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _generateUtilityClass[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      var _clamp = _interopRequireDefault(require_clamp2());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/system/merge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      function merge5(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _deepmerge.default)(acc, item, {
          clone: false
          // No need to clone deep, it's way faster.
        });
      }
      var _default = exports.default = merge5;
    }
  });

  // node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType2 = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = exports.default = responsivePropType2;
    }
  });

  // node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.computeBreakpointsBase = computeBreakpointsBase2;
      exports.createEmptyBreakpointObject = createEmptyBreakpointObject2;
      exports.default = void 0;
      exports.handleBreakpoints = handleBreakpoints2;
      exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder2;
      exports.removeUnusedBreakpoints = removeUnusedBreakpoints2;
      exports.resolveBreakpointValues = resolveBreakpointValues2;
      exports.values = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _merge = _interopRequireDefault(require_merge());
      var values3 = exports.values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      };
      var defaultBreakpoints2 = {
        // Sorted ASC by size. That's important.
        // It can't be configured as it's used statically for propTypes.
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values3[key]}px)`
      };
      function handleBreakpoints2(props, propValue, styleFromPropValue) {
        const theme = props.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          return propValue.reduce((acc, item, index) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values3).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints2(styleFunction) {
        const newStyleFunction = (props) => {
          const theme = props.theme || {};
          const base = styleFunction(props);
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction((0, _extends22.default)({
                theme
              }, props[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends22.default)({}, styleFunction.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject2(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints2(breakpointKeys2, style4) {
        return breakpointKeys2.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style4);
      }
      function mergeBreakpointsInOrder2(breakpointsInput, ...styles8) {
        const emptyBreakpoints = createEmptyBreakpointObject2(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles8].reduce((prev2, next2) => (0, _deepmerge.default)(prev2, next2), {});
        return removeUnusedBreakpoints2(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase2(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i2) => {
            if (i2 < breakpointValues.length) {
              base[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base[breakpoint] = true;
            }
          });
        }
        return base;
      }
      function resolveBreakpointValues2({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base = customBase || computeBreakpointsBase2(breakpointValues, themeBreakpoints);
        const keys = Object.keys(base);
        if (keys.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys.reduce((acc, breakpoint, i2) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i2] != null ? breakpointValues[i2] : breakpointValues[previous];
            previous = i2;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = exports.default = breakpoints2;
    }
  });

  // node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPath = getPath2;
      exports.getStyleValue = getStyleValue3;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath2(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getStyleValue3(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath2(themeMapping, propValueFinal) || userValue;
        }
        if (transform) {
          value = transform(value, userValue, themeMapping);
        }
        return value;
      }
      function style4(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform
        } = options;
        const fn2 = (props) => {
          if (props[prop] == null) {
            return null;
          }
          const propValue = props[prop];
          const theme = props.theme;
          const themeMapping = getPath2(theme, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getStyleValue3(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getStyleValue3(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn2.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn2.filterProps = [prop];
        return fn2;
      }
      var _default = exports.default = style4;
    }
  });

  // node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize3;
      function memoize3(fn2) {
        const cache = {};
        return (arg) => {
          if (cache[arg] === void 0) {
            cache[arg] = fn2(arg);
          }
          return cache[arg];
        };
      }
    }
  });

  // node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing2;
      exports.createUnaryUnit = createUnaryUnit2;
      exports.default = void 0;
      exports.getStyleFromPropValue = getStyleFromPropValue2;
      exports.getValue = getValue2;
      exports.margin = margin2;
      exports.marginKeys = void 0;
      exports.padding = padding2;
      exports.paddingKeys = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties2 = {
        m: "margin",
        p: "padding"
      };
      var directions2 = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases2 = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties2 = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases2[prop]) {
            prop = aliases2[prop];
          } else {
            return [prop];
          }
        }
        const [a2, b2] = prop.split("");
        const property = properties2[a2];
        const direction2 = directions2[b2] || "";
        return Array.isArray(direction2) ? direction2.map((dir) => property + dir) : [property + direction2];
      });
      var marginKeys2 = exports.marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      var paddingKeys2 = exports.paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      var spacingKeys2 = [...marginKeys2, ...paddingKeys2];
      function createUnaryUnit2(theme, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (typeof abs2 !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
              }
            }
            return themeSpacing * abs2;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (!Number.isInteger(abs2)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs2 > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs2];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing2(theme) {
        return createUnaryUnit2(theme, "spacing", 8, "spacing");
      }
      function getValue2(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs2 = Math.abs(propValue);
        const transformed = transformer(abs2);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue2(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue2(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty2(props, keys, prop, transformer) {
        if (keys.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties2(prop);
        const styleFromPropValue = getStyleFromPropValue2(cssProperties, transformer);
        const propValue = props[prop];
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      }
      function style4(props, keys) {
        const transformer = createUnarySpacing2(props.theme);
        return Object.keys(props).map((prop) => resolveCssProperty2(props, keys, prop, transformer)).reduce(_merge.default, {});
      }
      function margin2(props) {
        return style4(props, marginKeys2);
      }
      margin2.propTypes = true ? marginKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin2.filterProps = marginKeys2;
      function padding2(props) {
        return style4(props, paddingKeys2);
      }
      padding2.propTypes = true ? paddingKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding2.filterProps = paddingKeys2;
      function spacing2(props) {
        return style4(props, spacingKeys2);
      }
      spacing2.propTypes = true ? spacingKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing2.filterProps = spacingKeys2;
      var _default = exports.default = spacing2;
    }
  });

  // node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose2(...styles8) {
        const handlers = styles8.reduce((acc, style4) => {
          style4.filterProps.forEach((prop) => {
            acc[prop] = style4;
          });
          return acc;
        }, {});
        const fn2 = (props) => {
          return Object.keys(props).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props));
            }
            return acc;
          }, {});
        };
        fn2.propTypes = true ? styles8.reduce((acc, style4) => Object.assign(acc, style4.propTypes), {}) : {};
        fn2.filterProps = styles8.reduce((acc, style4) => acc.concat(style4.filterProps), []);
        return fn2;
      }
      var _default = exports.default = compose2;
    }
  });

  // node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
      exports.borderTransform = borderTransform2;
      exports.outlineColor = exports.outline = exports.default = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function borderTransform2(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      function createBorderStyle2(prop, transform) {
        return (0, _style.default)({
          prop,
          themeKey: "borders",
          transform
        });
      }
      var border2 = exports.border = createBorderStyle2("border", borderTransform2);
      var borderTop2 = exports.borderTop = createBorderStyle2("borderTop", borderTransform2);
      var borderRight2 = exports.borderRight = createBorderStyle2("borderRight", borderTransform2);
      var borderBottom2 = exports.borderBottom = createBorderStyle2("borderBottom", borderTransform2);
      var borderLeft2 = exports.borderLeft = createBorderStyle2("borderLeft", borderTransform2);
      var borderColor2 = exports.borderColor = createBorderStyle2("borderColor");
      var borderTopColor2 = exports.borderTopColor = createBorderStyle2("borderTopColor");
      var borderRightColor2 = exports.borderRightColor = createBorderStyle2("borderRightColor");
      var borderBottomColor2 = exports.borderBottomColor = createBorderStyle2("borderBottomColor");
      var borderLeftColor2 = exports.borderLeftColor = createBorderStyle2("borderLeftColor");
      var outline2 = exports.outline = createBorderStyle2("outline", borderTransform2);
      var outlineColor2 = exports.outlineColor = createBorderStyle2("outlineColor");
      var borderRadius2 = (props) => {
        if (props.borderRadius !== void 0 && props.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports.borderRadius = borderRadius2;
      borderRadius2.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius2.filterProps = ["borderRadius"];
      var borders2 = (0, _compose.default)(border2, borderTop2, borderRight2, borderBottom2, borderLeft2, borderColor2, borderTopColor2, borderRightColor2, borderBottomColor2, borderLeftColor2, borderRadius2, outline2, outlineColor2);
      var _default = exports.default = borders2;
    }
  });

  // node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/system/cssGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap2 = (props) => {
        if (props.gap !== void 0 && props.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
        }
        return null;
      };
      exports.gap = gap2;
      gap2.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap2.filterProps = ["gap"];
      var columnGap2 = (props) => {
        if (props.columnGap !== void 0 && props.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports.columnGap = columnGap2;
      columnGap2.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap2.filterProps = ["columnGap"];
      var rowGap2 = (props) => {
        if (props.rowGap !== void 0 && props.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports.rowGap = rowGap2;
      rowGap2.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap2.filterProps = ["rowGap"];
      var gridColumn2 = exports.gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      var gridRow2 = exports.gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      var gridAutoFlow2 = exports.gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      var gridAutoColumns2 = exports.gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      var gridAutoRows2 = exports.gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      var gridTemplateColumns2 = exports.gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      var gridTemplateRows2 = exports.gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      var gridTemplateAreas2 = exports.gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      var gridArea2 = exports.gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      var grid2 = (0, _compose.default)(gap2, columnGap2, rowGap2, gridColumn2, gridRow2, gridAutoFlow2, gridAutoColumns2, gridAutoRows2, gridTemplateColumns2, gridTemplateRows2, gridTemplateAreas2, gridArea2);
      var _default = exports.default = grid2;
    }
  });

  // node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
      exports.paletteTransform = paletteTransform2;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function paletteTransform2(value, userValue) {
        if (userValue === "grey") {
          return userValue;
        }
        return value;
      }
      var color2 = exports.color = (0, _style.default)({
        prop: "color",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var bgcolor2 = exports.bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var backgroundColor2 = exports.backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var palette2 = (0, _compose.default)(color2, bgcolor2, backgroundColor2);
      var _default = exports.default = palette2;
    }
  });

  // node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
      exports.sizingTransform = sizingTransform2;
      exports.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function sizingTransform2(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width2 = exports.width = (0, _style.default)({
        prop: "width",
        transform: sizingTransform2
      });
      var maxWidth2 = (props) => {
        if (props.maxWidth !== void 0 && props.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme2;
            const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || _breakpoints.values[propValue];
            if (!breakpoint) {
              return {
                maxWidth: sizingTransform2(propValue)
              };
            }
            if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
              return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
              };
            }
            return {
              maxWidth: breakpoint
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports.maxWidth = maxWidth2;
      maxWidth2.filterProps = ["maxWidth"];
      var minWidth2 = exports.minWidth = (0, _style.default)({
        prop: "minWidth",
        transform: sizingTransform2
      });
      var height2 = exports.height = (0, _style.default)({
        prop: "height",
        transform: sizingTransform2
      });
      var maxHeight2 = exports.maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform: sizingTransform2
      });
      var minHeight2 = exports.minHeight = (0, _style.default)({
        prop: "minHeight",
        transform: sizingTransform2
      });
      var sizeWidth2 = exports.sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform: sizingTransform2
      });
      var sizeHeight2 = exports.sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform: sizingTransform2
      });
      var boxSizing2 = exports.boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      var sizing2 = (0, _compose.default)(width2, maxWidth2, minWidth2, height2, maxHeight2, minHeight2, boxSizing2);
      var _default = exports.default = sizing2;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var require_defaultSxConfig = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _spacing = require_spacing();
      var _borders = require_borders();
      var _cssGrid = require_cssGrid();
      var _palette = require_palette();
      var _sizing = require_sizing();
      var defaultSxConfig4 = {
        // borders
        border: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderTop: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderRight: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderBottom: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderLeft: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderColor: {
          themeKey: "palette"
        },
        borderTopColor: {
          themeKey: "palette"
        },
        borderRightColor: {
          themeKey: "palette"
        },
        borderBottomColor: {
          themeKey: "palette"
        },
        borderLeftColor: {
          themeKey: "palette"
        },
        outline: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        outlineColor: {
          themeKey: "palette"
        },
        borderRadius: {
          themeKey: "shape.borderRadius",
          style: _borders.borderRadius
        },
        // palette
        color: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        bgcolor: {
          themeKey: "palette",
          cssProperty: "backgroundColor",
          transform: _palette.paletteTransform
        },
        backgroundColor: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        // spacing
        p: {
          style: _spacing.padding
        },
        pt: {
          style: _spacing.padding
        },
        pr: {
          style: _spacing.padding
        },
        pb: {
          style: _spacing.padding
        },
        pl: {
          style: _spacing.padding
        },
        px: {
          style: _spacing.padding
        },
        py: {
          style: _spacing.padding
        },
        padding: {
          style: _spacing.padding
        },
        paddingTop: {
          style: _spacing.padding
        },
        paddingRight: {
          style: _spacing.padding
        },
        paddingBottom: {
          style: _spacing.padding
        },
        paddingLeft: {
          style: _spacing.padding
        },
        paddingX: {
          style: _spacing.padding
        },
        paddingY: {
          style: _spacing.padding
        },
        paddingInline: {
          style: _spacing.padding
        },
        paddingInlineStart: {
          style: _spacing.padding
        },
        paddingInlineEnd: {
          style: _spacing.padding
        },
        paddingBlock: {
          style: _spacing.padding
        },
        paddingBlockStart: {
          style: _spacing.padding
        },
        paddingBlockEnd: {
          style: _spacing.padding
        },
        m: {
          style: _spacing.margin
        },
        mt: {
          style: _spacing.margin
        },
        mr: {
          style: _spacing.margin
        },
        mb: {
          style: _spacing.margin
        },
        ml: {
          style: _spacing.margin
        },
        mx: {
          style: _spacing.margin
        },
        my: {
          style: _spacing.margin
        },
        margin: {
          style: _spacing.margin
        },
        marginTop: {
          style: _spacing.margin
        },
        marginRight: {
          style: _spacing.margin
        },
        marginBottom: {
          style: _spacing.margin
        },
        marginLeft: {
          style: _spacing.margin
        },
        marginX: {
          style: _spacing.margin
        },
        marginY: {
          style: _spacing.margin
        },
        marginInline: {
          style: _spacing.margin
        },
        marginInlineStart: {
          style: _spacing.margin
        },
        marginInlineEnd: {
          style: _spacing.margin
        },
        marginBlock: {
          style: _spacing.margin
        },
        marginBlockStart: {
          style: _spacing.margin
        },
        marginBlockEnd: {
          style: _spacing.margin
        },
        // display
        displayPrint: {
          cssProperty: false,
          transform: (value) => ({
            "@media print": {
              display: value
            }
          })
        },
        display: {},
        overflow: {},
        textOverflow: {},
        visibility: {},
        whiteSpace: {},
        // flexbox
        flexBasis: {},
        flexDirection: {},
        flexWrap: {},
        justifyContent: {},
        alignItems: {},
        alignContent: {},
        order: {},
        flex: {},
        flexGrow: {},
        flexShrink: {},
        alignSelf: {},
        justifyItems: {},
        justifySelf: {},
        // grid
        gap: {
          style: _cssGrid.gap
        },
        rowGap: {
          style: _cssGrid.rowGap
        },
        columnGap: {
          style: _cssGrid.columnGap
        },
        gridColumn: {},
        gridRow: {},
        gridAutoFlow: {},
        gridAutoColumns: {},
        gridAutoRows: {},
        gridTemplateColumns: {},
        gridTemplateRows: {},
        gridTemplateAreas: {},
        gridArea: {},
        // positions
        position: {},
        zIndex: {
          themeKey: "zIndex"
        },
        top: {},
        right: {},
        bottom: {},
        left: {},
        // shadows
        boxShadow: {
          themeKey: "shadows"
        },
        // sizing
        width: {
          transform: _sizing.sizingTransform
        },
        maxWidth: {
          style: _sizing.maxWidth
        },
        minWidth: {
          transform: _sizing.sizingTransform
        },
        height: {
          transform: _sizing.sizingTransform
        },
        maxHeight: {
          transform: _sizing.sizingTransform
        },
        minHeight: {
          transform: _sizing.sizingTransform
        },
        boxSizing: {},
        // typography
        fontFamily: {
          themeKey: "typography"
        },
        fontSize: {
          themeKey: "typography"
        },
        fontStyle: {
          themeKey: "typography"
        },
        fontWeight: {
          themeKey: "typography"
        },
        letterSpacing: {},
        textTransform: {},
        lineHeight: {},
        textAlign: {},
        typography: {
          cssProperty: false,
          themeKey: "typography"
        }
      };
      var _default = exports.default = defaultSxConfig4;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx2;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _merge = _interopRequireDefault(require_merge());
      var _style = require_style();
      var _breakpoints = require_breakpoints();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function objectsHaveSameKeys2(...objects) {
        const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn2(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx2() {
        function getThemeValue(prop, val, theme, config) {
          const props = {
            [prop]: val,
            theme
          };
          const options = config[prop];
          if (!options) {
            return {
              [prop]: val
            };
          }
          const {
            cssProperty = prop,
            themeKey,
            transform,
            style: style4
          } = options;
          if (val == null) {
            return null;
          }
          if (themeKey === "typography" && val === "inherit") {
            return {
              [prop]: val
            };
          }
          const themeMapping = (0, _style.getPath)(theme, themeKey) || {};
          if (style4) {
            return style4(props);
          }
          const styleFromPropValue = (propValueFinal) => {
            let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
        }
        function styleFunctionSx6(props) {
          var _theme$unstable_sxCon;
          const {
            sx,
            theme = {}
          } = props || {};
          if (!sx) {
            return null;
          }
          const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css3 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn2(sxObject[styleKey], theme);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (config[styleKey]) {
                    css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme, config));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys2(breakpointsValues, value)) {
                      css3[styleKey] = styleFunctionSx6({
                        sx: value,
                        theme
                      });
                    } else {
                      css3 = (0, _merge.default)(css3, breakpointsValues);
                    }
                  }
                } else {
                  css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme, config));
                }
              }
            });
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css3);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx6;
      }
      var styleFunctionSx5 = unstable_createStyleFunctionSx2();
      styleFunctionSx5.filterProps = ["sx"];
      var _default = exports.default = styleFunctionSx5;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
      function _objectWithoutPropertiesLoose3(r3, e2) {
        if (null == r3) return {};
        var t2 = {};
        for (var n2 in r3) if ({}.hasOwnProperty.call(r3, n2)) {
          if (-1 !== e2.indexOf(n2)) continue;
          t2[n2] = r3[n2];
        }
        return t2;
      }
      module.exports = _objectWithoutPropertiesLoose3, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extendSxProp4;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = require_deepmerge2();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _excluded161 = ["sx"];
      var splitProps2 = (props) => {
        var _props$theme$unstable, _props$theme;
        const result = {
          systemProps: {},
          otherProps: {}
        };
        const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
        Object.keys(props).forEach((prop) => {
          if (config[prop]) {
            result.systemProps[prop] = props[prop];
          } else {
            result.otherProps[prop] = props[prop];
          }
        });
        return result;
      };
      function extendSxProp4(props) {
        const {
          sx: inSx
        } = props, other = (0, _objectWithoutPropertiesLoose22.default)(props, _excluded161);
        const {
          systemProps,
          otherProps
        } = splitProps2(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _deepmerge.isPlainObject)(result)) {
              return systemProps;
            }
            return (0, _extends22.default)({}, systemProps, result);
          };
        } else {
          finalSx = (0, _extends22.default)({}, systemProps, inSx);
        }
        return (0, _extends22.default)({}, otherProps, {
          sx: finalSx
        });
      }
    }
  });

  // node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _defaultSxConfig.default;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/system/createTheme/createBreakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.breakpointKeys = void 0;
      exports.default = createBreakpoints2;
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends22 = _interopRequireDefault(require_extends());
      var _excluded161 = ["values", "unit", "step"];
      var breakpointKeys2 = exports.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
      var sortBreakpointsValues2 = (values3) => {
        const breakpointsAsArray = Object.keys(values3).map((key) => ({
          key,
          val: values3[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return (0, _extends22.default)({}, acc, {
            [obj.key]: obj.val
          });
        }, {});
      };
      function createBreakpoints2(breakpoints2) {
        const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values: values3 = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536
            // large screen
          },
          unit = "px",
          step = 5
        } = breakpoints2, other = (0, _objectWithoutPropertiesLoose22.default)(breakpoints2, _excluded161);
        const sortedValues = sortBreakpointsValues2(values3);
        const keys = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values3[key] === "number" ? values3[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values3[key] === "number" ? values3[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start2, end2) {
          const endIndex = keys.indexOf(end2);
          return `@media (min-width:${typeof values3[start2] === "number" ? values3[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end2) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys.indexOf(key) + 1 < keys.length) {
            return between(key, keys[keys.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys.indexOf(key);
          if (keyIndex === 0) {
            return up(keys[1]);
          }
          if (keyIndex === keys.length - 1) {
            return down(keys[keyIndex]);
          }
          return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return (0, _extends22.default)({
          keys,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit
        }, other);
      }
    }
  });

  // node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/system/createTheme/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape2 = {
        borderRadius: 4
      };
      var _default = exports.default = shape2;
    }
  });

  // node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/system/createTheme/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing2;
      var _spacing = require_spacing();
      function createSpacing2(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing2 = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing2.mui = true;
        return spacing2;
      }
    }
  });

  // node_modules/@mui/system/createTheme/applyStyles.js
  var require_applyStyles = __commonJS({
    "node_modules/@mui/system/createTheme/applyStyles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = applyStyles3;
      function applyStyles3(key, styles8) {
        const theme = this;
        if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
          const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
          return {
            [selector]: styles8
          };
        }
        if (theme.palette.mode === key) {
          return styles8;
        }
        return {};
      }
    }
  });

  // node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/system/createTheme/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
      var _excluded161 = ["breakpoints", "palette", "spacing", "shape"];
      function createTheme3(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose22.default)(options, _excluded161);
        const breakpoints2 = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing2 = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _deepmerge.default)({
          breakpoints: breakpoints2,
          direction: "ltr",
          components: {},
          // Inject component definitions.
          palette: (0, _extends22.default)({
            mode: "light"
          }, paletteInput),
          spacing: spacing2,
          shape: (0, _extends22.default)({}, _shape.default, shapeInput)
        }, other);
        muiTheme.applyStyles = _applyStyles.default;
        muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
        muiTheme.unstable_sxConfig = (0, _extends22.default)({}, _defaultSxConfig.default, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var _default = exports.default = createTheme3;
    }
  });

  // node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/system/createTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "private_createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports, "unstable_applyStyles", {
        enumerable: true,
        get: function() {
          return _applyStyles.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
    }
  });

  // node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/system/colorManipulator.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.alpha = alpha21;
      exports.blend = blend;
      exports.colorChannel = void 0;
      exports.darken = darken8;
      exports.decomposeColor = decomposeColor2;
      exports.emphasize = emphasize5;
      exports.getContrastRatio = getContrastRatio3;
      exports.getLuminance = getLuminance2;
      exports.hexToRgb = hexToRgb2;
      exports.hslToRgb = hslToRgb3;
      exports.lighten = lighten8;
      exports.private_safeAlpha = private_safeAlpha;
      exports.private_safeColorChannel = void 0;
      exports.private_safeDarken = private_safeDarken;
      exports.private_safeEmphasize = private_safeEmphasize;
      exports.private_safeLighten = private_safeLighten;
      exports.recomposeColor = recomposeColor2;
      exports.rgbToHex = rgbToHex2;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _clamp = _interopRequireDefault(require_clamp2());
      function clampWrapper2(value, min2 = 0, max2 = 1) {
        if (true) {
          if (value < min2 || value > max2) {
            console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
          }
        }
        return (0, _clamp.default)(value, min2, max2);
      }
      function hexToRgb2(color2) {
        color2 = color2.slice(1);
        const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
        let colors = color2.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n2) => n2 + n2);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n2, index) => {
          return index < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex2(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor2(color2) {
        if (color2.type) {
          return color2;
        }
        if (color2.charAt(0) === "#") {
          return decomposeColor2(hexToRgb2(color2));
        }
        const marker = color2.indexOf("(");
        const type = color2.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color2));
        }
        let values3 = color2.substring(marker + 1, color2.length - 1);
        let colorSpace;
        if (type === "color") {
          values3 = values3.split(" ");
          colorSpace = values3.shift();
          if (values3.length === 4 && values3[3].charAt(0) === "/") {
            values3[3] = values3[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
          }
        } else {
          values3 = values3.split(",");
        }
        values3 = values3.map((value) => parseFloat(value));
        return {
          type,
          values: values3,
          colorSpace
        };
      }
      var colorChannel = (color2) => {
        const decomposedColor = decomposeColor2(color2);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports.colorChannel = colorChannel;
      var private_safeColorChannel = (color2, warning2) => {
        try {
          return colorChannel(color2);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      };
      exports.private_safeColorChannel = private_safeColorChannel;
      function recomposeColor2(color2) {
        const {
          type,
          colorSpace
        } = color2;
        let {
          values: values3
        } = color2;
        if (type.indexOf("rgb") !== -1) {
          values3 = values3.map((n2, i2) => i2 < 3 ? parseInt(n2, 10) : n2);
        } else if (type.indexOf("hsl") !== -1) {
          values3[1] = `${values3[1]}%`;
          values3[2] = `${values3[2]}%`;
        }
        if (type.indexOf("color") !== -1) {
          values3 = `${colorSpace} ${values3.join(" ")}`;
        } else {
          values3 = `${values3.join(", ")}`;
        }
        return `${type}(${values3})`;
      }
      function rgbToHex2(color2) {
        if (color2.indexOf("#") === 0) {
          return color2;
        }
        const {
          values: values3
        } = decomposeColor2(color2);
        return `#${values3.map((n2, i2) => intToHex2(i2 === 3 ? Math.round(255 * n2) : n2)).join("")}`;
      }
      function hslToRgb3(color2) {
        color2 = decomposeColor2(color2);
        const {
          values: values3
        } = color2;
        const h2 = values3[0];
        const s2 = values3[1] / 100;
        const l2 = values3[2] / 100;
        const a2 = s2 * Math.min(l2, 1 - l2);
        const f = (n2, k = (n2 + h2 / 30) % 12) => l2 - a2 * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color2.type === "hsla") {
          type += "a";
          rgb.push(values3[3]);
        }
        return recomposeColor2({
          type,
          values: rgb
        });
      }
      function getLuminance2(color2) {
        color2 = decomposeColor2(color2);
        let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor2(hslToRgb3(color2)).values : color2.values;
        rgb = rgb.map((val) => {
          if (color2.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio3(foreground, background) {
        const lumA = getLuminance2(foreground);
        const lumB = getLuminance2(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha21(color2, value) {
        color2 = decomposeColor2(color2);
        value = clampWrapper2(value);
        if (color2.type === "rgb" || color2.type === "hsl") {
          color2.type += "a";
        }
        if (color2.type === "color") {
          color2.values[3] = `/${value}`;
        } else {
          color2.values[3] = value;
        }
        return recomposeColor2(color2);
      }
      function private_safeAlpha(color2, value, warning2) {
        try {
          return alpha21(color2, value);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function darken8(color2, coefficient) {
        color2 = decomposeColor2(color2);
        coefficient = clampWrapper2(coefficient);
        if (color2.type.indexOf("hsl") !== -1) {
          color2.values[2] *= 1 - coefficient;
        } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
          for (let i2 = 0; i2 < 3; i2 += 1) {
            color2.values[i2] *= 1 - coefficient;
          }
        }
        return recomposeColor2(color2);
      }
      function private_safeDarken(color2, coefficient, warning2) {
        try {
          return darken8(color2, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function lighten8(color2, coefficient) {
        color2 = decomposeColor2(color2);
        coefficient = clampWrapper2(coefficient);
        if (color2.type.indexOf("hsl") !== -1) {
          color2.values[2] += (100 - color2.values[2]) * coefficient;
        } else if (color2.type.indexOf("rgb") !== -1) {
          for (let i2 = 0; i2 < 3; i2 += 1) {
            color2.values[i2] += (255 - color2.values[i2]) * coefficient;
          }
        } else if (color2.type.indexOf("color") !== -1) {
          for (let i2 = 0; i2 < 3; i2 += 1) {
            color2.values[i2] += (1 - color2.values[i2]) * coefficient;
          }
        }
        return recomposeColor2(color2);
      }
      function private_safeLighten(color2, coefficient, warning2) {
        try {
          return lighten8(color2, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function emphasize5(color2, coefficient = 0.15) {
        return getLuminance2(color2) > 0.5 ? darken8(color2, coefficient) : lighten8(color2, coefficient);
      }
      function private_safeEmphasize(color2, coefficient, warning2) {
        try {
          return emphasize5(color2, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function blend(background, overlay, opacity, gamma = 1) {
        const blendChannel = (b2, o2) => Math.round((b2 ** (1 / gamma) * (1 - opacity) + o2 ** (1 / gamma) * opacity) ** gamma);
        const backgroundColor2 = decomposeColor2(background);
        const overlayColor = decomposeColor2(overlay);
        const rgb = [blendChannel(backgroundColor2.values[0], overlayColor.values[0]), blendChannel(backgroundColor2.values[1], overlayColor.values[1]), blendChannel(backgroundColor2.values[2], overlayColor.values[2])];
        return recomposeColor2({
          type: "rgb",
          values: rgb
        });
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/getThemeProps.js
  var require_getThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/getThemeProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getThemeProps3;
      var _resolveProps = _interopRequireDefault(require_resolveProps2());
      function getThemeProps3(params) {
        const {
          theme,
          name,
          props
        } = params;
        if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
          return props;
        }
        return (0, _resolveProps.default)(theme.components[name].defaultProps, props);
      }
    }
  });

  // node_modules/@mui/system/useThemeWithoutDefault.js
  var require_useThemeWithoutDefault = __commonJS({
    "node_modules/@mui/system/useThemeWithoutDefault.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React221 = _interopRequireWildcard(require_react());
      var _styledEngine = require_node();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function isObjectEmpty2(obj) {
        return Object.keys(obj).length === 0;
      }
      function useTheme8(defaultTheme7 = null) {
        const contextTheme = React221.useContext(_styledEngine.ThemeContext);
        return !contextTheme || isObjectEmpty2(contextTheme) ? defaultTheme7 : contextTheme;
      }
      var _default = exports.default = useTheme8;
    }
  });

  // node_modules/@mui/system/useTheme.js
  var require_useTheme = __commonJS({
    "node_modules/@mui/system/useTheme.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.systemDefaultTheme = exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var systemDefaultTheme3 = exports.systemDefaultTheme = (0, _createTheme.default)();
      function useTheme8(defaultTheme7 = systemDefaultTheme3) {
        return (0, _useThemeWithoutDefault.default)(defaultTheme7);
      }
      var _default = exports.default = useTheme8;
    }
  });

  // node_modules/@mui/system/useThemeProps/useThemeProps.js
  var require_useThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/useThemeProps.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps15;
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
      var _useTheme = _interopRequireDefault(require_useTheme());
      function useThemeProps15({
        props,
        name,
        defaultTheme: defaultTheme7,
        themeId
      }) {
        let theme = (0, _useTheme.default)(defaultTheme7);
        if (themeId) {
          theme = theme[themeId] || theme;
        }
        const mergedProps = (0, _getThemeProps.default)({
          theme,
          name,
          props
        });
        return mergedProps;
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/index.js
  var require_useThemeProps2 = __commonJS({
    "node_modules/@mui/system/useThemeProps/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _getThemeProps.default;
        }
      });
      var _useThemeProps = _interopRequireDefault(require_useThemeProps());
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
    }
  });

  // node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/system/createStyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyled5;
      exports.shouldForwardProp = shouldForwardProp2;
      exports.systemDefaultTheme = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _styledEngine = _interopRequireWildcard(require_node());
      var _deepmerge = require_deepmerge2();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      var _excluded161 = ["ownerState"];
      var _excluded223 = ["variants"];
      var _excluded313 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function isEmpty4(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96;
      }
      function shouldForwardProp2(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var systemDefaultTheme3 = exports.systemDefaultTheme = (0, _createTheme.default)();
      var lowercaseFirstLetter2 = (string) => {
        if (!string) {
          return string;
        }
        return string.charAt(0).toLowerCase() + string.slice(1);
      };
      function resolveTheme2({
        defaultTheme: defaultTheme7,
        theme,
        themeId
      }) {
        return isEmpty4(theme) ? defaultTheme7 : theme[themeId] || theme;
      }
      function defaultOverridesResolver2(slot) {
        if (!slot) {
          return null;
        }
        return (props, styles8) => styles8[slot];
      }
      function processStyleArg2(callableStyle, _ref) {
        let {
          ownerState
        } = _ref, props = (0, _objectWithoutPropertiesLoose22.default)(_ref, _excluded161);
        const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle((0, _extends22.default)({
          ownerState
        }, props)) : callableStyle;
        if (Array.isArray(resolvedStylesArg)) {
          return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg2(resolvedStyle, (0, _extends22.default)({
            ownerState
          }, props)));
        }
        if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
          const {
            variants = []
          } = resolvedStylesArg, otherStyles = (0, _objectWithoutPropertiesLoose22.default)(resolvedStylesArg, _excluded223);
          let result = otherStyles;
          variants.forEach((variant) => {
            let isMatch = true;
            if (typeof variant.props === "function") {
              isMatch = variant.props((0, _extends22.default)({
                ownerState
              }, props, ownerState));
            } else {
              Object.keys(variant.props).forEach((key) => {
                if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
                  isMatch = false;
                }
              });
            }
            if (isMatch) {
              if (!Array.isArray(result)) {
                result = [result];
              }
              result.push(typeof variant.style === "function" ? variant.style((0, _extends22.default)({
                ownerState
              }, props, ownerState)) : variant.style);
            }
          });
          return result;
        }
        return resolvedStylesArg;
      }
      function createStyled5(input = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme7 = systemDefaultTheme3,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp2,
          slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp2
        } = input;
        const systemSx = (props) => {
          return (0, _styleFunctionSx.default)((0, _extends22.default)({}, props, {
            theme: resolveTheme2((0, _extends22.default)({}, props, {
              defaultTheme: defaultTheme7,
              themeId
            }))
          }));
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles8) => styles8.filter((style4) => !(style4 != null && style4.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            // TODO v6: remove `lowercaseFirstLetter()` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            overridesResolver: overridesResolver8 = defaultOverridesResolver2(lowercaseFirstLetter2(componentSlot))
          } = inputOptions, options = (0, _objectWithoutPropertiesLoose22.default)(inputOptions, _excluded313);
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
            // TODO v6: remove `Root` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
          );
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter2(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp2;
          if (componentSlot === "Root" || componentSlot === "root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp2;
          } else if (isStringTag2(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends22.default)({
            shouldForwardProp: shouldForwardPropOption,
            label
          }, options));
          const transformStyleArg = (stylesArg) => {
            if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, _deepmerge.isPlainObject)(stylesArg)) {
              return (props) => processStyleArg2(stylesArg, (0, _extends22.default)({}, props, {
                theme: resolveTheme2({
                  theme: props.theme,
                  defaultTheme: defaultTheme7,
                  themeId
                })
              }));
            }
            return stylesArg;
          };
          const muiStyledResolver = (styleArg, ...expressions) => {
            let transformedStyleArg = transformStyleArg(styleArg);
            const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
            if (componentName && overridesResolver8) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme2((0, _extends22.default)({}, props, {
                  defaultTheme: defaultTheme7,
                  themeId
                }));
                if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
                  return null;
                }
                const styleOverrides = theme.components[componentName].styleOverrides;
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = processStyleArg2(slotStyle, (0, _extends22.default)({}, props, {
                    theme
                  }));
                });
                return overridesResolver8(props, resolvedStyleOverrides);
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props) => {
                var _theme$components;
                const theme = resolveTheme2((0, _extends22.default)({}, props, {
                  defaultTheme: defaultTheme7,
                  themeId
                }));
                const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
                return processStyleArg2({
                  variants: themeVariants
                }, (0, _extends22.default)({}, props, {
                  theme
                }));
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg, ...placeholders];
              transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
            }
            const Component2 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${(0, _capitalize.default)(componentSlot || "")}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _getDisplayName.default)(tag)})`;
              }
              Component2.displayName = displayName;
            }
            if (tag.muiName) {
              Component2.muiName = tag.muiName;
            }
            return Component2;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/@mui/base/node/ClassNameGenerator/index.js
  var require_ClassNameGenerator3 = __commonJS({
    "node_modules/@mui/base/node/ClassNameGenerator/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _utils.unstable_ClassNameGenerator;
        }
      });
      var _utils = require_node2();
    }
  });

  // node_modules/@mui/material/node/utils/capitalize.js
  var require_capitalize3 = __commonJS({
    "node_modules/@mui/material/node/utils/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _default = exports.default = _capitalize.default;
    }
  });

  // node_modules/@mui/material/node/utils/createChainedFunction.js
  var require_createChainedFunction3 = __commonJS({
    "node_modules/@mui/material/node/utils/createChainedFunction.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
      var _default = exports.default = _createChainedFunction.default;
    }
  });

  // node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "node_modules/clsx/dist/clsx.js"(exports, module) {
      function r3(e3) {
        var o2, t2, f = "";
        if ("string" == typeof e3 || "number" == typeof e3) f += e3;
        else if ("object" == typeof e3) if (Array.isArray(e3)) {
          var n2 = e3.length;
          for (o2 = 0; o2 < n2; o2++) e3[o2] && (t2 = r3(e3[o2])) && (f && (f += " "), f += t2);
        } else for (t2 in e3) e3[t2] && (f && (f += " "), f += t2);
        return f;
      }
      function e2() {
        for (var e3, o2, t2 = 0, f = "", n2 = arguments.length; t2 < n2; t2++) (e3 = arguments[t2]) && (o2 = r3(e3)) && (f && (f += " "), f += o2);
        return f;
      }
      module.exports = e2, module.exports.clsx = e2;
    }
  });

  // node_modules/@mui/material/node/styles/createMixins.js
  var require_createMixins = __commonJS({
    "node_modules/@mui/material/node/styles/createMixins.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createMixins2;
      var _extends22 = _interopRequireDefault(require_extends());
      function createMixins2(breakpoints2, mixins) {
        return (0, _extends22.default)({
          toolbar: {
            minHeight: 56,
            [breakpoints2.up("xs")]: {
              "@media (orientation: landscape)": {
                minHeight: 48
              }
            },
            [breakpoints2.up("sm")]: {
              minHeight: 64
            }
          }
        }, mixins);
      }
    }
  });

  // node_modules/@mui/material/node/colors/common.js
  var require_common = __commonJS({
    "node_modules/@mui/material/node/colors/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var common2 = {
        black: "#000",
        white: "#fff"
      };
      var _default = exports.default = common2;
    }
  });

  // node_modules/@mui/material/node/colors/grey.js
  var require_grey = __commonJS({
    "node_modules/@mui/material/node/colors/grey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var grey2 = {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#eeeeee",
        300: "#e0e0e0",
        400: "#bdbdbd",
        500: "#9e9e9e",
        600: "#757575",
        700: "#616161",
        800: "#424242",
        900: "#212121",
        A100: "#f5f5f5",
        A200: "#eeeeee",
        A400: "#bdbdbd",
        A700: "#616161"
      };
      var _default = exports.default = grey2;
    }
  });

  // node_modules/@mui/material/node/colors/purple.js
  var require_purple = __commonJS({
    "node_modules/@mui/material/node/colors/purple.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var purple2 = {
        50: "#f3e5f5",
        100: "#e1bee7",
        200: "#ce93d8",
        300: "#ba68c8",
        400: "#ab47bc",
        500: "#9c27b0",
        600: "#8e24aa",
        700: "#7b1fa2",
        800: "#6a1b9a",
        900: "#4a148c",
        A100: "#ea80fc",
        A200: "#e040fb",
        A400: "#d500f9",
        A700: "#aa00ff"
      };
      var _default = exports.default = purple2;
    }
  });

  // node_modules/@mui/material/node/colors/red.js
  var require_red = __commonJS({
    "node_modules/@mui/material/node/colors/red.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var red2 = {
        50: "#ffebee",
        100: "#ffcdd2",
        200: "#ef9a9a",
        300: "#e57373",
        400: "#ef5350",
        500: "#f44336",
        600: "#e53935",
        700: "#d32f2f",
        800: "#c62828",
        900: "#b71c1c",
        A100: "#ff8a80",
        A200: "#ff5252",
        A400: "#ff1744",
        A700: "#d50000"
      };
      var _default = exports.default = red2;
    }
  });

  // node_modules/@mui/material/node/colors/orange.js
  var require_orange = __commonJS({
    "node_modules/@mui/material/node/colors/orange.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var orange2 = {
        50: "#fff3e0",
        100: "#ffe0b2",
        200: "#ffcc80",
        300: "#ffb74d",
        400: "#ffa726",
        500: "#ff9800",
        600: "#fb8c00",
        700: "#f57c00",
        800: "#ef6c00",
        900: "#e65100",
        A100: "#ffd180",
        A200: "#ffab40",
        A400: "#ff9100",
        A700: "#ff6d00"
      };
      var _default = exports.default = orange2;
    }
  });

  // node_modules/@mui/material/node/colors/blue.js
  var require_blue = __commonJS({
    "node_modules/@mui/material/node/colors/blue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var blue2 = {
        50: "#e3f2fd",
        100: "#bbdefb",
        200: "#90caf9",
        300: "#64b5f6",
        400: "#42a5f5",
        500: "#2196f3",
        600: "#1e88e5",
        700: "#1976d2",
        800: "#1565c0",
        900: "#0d47a1",
        A100: "#82b1ff",
        A200: "#448aff",
        A400: "#2979ff",
        A700: "#2962ff"
      };
      var _default = exports.default = blue2;
    }
  });

  // node_modules/@mui/material/node/colors/lightBlue.js
  var require_lightBlue = __commonJS({
    "node_modules/@mui/material/node/colors/lightBlue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var lightBlue2 = {
        50: "#e1f5fe",
        100: "#b3e5fc",
        200: "#81d4fa",
        300: "#4fc3f7",
        400: "#29b6f6",
        500: "#03a9f4",
        600: "#039be5",
        700: "#0288d1",
        800: "#0277bd",
        900: "#01579b",
        A100: "#80d8ff",
        A200: "#40c4ff",
        A400: "#00b0ff",
        A700: "#0091ea"
      };
      var _default = exports.default = lightBlue2;
    }
  });

  // node_modules/@mui/material/node/colors/green.js
  var require_green = __commonJS({
    "node_modules/@mui/material/node/colors/green.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var green2 = {
        50: "#e8f5e9",
        100: "#c8e6c9",
        200: "#a5d6a7",
        300: "#81c784",
        400: "#66bb6a",
        500: "#4caf50",
        600: "#43a047",
        700: "#388e3c",
        800: "#2e7d32",
        900: "#1b5e20",
        A100: "#b9f6ca",
        A200: "#69f0ae",
        A400: "#00e676",
        A700: "#00c853"
      };
      var _default = exports.default = green2;
    }
  });

  // node_modules/@mui/material/node/styles/createPalette.js
  var require_createPalette = __commonJS({
    "node_modules/@mui/material/node/styles/createPalette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dark = void 0;
      exports.default = createPalette2;
      exports.light = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _colorManipulator = require_colorManipulator();
      var _common = _interopRequireDefault(require_common());
      var _grey = _interopRequireDefault(require_grey());
      var _purple = _interopRequireDefault(require_purple());
      var _red = _interopRequireDefault(require_red());
      var _orange = _interopRequireDefault(require_orange());
      var _blue = _interopRequireDefault(require_blue());
      var _lightBlue = _interopRequireDefault(require_lightBlue());
      var _green = _interopRequireDefault(require_green());
      var _excluded161 = ["mode", "contrastThreshold", "tonalOffset"];
      var light2 = exports.light = {
        // The colors used to style the text.
        text: {
          // The most important text.
          primary: "rgba(0, 0, 0, 0.87)",
          // Secondary text.
          secondary: "rgba(0, 0, 0, 0.6)",
          // Disabled text have even lower visual prominence.
          disabled: "rgba(0, 0, 0, 0.38)"
        },
        // The color used to divide different elements.
        divider: "rgba(0, 0, 0, 0.12)",
        // The background colors used to style the surfaces.
        // Consistency between these values is important.
        background: {
          paper: _common.default.white,
          default: _common.default.white
        },
        // The colors used to style the action elements.
        action: {
          // The color of an active action like an icon button.
          active: "rgba(0, 0, 0, 0.54)",
          // The color of an hovered action.
          hover: "rgba(0, 0, 0, 0.04)",
          hoverOpacity: 0.04,
          // The color of a selected action.
          selected: "rgba(0, 0, 0, 0.08)",
          selectedOpacity: 0.08,
          // The color of a disabled action.
          disabled: "rgba(0, 0, 0, 0.26)",
          // The background color of a disabled action.
          disabledBackground: "rgba(0, 0, 0, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(0, 0, 0, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.12
        }
      };
      var dark2 = exports.dark = {
        text: {
          primary: _common.default.white,
          secondary: "rgba(255, 255, 255, 0.7)",
          disabled: "rgba(255, 255, 255, 0.5)",
          icon: "rgba(255, 255, 255, 0.5)"
        },
        divider: "rgba(255, 255, 255, 0.12)",
        background: {
          paper: "#121212",
          default: "#121212"
        },
        action: {
          active: _common.default.white,
          hover: "rgba(255, 255, 255, 0.08)",
          hoverOpacity: 0.08,
          selected: "rgba(255, 255, 255, 0.16)",
          selectedOpacity: 0.16,
          disabled: "rgba(255, 255, 255, 0.3)",
          disabledBackground: "rgba(255, 255, 255, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(255, 255, 255, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.24
        }
      };
      function addLightOrDark2(intent, direction2, shade, tonalOffset) {
        const tonalOffsetLight = tonalOffset.light || tonalOffset;
        const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
        if (!intent[direction2]) {
          if (intent.hasOwnProperty(shade)) {
            intent[direction2] = intent[shade];
          } else if (direction2 === "light") {
            intent.light = (0, _colorManipulator.lighten)(intent.main, tonalOffsetLight);
          } else if (direction2 === "dark") {
            intent.dark = (0, _colorManipulator.darken)(intent.main, tonalOffsetDark);
          }
        }
      }
      function getDefaultPrimary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _blue.default[200],
            light: _blue.default[50],
            dark: _blue.default[400]
          };
        }
        return {
          main: _blue.default[700],
          light: _blue.default[400],
          dark: _blue.default[800]
        };
      }
      function getDefaultSecondary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _purple.default[200],
            light: _purple.default[50],
            dark: _purple.default[400]
          };
        }
        return {
          main: _purple.default[500],
          light: _purple.default[300],
          dark: _purple.default[700]
        };
      }
      function getDefaultError2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _red.default[500],
            light: _red.default[300],
            dark: _red.default[700]
          };
        }
        return {
          main: _red.default[700],
          light: _red.default[400],
          dark: _red.default[800]
        };
      }
      function getDefaultInfo2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _lightBlue.default[400],
            light: _lightBlue.default[300],
            dark: _lightBlue.default[700]
          };
        }
        return {
          main: _lightBlue.default[700],
          light: _lightBlue.default[500],
          dark: _lightBlue.default[900]
        };
      }
      function getDefaultSuccess2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _green.default[400],
            light: _green.default[300],
            dark: _green.default[700]
          };
        }
        return {
          main: _green.default[800],
          light: _green.default[500],
          dark: _green.default[900]
        };
      }
      function getDefaultWarning2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _orange.default[400],
            light: _orange.default[300],
            dark: _orange.default[700]
          };
        }
        return {
          main: "#ed6c02",
          // closest to orange[800] that pass 3:1.
          light: _orange.default[500],
          dark: _orange.default[900]
        };
      }
      function createPalette2(palette2) {
        const {
          mode = "light",
          contrastThreshold = 3,
          tonalOffset = 0.2
        } = palette2, other = (0, _objectWithoutPropertiesLoose22.default)(palette2, _excluded161);
        const primary = palette2.primary || getDefaultPrimary2(mode);
        const secondary = palette2.secondary || getDefaultSecondary2(mode);
        const error = palette2.error || getDefaultError2(mode);
        const info = palette2.info || getDefaultInfo2(mode);
        const success = palette2.success || getDefaultSuccess2(mode);
        const warning2 = palette2.warning || getDefaultWarning2(mode);
        function getContrastText(background) {
          const contrastText = (0, _colorManipulator.getContrastRatio)(background, dark2.text.primary) >= contrastThreshold ? dark2.text.primary : light2.text.primary;
          if (true) {
            const contrast = (0, _colorManipulator.getContrastRatio)(background, contrastText);
            if (contrast < 3) {
              console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
            }
          }
          return contrastText;
        }
        const augmentColor = ({
          color: color2,
          name,
          mainShade = 500,
          lightShade = 300,
          darkShade = 700
        }) => {
          color2 = (0, _extends22.default)({}, color2);
          if (!color2.main && color2[mainShade]) {
            color2.main = color2[mainShade];
          }
          if (!color2.hasOwnProperty("main")) {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, _formatMuiErrorMessage2.default)(11, name ? ` (${name})` : "", mainShade));
          }
          if (typeof color2.main !== "string") {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, _formatMuiErrorMessage2.default)(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
          }
          addLightOrDark2(color2, "light", lightShade, tonalOffset);
          addLightOrDark2(color2, "dark", darkShade, tonalOffset);
          if (!color2.contrastText) {
            color2.contrastText = getContrastText(color2.main);
          }
          return color2;
        };
        const modes = {
          dark: dark2,
          light: light2
        };
        if (true) {
          if (!modes[mode]) {
            console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
          }
        }
        const paletteOutput = (0, _deepmerge.default)((0, _extends22.default)({
          // A collection of common colors.
          common: (0, _extends22.default)({}, _common.default),
          // prevent mutable object.
          // The palette mode, can be light or dark.
          mode,
          // The colors used to represent primary interface elements for a user.
          primary: augmentColor({
            color: primary,
            name: "primary"
          }),
          // The colors used to represent secondary interface elements for a user.
          secondary: augmentColor({
            color: secondary,
            name: "secondary",
            mainShade: "A400",
            lightShade: "A200",
            darkShade: "A700"
          }),
          // The colors used to represent interface elements that the user should be made aware of.
          error: augmentColor({
            color: error,
            name: "error"
          }),
          // The colors used to represent potentially dangerous actions or important messages.
          warning: augmentColor({
            color: warning2,
            name: "warning"
          }),
          // The colors used to present information to the user that is neutral and not necessarily important.
          info: augmentColor({
            color: info,
            name: "info"
          }),
          // The colors used to indicate the successful completion of an action that user triggered.
          success: augmentColor({
            color: success,
            name: "success"
          }),
          // The grey colors.
          grey: _grey.default,
          // Used by `getContrastText()` to maximize the contrast between
          // the background and the text.
          contrastThreshold,
          // Takes a background color and returns the text color that maximizes the contrast.
          getContrastText,
          // Generate a rich color object.
          augmentColor,
          // Used by the functions below to shift a color's luminance by approximately
          // two indexes within its tonal palette.
          // E.g., shift from Red 500 to Red 300 or Red 700.
          tonalOffset
        }, modes[mode]), other);
        return paletteOutput;
      }
    }
  });

  // node_modules/@mui/material/node/styles/createTypography.js
  var require_createTypography = __commonJS({
    "node_modules/@mui/material/node/styles/createTypography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTypography2;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _excluded161 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
      function round4(value) {
        return Math.round(value * 1e5) / 1e5;
      }
      var caseAllCaps2 = {
        textTransform: "uppercase"
      };
      var defaultFontFamily2 = '"Roboto", "Helvetica", "Arial", sans-serif';
      function createTypography2(palette2, typography) {
        const _ref = typeof typography === "function" ? typography(palette2) : typography, {
          fontFamily = defaultFontFamily2,
          // The default font size of the Material Specification.
          fontSize = 14,
          // px
          fontWeightLight = 300,
          fontWeightRegular = 400,
          fontWeightMedium = 500,
          fontWeightBold = 700,
          // Tell MUI what's the font-size on the html element.
          // 16px is the default font-size used by browsers.
          htmlFontSize = 16,
          // Apply the CSS properties to all the variants.
          allVariants,
          pxToRem: pxToRem2
        } = _ref, other = (0, _objectWithoutPropertiesLoose22.default)(_ref, _excluded161);
        if (true) {
          if (typeof fontSize !== "number") {
            console.error("MUI: `fontSize` is required to be a number.");
          }
          if (typeof htmlFontSize !== "number") {
            console.error("MUI: `htmlFontSize` is required to be a number.");
          }
        }
        const coef = fontSize / 14;
        const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
        const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => (0, _extends22.default)({
          fontFamily,
          fontWeight,
          fontSize: pxToRem(size),
          // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
          lineHeight
        }, fontFamily === defaultFontFamily2 ? {
          letterSpacing: `${round4(letterSpacing / size)}em`
        } : {}, casing, allVariants);
        const variants = {
          h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
          h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
          h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
          h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
          h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
          h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
          subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
          subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
          body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
          body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
          button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps2),
          caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
          overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps2),
          // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
          inherit: {
            fontFamily: "inherit",
            fontWeight: "inherit",
            fontSize: "inherit",
            lineHeight: "inherit",
            letterSpacing: "inherit"
          }
        };
        return (0, _deepmerge.default)((0, _extends22.default)({
          htmlFontSize,
          pxToRem,
          fontFamily,
          fontSize,
          fontWeightLight,
          fontWeightRegular,
          fontWeightMedium,
          fontWeightBold
        }, variants), other, {
          clone: false
          // No need to clone deep
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/shadows.js
  var require_shadows = __commonJS({
    "node_modules/@mui/material/node/styles/shadows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shadowKeyUmbraOpacity2 = 0.2;
      var shadowKeyPenumbraOpacity2 = 0.14;
      var shadowAmbientShadowOpacity2 = 0.12;
      function createShadow2(...px) {
        return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity2})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity2})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity2})`].join(",");
      }
      var shadows2 = ["none", createShadow2(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow2(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow2(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow2(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow2(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow2(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow2(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow2(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow2(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow2(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow2(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow2(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow2(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow2(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow2(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow2(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow2(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow2(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow2(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow2(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow2(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow2(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow2(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow2(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
      var _default = exports.default = shadows2;
    }
  });

  // node_modules/@mui/material/node/styles/createTransitions.js
  var require_createTransitions = __commonJS({
    "node_modules/@mui/material/node/styles/createTransitions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTransitions2;
      exports.easing = exports.duration = void 0;
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends22 = _interopRequireDefault(require_extends());
      var _excluded161 = ["duration", "easing", "delay"];
      var easing2 = exports.easing = {
        // This is the most common easing curve.
        easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
        // Objects enter the screen at full velocity from off-screen and
        // slowly decelerate to a resting point.
        easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
        // Objects leave the screen at full velocity. They do not decelerate when off-screen.
        easeIn: "cubic-bezier(0.4, 0, 1, 1)",
        // The sharp curve is used by objects that may return to the screen at any time.
        sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
      };
      var duration2 = exports.duration = {
        shortest: 150,
        shorter: 200,
        short: 250,
        // most basic recommended timing
        standard: 300,
        // this is to be used in complex animations
        complex: 375,
        // recommended when something is entering screen
        enteringScreen: 225,
        // recommended when something is leaving screen
        leavingScreen: 195
      };
      function formatMs4(milliseconds) {
        return `${Math.round(milliseconds)}ms`;
      }
      function getAutoHeightDuration2(height2) {
        if (!height2) {
          return 0;
        }
        const constant = height2 / 36;
        return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
      }
      function createTransitions2(inputTransitions) {
        const mergedEasing = (0, _extends22.default)({}, easing2, inputTransitions.easing);
        const mergedDuration = (0, _extends22.default)({}, duration2, inputTransitions.duration);
        const create = (props = ["all"], options = {}) => {
          const {
            duration: durationOption = mergedDuration.standard,
            easing: easingOption = mergedEasing.easeInOut,
            delay = 0
          } = options, other = (0, _objectWithoutPropertiesLoose22.default)(options, _excluded161);
          if (true) {
            const isString = (value) => typeof value === "string";
            const isNumber = (value) => !isNaN(parseFloat(value));
            if (!isString(props) && !Array.isArray(props)) {
              console.error('MUI: Argument "props" must be a string or Array.');
            }
            if (!isNumber(durationOption) && !isString(durationOption)) {
              console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            }
            if (!isString(easingOption)) {
              console.error('MUI: Argument "easing" must be a string.');
            }
            if (!isNumber(delay) && !isString(delay)) {
              console.error('MUI: Argument "delay" must be a number or a string.');
            }
            if (typeof options !== "object") {
              console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
            }
            if (Object.keys(other).length !== 0) {
              console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
            }
          }
          return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs4(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs4(delay)}`).join(",");
        };
        return (0, _extends22.default)({
          getAutoHeightDuration: getAutoHeightDuration2,
          create
        }, inputTransitions, {
          easing: mergedEasing,
          duration: mergedDuration
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/zIndex.js
  var require_zIndex = __commonJS({
    "node_modules/@mui/material/node/styles/zIndex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var zIndex2 = {
        mobileStepper: 1e3,
        fab: 1050,
        speedDial: 1050,
        appBar: 1100,
        drawer: 1200,
        modal: 1300,
        snackbar: 1400,
        tooltip: 1500
      };
      var _default = exports.default = zIndex2;
    }
  });

  // node_modules/@mui/material/node/styles/createTheme.js
  var require_createTheme3 = __commonJS({
    "node_modules/@mui/material/node/styles/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMuiTheme = createMuiTheme2;
      exports.default = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
      var _createMixins = _interopRequireDefault(require_createMixins());
      var _createPalette = _interopRequireDefault(require_createPalette());
      var _createTypography = _interopRequireDefault(require_createTypography());
      var _shadows = _interopRequireDefault(require_shadows());
      var _createTransitions = _interopRequireDefault(require_createTransitions());
      var _zIndex = _interopRequireDefault(require_zIndex());
      var _excluded161 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function createTheme3(options = {}, ...args) {
        const {
          mixins: mixinsInput = {},
          palette: paletteInput = {},
          transitions: transitionsInput = {},
          typography: typographyInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose22.default)(options, _excluded161);
        if (options.vars) {
          throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, _formatMuiErrorMessage2.default)(18));
        }
        const palette2 = (0, _createPalette.default)(paletteInput);
        const systemTheme = (0, _createTheme.default)(options);
        let muiTheme = (0, _deepmerge.default)(systemTheme, {
          mixins: (0, _createMixins.default)(systemTheme.breakpoints, mixinsInput),
          palette: palette2,
          // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
          shadows: _shadows.default.slice(),
          typography: (0, _createTypography.default)(palette2, typographyInput),
          transitions: (0, _createTransitions.default)(transitionsInput),
          zIndex: (0, _extends22.default)({}, _zIndex.default)
        });
        muiTheme = (0, _deepmerge.default)(muiTheme, other);
        muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
        if (true) {
          const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
          const traverse = (node2, component) => {
            let key;
            for (key in node2) {
              const child = node2[key];
              if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                if (true) {
                  const stateClass = (0, _generateUtilityClass.default)("", key);
                  console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                    root: {
                      [`&.${stateClass}`]: child
                    }
                  }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
                }
                node2[key] = {};
              }
            }
          };
          Object.keys(muiTheme.components).forEach((component) => {
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.indexOf("Mui") === 0) {
              traverse(styleOverrides, component);
            }
          });
        }
        muiTheme.unstable_sxConfig = (0, _extends22.default)({}, _styleFunctionSx.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var warnedOnce3 = false;
      function createMuiTheme2(...args) {
        if (true) {
          if (!warnedOnce3) {
            warnedOnce3 = true;
            console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
          }
        }
        return createTheme3(...args);
      }
      var _default = exports.default = createTheme3;
    }
  });

  // node_modules/@mui/material/node/styles/defaultTheme.js
  var require_defaultTheme = __commonJS({
    "node_modules/@mui/material/node/styles/defaultTheme.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme3());
      var defaultTheme7 = (0, _createTheme.default)();
      var _default = exports.default = defaultTheme7;
    }
  });

  // node_modules/@mui/material/node/styles/identifier.js
  var require_identifier = __commonJS({
    "node_modules/@mui/material/node/styles/identifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = exports.default = "$$material";
    }
  });

  // node_modules/@mui/material/node/styles/useThemeProps.js
  var require_useThemeProps3 = __commonJS({
    "node_modules/@mui/material/node/styles/useThemeProps.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps15;
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var _identifier = _interopRequireDefault(require_identifier());
      function useThemeProps15({
        props,
        name
      }) {
        return (0, _useThemeProps.default)({
          props,
          name,
          defaultTheme: _defaultTheme.default,
          themeId: _identifier.default
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/slotShouldForwardProp.js
  var require_slotShouldForwardProp = __commonJS({
    "node_modules/@mui/material/node/styles/slotShouldForwardProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function slotShouldForwardProp2(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var _default = exports.default = slotShouldForwardProp2;
    }
  });

  // node_modules/@mui/material/node/styles/rootShouldForwardProp.js
  var require_rootShouldForwardProp = __commonJS({
    "node_modules/@mui/material/node/styles/rootShouldForwardProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _slotShouldForwardProp = _interopRequireDefault(require_slotShouldForwardProp());
      var rootShouldForwardProp2 = (prop) => (0, _slotShouldForwardProp.default)(prop) && prop !== "classes";
      var _default = exports.default = rootShouldForwardProp2;
    }
  });

  // node_modules/@mui/material/node/styles/styled.js
  var require_styled = __commonJS({
    "node_modules/@mui/material/node/styles/styled.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      Object.defineProperty(exports, "rootShouldForwardProp", {
        enumerable: true,
        get: function() {
          return _rootShouldForwardProp.default;
        }
      });
      Object.defineProperty(exports, "slotShouldForwardProp", {
        enumerable: true,
        get: function() {
          return _slotShouldForwardProp.default;
        }
      });
      var _createStyled = _interopRequireDefault(require_createStyled());
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var _identifier = _interopRequireDefault(require_identifier());
      var _rootShouldForwardProp = _interopRequireDefault(require_rootShouldForwardProp());
      var _slotShouldForwardProp = _interopRequireDefault(require_slotShouldForwardProp());
      var styled4 = (0, _createStyled.default)({
        themeId: _identifier.default,
        defaultTheme: _defaultTheme.default,
        rootShouldForwardProp: _rootShouldForwardProp.default
      });
      var _default = exports.default = styled4;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/svgIconClasses.js
  var require_svgIconClasses = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/svgIconClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSvgIconUtilityClass = getSvgIconUtilityClass;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
      function getSvgIconUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSvgIcon", slot);
      }
      var svgIconClasses = (0, _generateUtilityClasses.default)("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
      var _default = exports.default = svgIconClasses;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/SvgIcon.js
  var require_SvgIcon = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/SvgIcon.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React221 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _composeClasses = _interopRequireDefault(require_composeClasses2());
      var _capitalize = _interopRequireDefault(require_capitalize3());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps3());
      var _styled = _interopRequireDefault(require_styled());
      var _svgIconClasses = require_svgIconClasses();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded161 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var useUtilityClasses117 = (ownerState) => {
        const {
          color: color2,
          fontSize,
          classes: classes2
        } = ownerState;
        const slots = {
          root: ["root", color2 !== "inherit" && `color${(0, _capitalize.default)(color2)}`, `fontSize${(0, _capitalize.default)(fontSize)}`]
        };
        return (0, _composeClasses.default)(slots, _svgIconClasses.getSvgIconUtilityClass, classes2);
      };
      var SvgIconRoot = (0, _styled.default)("svg", {
        name: "MuiSvgIcon",
        slot: "Root",
        overridesResolver: (props, styles8) => {
          const {
            ownerState
          } = props;
          return [styles8.root, ownerState.color !== "inherit" && styles8[`color${(0, _capitalize.default)(ownerState.color)}`], styles8[`fontSize${(0, _capitalize.default)(ownerState.fontSize)}`]];
        }
      })(({
        theme,
        ownerState
      }) => {
        var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
        return {
          userSelect: "none",
          width: "1em",
          height: "1em",
          display: "inline-block",
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
          flexShrink: 0,
          transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
            duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
          }),
          fontSize: {
            inherit: "inherit",
            small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
            medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
            large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
          }[ownerState.fontSize],
          // TODO v5 deprecate, v6 remove for sx
          color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
            action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
            disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
            inherit: void 0
          }[ownerState.color]
        };
      });
      var SvgIcon5 = /* @__PURE__ */ React221.forwardRef(function SvgIcon6(inProps, ref) {
        const props = (0, _useThemeProps.default)({
          props: inProps,
          name: "MuiSvgIcon"
        });
        const {
          children,
          className,
          color: color2 = "inherit",
          component = "svg",
          fontSize = "medium",
          htmlColor,
          inheritViewBox = false,
          titleAccess,
          viewBox = "0 0 24 24"
        } = props, other = (0, _objectWithoutPropertiesLoose22.default)(props, _excluded161);
        const hasSvgAsChild = /* @__PURE__ */ React221.isValidElement(children) && children.type === "svg";
        const ownerState = (0, _extends22.default)({}, props, {
          color: color2,
          component,
          fontSize,
          instanceFontSize: inProps.fontSize,
          inheritViewBox,
          viewBox,
          hasSvgAsChild
        });
        const more = {};
        if (!inheritViewBox) {
          more.viewBox = viewBox;
        }
        const classes2 = useUtilityClasses117(ownerState);
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(SvgIconRoot, (0, _extends22.default)({
          as: component,
          className: (0, _clsx.default)(classes2.root, className),
          focusable: "false",
          color: htmlColor,
          "aria-hidden": titleAccess ? void 0 : true,
          role: titleAccess ? "img" : void 0,
          ref
        }, more, other, hasSvgAsChild && children.props, {
          ownerState,
          children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("title", {
            children: titleAccess
          }) : null]
        }));
      });
      true ? SvgIcon5.propTypes = {
        // ┌────────────────────────────── Warning ──────────────────────────────┐
        // │ These PropTypes are generated from the TypeScript type definitions. │
        // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
        // └─────────────────────────────────────────────────────────────────────┘
        /**
         * Node passed into the SVG element.
         */
        children: _propTypes.default.node,
        /**
         * Override or extend the styles applied to the component.
         */
        classes: _propTypes.default.object,
        /**
         * @ignore
         */
        className: _propTypes.default.string,
        /**
         * The color of the component.
         * It supports both default and custom theme colors, which can be added as shown in the
         * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
         * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
         * @default 'inherit'
         */
        color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
         * @default 'medium'
         */
        fontSize: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "large", "medium", "small"]), _propTypes.default.string]),
        /**
         * Applies a color attribute to the SVG element.
         */
        htmlColor: _propTypes.default.string,
        /**
         * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
         * prop will be ignored.
         * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
         * `component`'s viewBox to the root node.
         * @default false
         */
        inheritViewBox: _propTypes.default.bool,
        /**
         * The shape-rendering attribute. The behavior of the different options is described on the
         * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
         * If you are having issues with blurry icons you should investigate this prop.
         */
        shapeRendering: _propTypes.default.string,
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * Provides a human-readable title for the element that contains it.
         * https://www.w3.org/TR/SVG-access/#Equivalent
         */
        titleAccess: _propTypes.default.string,
        /**
         * Allows you to redefine what the coordinates without units mean inside an SVG element.
         * For example, if the SVG element is 500 (width) by 200 (height),
         * and you pass viewBox="0 0 50 20",
         * this means that the coordinates inside the SVG will go from the top left corner (0,0)
         * to bottom right (50,20) and each unit will be worth 10px.
         * @default '0 0 24 24'
         */
        viewBox: _propTypes.default.string
      } : void 0;
      SvgIcon5.muiName = "SvgIcon";
      var _default = exports.default = SvgIcon5;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/index.js
  var require_SvgIcon2 = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        svgIconClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SvgIcon.default;
        }
      });
      Object.defineProperty(exports, "svgIconClasses", {
        enumerable: true,
        get: function() {
          return _svgIconClasses.default;
        }
      });
      var _SvgIcon = _interopRequireDefault(require_SvgIcon());
      var _svgIconClasses = _interopRequireWildcard(require_svgIconClasses());
      Object.keys(_svgIconClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _svgIconClasses[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _svgIconClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
    }
  });

  // node_modules/@mui/material/node/utils/createSvgIcon.js
  var require_createSvgIcon = __commonJS({
    "node_modules/@mui/material/node/utils/createSvgIcon.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSvgIcon3;
      var _extends22 = _interopRequireDefault(require_extends());
      var React221 = _interopRequireWildcard(require_react());
      var _SvgIcon = _interopRequireDefault(require_SvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function createSvgIcon3(path, displayName) {
        function Component2(props, ref) {
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SvgIcon.default, (0, _extends22.default)({
            "data-testid": `${displayName}Icon`,
            ref
          }, props, {
            children: path
          }));
        }
        if (true) {
          Component2.displayName = `${displayName}Icon`;
        }
        Component2.muiName = _SvgIcon.default.muiName;
        return /* @__PURE__ */ React221.memo(/* @__PURE__ */ React221.forwardRef(Component2));
      }
    }
  });

  // node_modules/@mui/material/node/utils/debounce.js
  var require_debounce3 = __commonJS({
    "node_modules/@mui/material/node/utils/debounce.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _debounce = _interopRequireDefault(require_debounce2());
      var _default = exports.default = _debounce.default;
    }
  });

  // node_modules/@mui/material/node/utils/deprecatedPropType.js
  var require_deprecatedPropType3 = __commonJS({
    "node_modules/@mui/material/node/utils/deprecatedPropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
      var _default = exports.default = _deprecatedPropType.default;
    }
  });

  // node_modules/@mui/material/node/utils/isMuiElement.js
  var require_isMuiElement3 = __commonJS({
    "node_modules/@mui/material/node/utils/isMuiElement.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
      var _default = exports.default = _isMuiElement.default;
    }
  });

  // node_modules/@mui/material/node/utils/ownerDocument.js
  var require_ownerDocument3 = __commonJS({
    "node_modules/@mui/material/node/utils/ownerDocument.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      var _default = exports.default = _ownerDocument.default;
    }
  });

  // node_modules/@mui/material/node/utils/ownerWindow.js
  var require_ownerWindow3 = __commonJS({
    "node_modules/@mui/material/node/utils/ownerWindow.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
      var _default = exports.default = _ownerWindow.default;
    }
  });

  // node_modules/@mui/material/node/utils/requirePropFactory.js
  var require_requirePropFactory3 = __commonJS({
    "node_modules/@mui/material/node/utils/requirePropFactory.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
      var _default = exports.default = _requirePropFactory.default;
    }
  });

  // node_modules/@mui/material/node/utils/setRef.js
  var require_setRef3 = __commonJS({
    "node_modules/@mui/material/node/utils/setRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _setRef = _interopRequireDefault(require_setRef2());
      var _default = exports.default = _setRef.default;
    }
  });

  // node_modules/@mui/material/node/utils/useEnhancedEffect.js
  var require_useEnhancedEffect3 = __commonJS({
    "node_modules/@mui/material/node/utils/useEnhancedEffect.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      var _default = exports.default = _useEnhancedEffect.default;
    }
  });

  // node_modules/@mui/material/node/utils/useId.js
  var require_useId3 = __commonJS({
    "node_modules/@mui/material/node/utils/useId.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _useId = _interopRequireDefault(require_useId2());
      var _default = exports.default = _useId.default;
    }
  });

  // node_modules/@mui/material/node/utils/unsupportedProp.js
  var require_unsupportedProp3 = __commonJS({
    "node_modules/@mui/material/node/utils/unsupportedProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
      var _default = exports.default = _unsupportedProp.default;
    }
  });

  // node_modules/@mui/material/node/utils/useControlled.js
  var require_useControlled3 = __commonJS({
    "node_modules/@mui/material/node/utils/useControlled.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _useControlled = _interopRequireDefault(require_useControlled2());
      var _default = exports.default = _useControlled.default;
    }
  });

  // node_modules/@mui/material/node/utils/useEventCallback.js
  var require_useEventCallback3 = __commonJS({
    "node_modules/@mui/material/node/utils/useEventCallback.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
      var _default = exports.default = _useEventCallback.default;
    }
  });

  // node_modules/@mui/material/node/utils/useForkRef.js
  var require_useForkRef3 = __commonJS({
    "node_modules/@mui/material/node/utils/useForkRef.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _useForkRef = _interopRequireDefault(require_useForkRef2());
      var _default = exports.default = _useForkRef.default;
    }
  });

  // node_modules/@mui/material/node/utils/useIsFocusVisible.js
  var require_useIsFocusVisible3 = __commonJS({
    "node_modules/@mui/material/node/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible2());
      var _default = exports.default = _useIsFocusVisible.default;
    }
  });

  // node_modules/@mui/material/node/utils/index.js
  var require_utils = __commonJS({
    "node_modules/@mui/material/node/utils/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "createSvgIcon", {
        enumerable: true,
        get: function() {
          return _createSvgIcon.default;
        }
      });
      Object.defineProperty(exports, "debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      exports.unstable_ClassNameGenerator = void 0;
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      var _ClassNameGenerator = require_ClassNameGenerator3();
      var _capitalize = _interopRequireDefault(require_capitalize3());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction3());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
      var _debounce = _interopRequireDefault(require_debounce3());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType3());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement3());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument3());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow3());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory3());
      var _setRef = _interopRequireDefault(require_setRef3());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect3());
      var _useId = _interopRequireDefault(require_useId3());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp3());
      var _useControlled = _interopRequireDefault(require_useControlled3());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback3());
      var _useForkRef = _interopRequireDefault(require_useForkRef3());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible3());
      var unstable_ClassNameGenerator2 = exports.unstable_ClassNameGenerator = {
        configure: (generator) => {
          if (true) {
            console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
          }
          _ClassNameGenerator.unstable_ClassNameGenerator.configure(generator);
        }
      };
    }
  });

  // node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i2) {
            var index = i2;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare(left2, node2) < 0) {
                if (rightIndex < length2 && compare(right2, left2) < 0) {
                  heap[index] = right2;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left2;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right2, node2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout3;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout3 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout3 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout3 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout3 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout3 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout3;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React221 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React221.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment30 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties2.hasOwnProperty(name) ? properties2[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize7 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize7);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize7);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize7);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment30:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React221.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html2) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty4 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty4) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_5, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles8) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles8) {
                if (!styles8.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles8[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles8) {
            var style5 = node2.style;
            for (var styleName in styles8) {
              if (!styles8.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles8[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles8[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style5.setProperty(styleName, styleValue);
              } else {
                style5[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles8) {
            var expanded = {};
            for (var key in styles8) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a2, b2) {
            if (isInsideEventHandler) {
              return fn2(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d, e2, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d, e2, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b2, c2, d, e2, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d, e2, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive2
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              passive: passive2
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset2) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node2,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument9 = outerNode.ownerDocument;
            var win = ownerDocument9 && ownerDocument9.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next2 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start2 = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end2 = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next2 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next2;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end2 = length2;
                }
                if ((next2 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next2;
            }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end2, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style4 = {};
          if (canUseDOM) {
            style4 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style4) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument9 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument9 !== null) {
                if (!ownerDocument9[listeningMarker]) {
                  ownerDocument9[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument9);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop: while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement5(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument9 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument9.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument9.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument9.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument9.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement5(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style5 = instance.style;
            if (typeof style5.setProperty === "function") {
              style5.setProperty("display", "none", "important");
            } else {
              style5.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node2.type;
                    if (isContextProvider(Component2)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect4 = effects[i2];
                var callback = effect4.callback;
                if (callback !== null) {
                  effect4.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React221.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment30) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment30) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion7 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect4 = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect4.next = effect4;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect4;
                effect4.next = firstEffect;
                componentUpdateQueue.lastEffect = effect4;
              }
            }
            return effect4;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion7, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion7, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment30:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment30:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  var destroy = effect4.destroy;
                  effect4.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect4.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect4.destroy = create();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect4.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect4.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect4.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings: while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect4 = firstEffect;
                      do {
                        var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect4 = effect4.next;
                      } while (effect4 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a2, b2, c2, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a2, b2, c2, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root2 !== null) {
                  scheduleUpdateOnFiber(_root2, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment30, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal3(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer2(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer2(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root2);
                  _originalCallback.call(instance);
                };
              }
              var _root2 = createContainer2(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root2;
              markContainerAsRoot(_root2.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root2, parentComponent, callback);
              });
              return _root2;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i2 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m.createRoot(c2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c2, h2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c2, h2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // node_modules/@mui/icons-material/utils/createSvgIcon.js
  var require_createSvgIcon2 = __commonJS({
    "node_modules/@mui/icons-material/utils/createSvgIcon.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/icons-material/Add.js
  var require_Add = __commonJS({
    "node_modules/@mui/icons-material/Add.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z"
      }), "Add");
    }
  });

  // node_modules/@mui/icons-material/Delete.js
  var require_Delete = __commonJS({
    "node_modules/@mui/icons-material/Delete.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z"
      }), "Delete");
    }
  });

  // node_modules/@mui/icons-material/GitHub.js
  var require_GitHub = __commonJS({
    "node_modules/@mui/icons-material/GitHub.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React221 = _interopRequireWildcard(require_react());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M12 1.27a11 11 0 00-3.48 21.46c.55.09.73-.28.73-.55v-1.84c-3.03.64-3.67-1.46-3.67-1.46-.55-1.29-1.28-1.65-1.28-1.65-.92-.65.1-.65.1-.65 1.1 0 1.73 1.1 1.73 1.1.92 1.65 2.57 1.2 3.21.92a2 2 0 01.64-1.47c-2.47-.27-5.04-1.19-5.04-5.5 0-1.1.46-2.1 1.2-2.84a3.76 3.76 0 010-2.93s.91-.28 3.11 1.1c1.8-.49 3.7-.49 5.5 0 2.1-1.38 3.02-1.1 3.02-1.1a3.76 3.76 0 010 2.93c.83.74 1.2 1.74 1.2 2.94 0 4.21-2.57 5.13-5.04 5.4.45.37.82.92.82 2.02v3.03c0 .27.1.64.73.55A11 11 0 0012 1.27"
      }), "GitHub");
    }
  });

  // node_modules/@mui/icons-material/Info.js
  var require_Info = __commonJS({
    "node_modules/@mui/icons-material/Info.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z"
      }), "Info");
    }
  });

  // node_modules/@mui/icons-material/Keyboard.js
  var require_Keyboard = __commonJS({
    "node_modules/@mui/icons-material/Keyboard.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M20 5H4c-1.1 0-1.99.9-1.99 2L2 17c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m-9 3h2v2h-2zm0 3h2v2h-2zM8 8h2v2H8zm0 3h2v2H8zm-1 2H5v-2h2zm0-3H5V8h2zm9 7H8v-2h8zm0-4h-2v-2h2zm0-3h-2V8h2zm3 3h-2v-2h2zm0-3h-2V8h2z"
      }), "Keyboard");
    }
  });

  // node_modules/@mui/icons-material/Twitter.js
  var require_Twitter = __commonJS({
    "node_modules/@mui/icons-material/Twitter.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React221 = _interopRequireWildcard(require_react());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e2) {
        if ("function" != typeof WeakMap) return null;
        var r3 = /* @__PURE__ */ new WeakMap(), t2 = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e3) {
          return e3 ? t2 : r3;
        })(e2);
      }
      function _interopRequireWildcard(e2, r3) {
        if (!r3 && e2 && e2.__esModule) return e2;
        if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
        var t2 = _getRequireWildcardCache(r3);
        if (t2 && t2.has(e2)) return t2.get(e2);
        var n2 = { __proto__: null }, a2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u2 in e2) if ("default" !== u2 && Object.prototype.hasOwnProperty.call(e2, u2)) {
          var i2 = a2 ? Object.getOwnPropertyDescriptor(e2, u2) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n2, u2, i2) : n2[u2] = e2[u2];
        }
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z"
      }), "Twitter");
    }
  });

  // node_modules/@mui/icons-material/AutoAwesome.js
  var require_AutoAwesome = __commonJS({
    "node_modules/@mui/icons-material/AutoAwesome.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "m19 9 1.25-2.75L23 5l-2.75-1.25L19 1l-1.25 2.75L15 5l2.75 1.25zm-7.5.5L9 4 6.5 9.5 1 12l5.5 2.5L9 20l2.5-5.5L17 12zM19 15l-1.25 2.75L15 19l2.75 1.25L19 23l1.25-2.75L23 19l-2.75-1.25z"
      }), "AutoAwesome");
    }
  });

  // node_modules/@mui/icons-material/Download.js
  var require_Download = __commonJS({
    "node_modules/@mui/icons-material/Download.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M5 20h14v-2H5zM19 9h-4V3H9v6H5l7 7z"
      }), "Download");
    }
  });

  // node_modules/@mui/icons-material/Upload.js
  var require_Upload = __commonJS({
    "node_modules/@mui/icons-material/Upload.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = exports.default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M5 20h14v-2H5zm0-10h4v6h6v-6h4l-7-7z"
      }), "Upload");
    }
  });

  // node_modules/jszip/dist/jszip.min.js
  var require_jszip_min = __commonJS({
    "node_modules/jszip/dist/jszip.min.js"(exports, module) {
      !function(e2) {
        if ("object" == typeof exports && "undefined" != typeof module) module.exports = e2();
        else if ("function" == typeof define && define.amd) define([], e2);
        else {
          ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).JSZip = e2();
        }
      }(function() {
        return function s2(a2, o2, h2) {
          function u2(r3, e3) {
            if (!o2[r3]) {
              if (!a2[r3]) {
                var t2 = "function" == typeof __require && __require;
                if (!e3 && t2) return t2(r3, true);
                if (l2) return l2(r3, true);
                var n2 = new Error("Cannot find module '" + r3 + "'");
                throw n2.code = "MODULE_NOT_FOUND", n2;
              }
              var i2 = o2[r3] = { exports: {} };
              a2[r3][0].call(i2.exports, function(e4) {
                var t3 = a2[r3][1][e4];
                return u2(t3 || e4);
              }, i2, i2.exports, s2, a2, o2, h2);
            }
            return o2[r3].exports;
          }
          for (var l2 = "function" == typeof __require && __require, e2 = 0; e2 < h2.length; e2++) u2(h2[e2]);
          return u2;
        }({ 1: [function(e2, t2, r3) {
          "use strict";
          var d = e2("./utils"), c2 = e2("./support"), p2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          r3.encode = function(e3) {
            for (var t3, r4, n2, i2, s2, a2, o2, h2 = [], u2 = 0, l2 = e3.length, f = l2, c3 = "string" !== d.getTypeOf(e3); u2 < e3.length; ) f = l2 - u2, n2 = c3 ? (t3 = e3[u2++], r4 = u2 < l2 ? e3[u2++] : 0, u2 < l2 ? e3[u2++] : 0) : (t3 = e3.charCodeAt(u2++), r4 = u2 < l2 ? e3.charCodeAt(u2++) : 0, u2 < l2 ? e3.charCodeAt(u2++) : 0), i2 = t3 >> 2, s2 = (3 & t3) << 4 | r4 >> 4, a2 = 1 < f ? (15 & r4) << 2 | n2 >> 6 : 64, o2 = 2 < f ? 63 & n2 : 64, h2.push(p2.charAt(i2) + p2.charAt(s2) + p2.charAt(a2) + p2.charAt(o2));
            return h2.join("");
          }, r3.decode = function(e3) {
            var t3, r4, n2, i2, s2, a2, o2 = 0, h2 = 0, u2 = "data:";
            if (e3.substr(0, u2.length) === u2) throw new Error("Invalid base64 input, it looks like a data url.");
            var l2, f = 3 * (e3 = e3.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
            if (e3.charAt(e3.length - 1) === p2.charAt(64) && f--, e3.charAt(e3.length - 2) === p2.charAt(64) && f--, f % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
            for (l2 = c2.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o2 < e3.length; ) t3 = p2.indexOf(e3.charAt(o2++)) << 2 | (i2 = p2.indexOf(e3.charAt(o2++))) >> 4, r4 = (15 & i2) << 4 | (s2 = p2.indexOf(e3.charAt(o2++))) >> 2, n2 = (3 & s2) << 6 | (a2 = p2.indexOf(e3.charAt(o2++))), l2[h2++] = t3, 64 !== s2 && (l2[h2++] = r4), 64 !== a2 && (l2[h2++] = n2);
            return l2;
          };
        }, { "./support": 30, "./utils": 32 }], 2: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./external"), i2 = e2("./stream/DataWorker"), s2 = e2("./stream/Crc32Probe"), a2 = e2("./stream/DataLengthProbe");
          function o2(e3, t3, r4, n3, i3) {
            this.compressedSize = e3, this.uncompressedSize = t3, this.crc32 = r4, this.compression = n3, this.compressedContent = i3;
          }
          o2.prototype = { getContentWorker: function() {
            var e3 = new i2(n2.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a2("data_length")), t3 = this;
            return e3.on("end", function() {
              if (this.streamInfo.data_length !== t3.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
            }), e3;
          }, getCompressedWorker: function() {
            return new i2(n2.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
          } }, o2.createWorkerFrom = function(e3, t3, r4) {
            return e3.pipe(new s2()).pipe(new a2("uncompressedSize")).pipe(t3.compressWorker(r4)).pipe(new a2("compressedSize")).withStreamInfo("compression", t3);
          }, t2.exports = o2;
        }, { "./external": 6, "./stream/Crc32Probe": 25, "./stream/DataLengthProbe": 26, "./stream/DataWorker": 27 }], 3: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./stream/GenericWorker");
          r3.STORE = { magic: "\0\0", compressWorker: function() {
            return new n2("STORE compression");
          }, uncompressWorker: function() {
            return new n2("STORE decompression");
          } }, r3.DEFLATE = e2("./flate");
        }, { "./flate": 7, "./stream/GenericWorker": 28 }], 4: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./utils");
          var o2 = function() {
            for (var e3, t3 = [], r4 = 0; r4 < 256; r4++) {
              e3 = r4;
              for (var n3 = 0; n3 < 8; n3++) e3 = 1 & e3 ? 3988292384 ^ e3 >>> 1 : e3 >>> 1;
              t3[r4] = e3;
            }
            return t3;
          }();
          t2.exports = function(e3, t3) {
            return void 0 !== e3 && e3.length ? "string" !== n2.getTypeOf(e3) ? function(e4, t4, r4, n3) {
              var i2 = o2, s2 = n3 + r4;
              e4 ^= -1;
              for (var a2 = n3; a2 < s2; a2++) e4 = e4 >>> 8 ^ i2[255 & (e4 ^ t4[a2])];
              return -1 ^ e4;
            }(0 | t3, e3, e3.length, 0) : function(e4, t4, r4, n3) {
              var i2 = o2, s2 = n3 + r4;
              e4 ^= -1;
              for (var a2 = n3; a2 < s2; a2++) e4 = e4 >>> 8 ^ i2[255 & (e4 ^ t4.charCodeAt(a2))];
              return -1 ^ e4;
            }(0 | t3, e3, e3.length, 0) : 0;
          };
        }, { "./utils": 32 }], 5: [function(e2, t2, r3) {
          "use strict";
          r3.base64 = false, r3.binary = false, r3.dir = false, r3.createFolders = true, r3.date = null, r3.compression = null, r3.compressionOptions = null, r3.comment = null, r3.unixPermissions = null, r3.dosPermissions = null;
        }, {}], 6: [function(e2, t2, r3) {
          "use strict";
          var n2 = null;
          n2 = "undefined" != typeof Promise ? Promise : e2("lie"), t2.exports = { Promise: n2 };
        }, { lie: 37 }], 7: [function(e2, t2, r3) {
          "use strict";
          var n2 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, i2 = e2("pako"), s2 = e2("./utils"), a2 = e2("./stream/GenericWorker"), o2 = n2 ? "uint8array" : "array";
          function h2(e3, t3) {
            a2.call(this, "FlateWorker/" + e3), this._pako = null, this._pakoAction = e3, this._pakoOptions = t3, this.meta = {};
          }
          r3.magic = "\b\0", s2.inherits(h2, a2), h2.prototype.processChunk = function(e3) {
            this.meta = e3.meta, null === this._pako && this._createPako(), this._pako.push(s2.transformTo(o2, e3.data), false);
          }, h2.prototype.flush = function() {
            a2.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);
          }, h2.prototype.cleanUp = function() {
            a2.prototype.cleanUp.call(this), this._pako = null;
          }, h2.prototype._createPako = function() {
            this._pako = new i2[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
            var t3 = this;
            this._pako.onData = function(e3) {
              t3.push({ data: e3, meta: t3.meta });
            };
          }, r3.compressWorker = function(e3) {
            return new h2("Deflate", e3);
          }, r3.uncompressWorker = function() {
            return new h2("Inflate", {});
          };
        }, { "./stream/GenericWorker": 28, "./utils": 32, pako: 38 }], 8: [function(e2, t2, r3) {
          "use strict";
          function A(e3, t3) {
            var r4, n3 = "";
            for (r4 = 0; r4 < t3; r4++) n3 += String.fromCharCode(255 & e3), e3 >>>= 8;
            return n3;
          }
          function n2(e3, t3, r4, n3, i3, s3) {
            var a2, o2, h2 = e3.file, u2 = e3.compression, l2 = s3 !== O.utf8encode, f = I.transformTo("string", s3(h2.name)), c2 = I.transformTo("string", O.utf8encode(h2.name)), d = h2.comment, p2 = I.transformTo("string", s3(d)), m = I.transformTo("string", O.utf8encode(d)), _5 = c2.length !== h2.name.length, g = m.length !== d.length, b2 = "", v = "", y = "", w = h2.dir, k = h2.date, x = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
            t3 && !r4 || (x.crc32 = e3.crc32, x.compressedSize = e3.compressedSize, x.uncompressedSize = e3.uncompressedSize);
            var S = 0;
            t3 && (S |= 8), l2 || !_5 && !g || (S |= 2048);
            var z = 0, C = 0;
            w && (z |= 16), "UNIX" === i3 ? (C = 798, z |= function(e4, t4) {
              var r5 = e4;
              return e4 || (r5 = t4 ? 16893 : 33204), (65535 & r5) << 16;
            }(h2.unixPermissions, w)) : (C = 20, z |= function(e4) {
              return 63 & (e4 || 0);
            }(h2.dosPermissions)), a2 = k.getUTCHours(), a2 <<= 6, a2 |= k.getUTCMinutes(), a2 <<= 5, a2 |= k.getUTCSeconds() / 2, o2 = k.getUTCFullYear() - 1980, o2 <<= 4, o2 |= k.getUTCMonth() + 1, o2 <<= 5, o2 |= k.getUTCDate(), _5 && (v = A(1, 1) + A(B(f), 4) + c2, b2 += "up" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p2), 4) + m, b2 += "uc" + A(y.length, 2) + y);
            var E = "";
            return E += "\n\0", E += A(S, 2), E += u2.magic, E += A(a2, 2), E += A(o2, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b2.length, 2), { fileRecord: R.LOCAL_FILE_HEADER + E + f + b2, dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p2.length, 2) + "\0\0\0\0" + A(z, 4) + A(n3, 4) + f + b2 + p2 };
          }
          var I = e2("../utils"), i2 = e2("../stream/GenericWorker"), O = e2("../utf8"), B = e2("../crc32"), R = e2("../signature");
          function s2(e3, t3, r4, n3) {
            i2.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t3, this.zipPlatform = r4, this.encodeFileName = n3, this.streamFiles = e3, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
          }
          I.inherits(s2, i2), s2.prototype.push = function(e3) {
            var t3 = e3.meta.percent || 0, r4 = this.entriesCount, n3 = this._sources.length;
            this.accumulate ? this.contentBuffer.push(e3) : (this.bytesWritten += e3.data.length, i2.prototype.push.call(this, { data: e3.data, meta: { currentFile: this.currentFile, percent: r4 ? (t3 + 100 * (r4 - n3 - 1)) / r4 : 100 } }));
          }, s2.prototype.openedSource = function(e3) {
            this.currentSourceOffset = this.bytesWritten, this.currentFile = e3.file.name;
            var t3 = this.streamFiles && !e3.file.dir;
            if (t3) {
              var r4 = n2(e3, t3, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
              this.push({ data: r4.fileRecord, meta: { percent: 0 } });
            } else this.accumulate = true;
          }, s2.prototype.closedSource = function(e3) {
            this.accumulate = false;
            var t3 = this.streamFiles && !e3.file.dir, r4 = n2(e3, t3, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
            if (this.dirRecords.push(r4.dirRecord), t3) this.push({ data: function(e4) {
              return R.DATA_DESCRIPTOR + A(e4.crc32, 4) + A(e4.compressedSize, 4) + A(e4.uncompressedSize, 4);
            }(e3), meta: { percent: 100 } });
            else for (this.push({ data: r4.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; ) this.push(this.contentBuffer.shift());
            this.currentFile = null;
          }, s2.prototype.flush = function() {
            for (var e3 = this.bytesWritten, t3 = 0; t3 < this.dirRecords.length; t3++) this.push({ data: this.dirRecords[t3], meta: { percent: 100 } });
            var r4 = this.bytesWritten - e3, n3 = function(e4, t4, r5, n4, i3) {
              var s3 = I.transformTo("string", i3(n4));
              return R.CENTRAL_DIRECTORY_END + "\0\0\0\0" + A(e4, 2) + A(e4, 2) + A(t4, 4) + A(r5, 4) + A(s3.length, 2) + s3;
            }(this.dirRecords.length, r4, e3, this.zipComment, this.encodeFileName);
            this.push({ data: n3, meta: { percent: 100 } });
          }, s2.prototype.prepareNextSource = function() {
            this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
          }, s2.prototype.registerPrevious = function(e3) {
            this._sources.push(e3);
            var t3 = this;
            return e3.on("data", function(e4) {
              t3.processChunk(e4);
            }), e3.on("end", function() {
              t3.closedSource(t3.previous.streamInfo), t3._sources.length ? t3.prepareNextSource() : t3.end();
            }), e3.on("error", function(e4) {
              t3.error(e4);
            }), this;
          }, s2.prototype.resume = function() {
            return !!i2.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
          }, s2.prototype.error = function(e3) {
            var t3 = this._sources;
            if (!i2.prototype.error.call(this, e3)) return false;
            for (var r4 = 0; r4 < t3.length; r4++) try {
              t3[r4].error(e3);
            } catch (e4) {
            }
            return true;
          }, s2.prototype.lock = function() {
            i2.prototype.lock.call(this);
            for (var e3 = this._sources, t3 = 0; t3 < e3.length; t3++) e3[t3].lock();
          }, t2.exports = s2;
        }, { "../crc32": 4, "../signature": 23, "../stream/GenericWorker": 28, "../utf8": 31, "../utils": 32 }], 9: [function(e2, t2, r3) {
          "use strict";
          var u2 = e2("../compressions"), n2 = e2("./ZipFileWorker");
          r3.generateWorker = function(e3, a2, t3) {
            var o2 = new n2(a2.streamFiles, t3, a2.platform, a2.encodeFileName), h2 = 0;
            try {
              e3.forEach(function(e4, t4) {
                h2++;
                var r4 = function(e5, t5) {
                  var r5 = e5 || t5, n4 = u2[r5];
                  if (!n4) throw new Error(r5 + " is not a valid compression method !");
                  return n4;
                }(t4.options.compression, a2.compression), n3 = t4.options.compressionOptions || a2.compressionOptions || {}, i2 = t4.dir, s2 = t4.date;
                t4._compressWorker(r4, n3).withStreamInfo("file", { name: e4, dir: i2, date: s2, comment: t4.comment || "", unixPermissions: t4.unixPermissions, dosPermissions: t4.dosPermissions }).pipe(o2);
              }), o2.entriesCount = h2;
            } catch (e4) {
              o2.error(e4);
            }
            return o2;
          };
        }, { "../compressions": 3, "./ZipFileWorker": 8 }], 10: [function(e2, t2, r3) {
          "use strict";
          function n2() {
            if (!(this instanceof n2)) return new n2();
            if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
            this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
              var e3 = new n2();
              for (var t3 in this) "function" != typeof this[t3] && (e3[t3] = this[t3]);
              return e3;
            };
          }
          (n2.prototype = e2("./object")).loadAsync = e2("./load"), n2.support = e2("./support"), n2.defaults = e2("./defaults"), n2.version = "3.10.1", n2.loadAsync = function(e3, t3) {
            return new n2().loadAsync(e3, t3);
          }, n2.external = e2("./external"), t2.exports = n2;
        }, { "./defaults": 5, "./external": 6, "./load": 11, "./object": 15, "./support": 30 }], 11: [function(e2, t2, r3) {
          "use strict";
          var u2 = e2("./utils"), i2 = e2("./external"), n2 = e2("./utf8"), s2 = e2("./zipEntries"), a2 = e2("./stream/Crc32Probe"), l2 = e2("./nodejsUtils");
          function f(n3) {
            return new i2.Promise(function(e3, t3) {
              var r4 = n3.decompressed.getContentWorker().pipe(new a2());
              r4.on("error", function(e4) {
                t3(e4);
              }).on("end", function() {
                r4.streamInfo.crc32 !== n3.decompressed.crc32 ? t3(new Error("Corrupted zip : CRC32 mismatch")) : e3();
              }).resume();
            });
          }
          t2.exports = function(e3, o2) {
            var h2 = this;
            return o2 = u2.extend(o2 || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: n2.utf8decode }), l2.isNode && l2.isStream(e3) ? i2.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : u2.prepareContent("the loaded zip file", e3, true, o2.optimizedBinaryString, o2.base64).then(function(e4) {
              var t3 = new s2(o2);
              return t3.load(e4), t3;
            }).then(function(e4) {
              var t3 = [i2.Promise.resolve(e4)], r4 = e4.files;
              if (o2.checkCRC32) for (var n3 = 0; n3 < r4.length; n3++) t3.push(f(r4[n3]));
              return i2.Promise.all(t3);
            }).then(function(e4) {
              for (var t3 = e4.shift(), r4 = t3.files, n3 = 0; n3 < r4.length; n3++) {
                var i3 = r4[n3], s3 = i3.fileNameStr, a3 = u2.resolve(i3.fileNameStr);
                h2.file(a3, i3.decompressed, { binary: true, optimizedBinaryString: true, date: i3.date, dir: i3.dir, comment: i3.fileCommentStr.length ? i3.fileCommentStr : null, unixPermissions: i3.unixPermissions, dosPermissions: i3.dosPermissions, createFolders: o2.createFolders }), i3.dir || (h2.file(a3).unsafeOriginalName = s3);
              }
              return t3.zipComment.length && (h2.comment = t3.zipComment), h2;
            });
          };
        }, { "./external": 6, "./nodejsUtils": 14, "./stream/Crc32Probe": 25, "./utf8": 31, "./utils": 32, "./zipEntries": 33 }], 12: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("../utils"), i2 = e2("../stream/GenericWorker");
          function s2(e3, t3) {
            i2.call(this, "Nodejs stream input adapter for " + e3), this._upstreamEnded = false, this._bindStream(t3);
          }
          n2.inherits(s2, i2), s2.prototype._bindStream = function(e3) {
            var t3 = this;
            (this._stream = e3).pause(), e3.on("data", function(e4) {
              t3.push({ data: e4, meta: { percent: 0 } });
            }).on("error", function(e4) {
              t3.isPaused ? this.generatedError = e4 : t3.error(e4);
            }).on("end", function() {
              t3.isPaused ? t3._upstreamEnded = true : t3.end();
            });
          }, s2.prototype.pause = function() {
            return !!i2.prototype.pause.call(this) && (this._stream.pause(), true);
          }, s2.prototype.resume = function() {
            return !!i2.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
          }, t2.exports = s2;
        }, { "../stream/GenericWorker": 28, "../utils": 32 }], 13: [function(e2, t2, r3) {
          "use strict";
          var i2 = e2("readable-stream").Readable;
          function n2(e3, t3, r4) {
            i2.call(this, t3), this._helper = e3;
            var n3 = this;
            e3.on("data", function(e4, t4) {
              n3.push(e4) || n3._helper.pause(), r4 && r4(t4);
            }).on("error", function(e4) {
              n3.emit("error", e4);
            }).on("end", function() {
              n3.push(null);
            });
          }
          e2("../utils").inherits(n2, i2), n2.prototype._read = function() {
            this._helper.resume();
          }, t2.exports = n2;
        }, { "../utils": 32, "readable-stream": 16 }], 14: [function(e2, t2, r3) {
          "use strict";
          t2.exports = { isNode: "undefined" != typeof Buffer, newBufferFrom: function(e3, t3) {
            if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e3, t3);
            if ("number" == typeof e3) throw new Error('The "data" argument must not be a number');
            return new Buffer(e3, t3);
          }, allocBuffer: function(e3) {
            if (Buffer.alloc) return Buffer.alloc(e3);
            var t3 = new Buffer(e3);
            return t3.fill(0), t3;
          }, isBuffer: function(e3) {
            return Buffer.isBuffer(e3);
          }, isStream: function(e3) {
            return e3 && "function" == typeof e3.on && "function" == typeof e3.pause && "function" == typeof e3.resume;
          } };
        }, {}], 15: [function(e2, t2, r3) {
          "use strict";
          function s2(e3, t3, r4) {
            var n3, i3 = u2.getTypeOf(t3), s3 = u2.extend(r4 || {}, f);
            s3.date = s3.date || /* @__PURE__ */ new Date(), null !== s3.compression && (s3.compression = s3.compression.toUpperCase()), "string" == typeof s3.unixPermissions && (s3.unixPermissions = parseInt(s3.unixPermissions, 8)), s3.unixPermissions && 16384 & s3.unixPermissions && (s3.dir = true), s3.dosPermissions && 16 & s3.dosPermissions && (s3.dir = true), s3.dir && (e3 = g(e3)), s3.createFolders && (n3 = _5(e3)) && b2.call(this, n3, true);
            var a3 = "string" === i3 && false === s3.binary && false === s3.base64;
            r4 && void 0 !== r4.binary || (s3.binary = !a3), (t3 instanceof c2 && 0 === t3.uncompressedSize || s3.dir || !t3 || 0 === t3.length) && (s3.base64 = false, s3.binary = true, t3 = "", s3.compression = "STORE", i3 = "string");
            var o3 = null;
            o3 = t3 instanceof c2 || t3 instanceof l2 ? t3 : p2.isNode && p2.isStream(t3) ? new m(e3, t3) : u2.prepareContent(e3, t3, s3.binary, s3.optimizedBinaryString, s3.base64);
            var h3 = new d(e3, o3, s3);
            this.files[e3] = h3;
          }
          var i2 = e2("./utf8"), u2 = e2("./utils"), l2 = e2("./stream/GenericWorker"), a2 = e2("./stream/StreamHelper"), f = e2("./defaults"), c2 = e2("./compressedObject"), d = e2("./zipObject"), o2 = e2("./generate"), p2 = e2("./nodejsUtils"), m = e2("./nodejs/NodejsStreamInputAdapter"), _5 = function(e3) {
            "/" === e3.slice(-1) && (e3 = e3.substring(0, e3.length - 1));
            var t3 = e3.lastIndexOf("/");
            return 0 < t3 ? e3.substring(0, t3) : "";
          }, g = function(e3) {
            return "/" !== e3.slice(-1) && (e3 += "/"), e3;
          }, b2 = function(e3, t3) {
            return t3 = void 0 !== t3 ? t3 : f.createFolders, e3 = g(e3), this.files[e3] || s2.call(this, e3, null, { dir: true, createFolders: t3 }), this.files[e3];
          };
          function h2(e3) {
            return "[object RegExp]" === Object.prototype.toString.call(e3);
          }
          var n2 = { load: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, forEach: function(e3) {
            var t3, r4, n3;
            for (t3 in this.files) n3 = this.files[t3], (r4 = t3.slice(this.root.length, t3.length)) && t3.slice(0, this.root.length) === this.root && e3(r4, n3);
          }, filter: function(r4) {
            var n3 = [];
            return this.forEach(function(e3, t3) {
              r4(e3, t3) && n3.push(t3);
            }), n3;
          }, file: function(e3, t3, r4) {
            if (1 !== arguments.length) return e3 = this.root + e3, s2.call(this, e3, t3, r4), this;
            if (h2(e3)) {
              var n3 = e3;
              return this.filter(function(e4, t4) {
                return !t4.dir && n3.test(e4);
              });
            }
            var i3 = this.files[this.root + e3];
            return i3 && !i3.dir ? i3 : null;
          }, folder: function(r4) {
            if (!r4) return this;
            if (h2(r4)) return this.filter(function(e4, t4) {
              return t4.dir && r4.test(e4);
            });
            var e3 = this.root + r4, t3 = b2.call(this, e3), n3 = this.clone();
            return n3.root = t3.name, n3;
          }, remove: function(r4) {
            r4 = this.root + r4;
            var e3 = this.files[r4];
            if (e3 || ("/" !== r4.slice(-1) && (r4 += "/"), e3 = this.files[r4]), e3 && !e3.dir) delete this.files[r4];
            else for (var t3 = this.filter(function(e4, t4) {
              return t4.name.slice(0, r4.length) === r4;
            }), n3 = 0; n3 < t3.length; n3++) delete this.files[t3[n3].name];
            return this;
          }, generate: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, generateInternalStream: function(e3) {
            var t3, r4 = {};
            try {
              if ((r4 = u2.extend(e3 || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: i2.utf8encode })).type = r4.type.toLowerCase(), r4.compression = r4.compression.toUpperCase(), "binarystring" === r4.type && (r4.type = "string"), !r4.type) throw new Error("No output type specified.");
              u2.checkSupport(r4.type), "darwin" !== r4.platform && "freebsd" !== r4.platform && "linux" !== r4.platform && "sunos" !== r4.platform || (r4.platform = "UNIX"), "win32" === r4.platform && (r4.platform = "DOS");
              var n3 = r4.comment || this.comment || "";
              t3 = o2.generateWorker(this, r4, n3);
            } catch (e4) {
              (t3 = new l2("error")).error(e4);
            }
            return new a2(t3, r4.type || "string", r4.mimeType);
          }, generateAsync: function(e3, t3) {
            return this.generateInternalStream(e3).accumulate(t3);
          }, generateNodeStream: function(e3, t3) {
            return (e3 = e3 || {}).type || (e3.type = "nodebuffer"), this.generateInternalStream(e3).toNodejsStream(t3);
          } };
          t2.exports = n2;
        }, { "./compressedObject": 2, "./defaults": 5, "./generate": 9, "./nodejs/NodejsStreamInputAdapter": 12, "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31, "./utils": 32, "./zipObject": 35 }], 16: [function(e2, t2, r3) {
          "use strict";
          t2.exports = e2("stream");
        }, { stream: void 0 }], 17: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./DataReader");
          function i2(e3) {
            n2.call(this, e3);
            for (var t3 = 0; t3 < this.data.length; t3++) e3[t3] = 255 & e3[t3];
          }
          e2("../utils").inherits(i2, n2), i2.prototype.byteAt = function(e3) {
            return this.data[this.zero + e3];
          }, i2.prototype.lastIndexOfSignature = function(e3) {
            for (var t3 = e3.charCodeAt(0), r4 = e3.charCodeAt(1), n3 = e3.charCodeAt(2), i3 = e3.charCodeAt(3), s2 = this.length - 4; 0 <= s2; --s2) if (this.data[s2] === t3 && this.data[s2 + 1] === r4 && this.data[s2 + 2] === n3 && this.data[s2 + 3] === i3) return s2 - this.zero;
            return -1;
          }, i2.prototype.readAndCheckSignature = function(e3) {
            var t3 = e3.charCodeAt(0), r4 = e3.charCodeAt(1), n3 = e3.charCodeAt(2), i3 = e3.charCodeAt(3), s2 = this.readData(4);
            return t3 === s2[0] && r4 === s2[1] && n3 === s2[2] && i3 === s2[3];
          }, i2.prototype.readData = function(e3) {
            if (this.checkOffset(e3), 0 === e3) return [];
            var t3 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, t2.exports = i2;
        }, { "../utils": 32, "./DataReader": 18 }], 18: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("../utils");
          function i2(e3) {
            this.data = e3, this.length = e3.length, this.index = 0, this.zero = 0;
          }
          i2.prototype = { checkOffset: function(e3) {
            this.checkIndex(this.index + e3);
          }, checkIndex: function(e3) {
            if (this.length < this.zero + e3 || e3 < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e3 + "). Corrupted zip ?");
          }, setIndex: function(e3) {
            this.checkIndex(e3), this.index = e3;
          }, skip: function(e3) {
            this.setIndex(this.index + e3);
          }, byteAt: function() {
          }, readInt: function(e3) {
            var t3, r4 = 0;
            for (this.checkOffset(e3), t3 = this.index + e3 - 1; t3 >= this.index; t3--) r4 = (r4 << 8) + this.byteAt(t3);
            return this.index += e3, r4;
          }, readString: function(e3) {
            return n2.transformTo("string", this.readData(e3));
          }, readData: function() {
          }, lastIndexOfSignature: function() {
          }, readAndCheckSignature: function() {
          }, readDate: function() {
            var e3 = this.readInt(4);
            return new Date(Date.UTC(1980 + (e3 >> 25 & 127), (e3 >> 21 & 15) - 1, e3 >> 16 & 31, e3 >> 11 & 31, e3 >> 5 & 63, (31 & e3) << 1));
          } }, t2.exports = i2;
        }, { "../utils": 32 }], 19: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./Uint8ArrayReader");
          function i2(e3) {
            n2.call(this, e3);
          }
          e2("../utils").inherits(i2, n2), i2.prototype.readData = function(e3) {
            this.checkOffset(e3);
            var t3 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, t2.exports = i2;
        }, { "../utils": 32, "./Uint8ArrayReader": 21 }], 20: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./DataReader");
          function i2(e3) {
            n2.call(this, e3);
          }
          e2("../utils").inherits(i2, n2), i2.prototype.byteAt = function(e3) {
            return this.data.charCodeAt(this.zero + e3);
          }, i2.prototype.lastIndexOfSignature = function(e3) {
            return this.data.lastIndexOf(e3) - this.zero;
          }, i2.prototype.readAndCheckSignature = function(e3) {
            return e3 === this.readData(4);
          }, i2.prototype.readData = function(e3) {
            this.checkOffset(e3);
            var t3 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, t2.exports = i2;
        }, { "../utils": 32, "./DataReader": 18 }], 21: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./ArrayReader");
          function i2(e3) {
            n2.call(this, e3);
          }
          e2("../utils").inherits(i2, n2), i2.prototype.readData = function(e3) {
            if (this.checkOffset(e3), 0 === e3) return new Uint8Array(0);
            var t3 = this.data.subarray(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, t2.exports = i2;
        }, { "../utils": 32, "./ArrayReader": 17 }], 22: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("../utils"), i2 = e2("../support"), s2 = e2("./ArrayReader"), a2 = e2("./StringReader"), o2 = e2("./NodeBufferReader"), h2 = e2("./Uint8ArrayReader");
          t2.exports = function(e3) {
            var t3 = n2.getTypeOf(e3);
            return n2.checkSupport(t3), "string" !== t3 || i2.uint8array ? "nodebuffer" === t3 ? new o2(e3) : i2.uint8array ? new h2(n2.transformTo("uint8array", e3)) : new s2(n2.transformTo("array", e3)) : new a2(e3);
          };
        }, { "../support": 30, "../utils": 32, "./ArrayReader": 17, "./NodeBufferReader": 19, "./StringReader": 20, "./Uint8ArrayReader": 21 }], 23: [function(e2, t2, r3) {
          "use strict";
          r3.LOCAL_FILE_HEADER = "PK", r3.CENTRAL_FILE_HEADER = "PK", r3.CENTRAL_DIRECTORY_END = "PK", r3.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", r3.ZIP64_CENTRAL_DIRECTORY_END = "PK", r3.DATA_DESCRIPTOR = "PK\x07\b";
        }, {}], 24: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./GenericWorker"), i2 = e2("../utils");
          function s2(e3) {
            n2.call(this, "ConvertWorker to " + e3), this.destType = e3;
          }
          i2.inherits(s2, n2), s2.prototype.processChunk = function(e3) {
            this.push({ data: i2.transformTo(this.destType, e3.data), meta: e3.meta });
          }, t2.exports = s2;
        }, { "../utils": 32, "./GenericWorker": 28 }], 25: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./GenericWorker"), i2 = e2("../crc32");
          function s2() {
            n2.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
          }
          e2("../utils").inherits(s2, n2), s2.prototype.processChunk = function(e3) {
            this.streamInfo.crc32 = i2(e3.data, this.streamInfo.crc32 || 0), this.push(e3);
          }, t2.exports = s2;
        }, { "../crc32": 4, "../utils": 32, "./GenericWorker": 28 }], 26: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("../utils"), i2 = e2("./GenericWorker");
          function s2(e3) {
            i2.call(this, "DataLengthProbe for " + e3), this.propName = e3, this.withStreamInfo(e3, 0);
          }
          n2.inherits(s2, i2), s2.prototype.processChunk = function(e3) {
            if (e3) {
              var t3 = this.streamInfo[this.propName] || 0;
              this.streamInfo[this.propName] = t3 + e3.data.length;
            }
            i2.prototype.processChunk.call(this, e3);
          }, t2.exports = s2;
        }, { "../utils": 32, "./GenericWorker": 28 }], 27: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("../utils"), i2 = e2("./GenericWorker");
          function s2(e3) {
            i2.call(this, "DataWorker");
            var t3 = this;
            this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, e3.then(function(e4) {
              t3.dataIsReady = true, t3.data = e4, t3.max = e4 && e4.length || 0, t3.type = n2.getTypeOf(e4), t3.isPaused || t3._tickAndRepeat();
            }, function(e4) {
              t3.error(e4);
            });
          }
          n2.inherits(s2, i2), s2.prototype.cleanUp = function() {
            i2.prototype.cleanUp.call(this), this.data = null;
          }, s2.prototype.resume = function() {
            return !!i2.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n2.delay(this._tickAndRepeat, [], this)), true);
          }, s2.prototype._tickAndRepeat = function() {
            this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n2.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
          }, s2.prototype._tick = function() {
            if (this.isPaused || this.isFinished) return false;
            var e3 = null, t3 = Math.min(this.max, this.index + 16384);
            if (this.index >= this.max) return this.end();
            switch (this.type) {
              case "string":
                e3 = this.data.substring(this.index, t3);
                break;
              case "uint8array":
                e3 = this.data.subarray(this.index, t3);
                break;
              case "array":
              case "nodebuffer":
                e3 = this.data.slice(this.index, t3);
            }
            return this.index = t3, this.push({ data: e3, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
          }, t2.exports = s2;
        }, { "../utils": 32, "./GenericWorker": 28 }], 28: [function(e2, t2, r3) {
          "use strict";
          function n2(e3) {
            this.name = e3 || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
          }
          n2.prototype = { push: function(e3) {
            this.emit("data", e3);
          }, end: function() {
            if (this.isFinished) return false;
            this.flush();
            try {
              this.emit("end"), this.cleanUp(), this.isFinished = true;
            } catch (e3) {
              this.emit("error", e3);
            }
            return true;
          }, error: function(e3) {
            return !this.isFinished && (this.isPaused ? this.generatedError = e3 : (this.isFinished = true, this.emit("error", e3), this.previous && this.previous.error(e3), this.cleanUp()), true);
          }, on: function(e3, t3) {
            return this._listeners[e3].push(t3), this;
          }, cleanUp: function() {
            this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
          }, emit: function(e3, t3) {
            if (this._listeners[e3]) for (var r4 = 0; r4 < this._listeners[e3].length; r4++) this._listeners[e3][r4].call(this, t3);
          }, pipe: function(e3) {
            return e3.registerPrevious(this);
          }, registerPrevious: function(e3) {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.streamInfo = e3.streamInfo, this.mergeStreamInfo(), this.previous = e3;
            var t3 = this;
            return e3.on("data", function(e4) {
              t3.processChunk(e4);
            }), e3.on("end", function() {
              t3.end();
            }), e3.on("error", function(e4) {
              t3.error(e4);
            }), this;
          }, pause: function() {
            return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
          }, resume: function() {
            if (!this.isPaused || this.isFinished) return false;
            var e3 = this.isPaused = false;
            return this.generatedError && (this.error(this.generatedError), e3 = true), this.previous && this.previous.resume(), !e3;
          }, flush: function() {
          }, processChunk: function(e3) {
            this.push(e3);
          }, withStreamInfo: function(e3, t3) {
            return this.extraStreamInfo[e3] = t3, this.mergeStreamInfo(), this;
          }, mergeStreamInfo: function() {
            for (var e3 in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e3) && (this.streamInfo[e3] = this.extraStreamInfo[e3]);
          }, lock: function() {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.isLocked = true, this.previous && this.previous.lock();
          }, toString: function() {
            var e3 = "Worker " + this.name;
            return this.previous ? this.previous + " -> " + e3 : e3;
          } }, t2.exports = n2;
        }, {}], 29: [function(e2, t2, r3) {
          "use strict";
          var h2 = e2("../utils"), i2 = e2("./ConvertWorker"), s2 = e2("./GenericWorker"), u2 = e2("../base64"), n2 = e2("../support"), a2 = e2("../external"), o2 = null;
          if (n2.nodestream) try {
            o2 = e2("../nodejs/NodejsStreamOutputAdapter");
          } catch (e3) {
          }
          function l2(e3, o3) {
            return new a2.Promise(function(t3, r4) {
              var n3 = [], i3 = e3._internalType, s3 = e3._outputType, a3 = e3._mimeType;
              e3.on("data", function(e4, t4) {
                n3.push(e4), o3 && o3(t4);
              }).on("error", function(e4) {
                n3 = [], r4(e4);
              }).on("end", function() {
                try {
                  var e4 = function(e5, t4, r5) {
                    switch (e5) {
                      case "blob":
                        return h2.newBlob(h2.transformTo("arraybuffer", t4), r5);
                      case "base64":
                        return u2.encode(t4);
                      default:
                        return h2.transformTo(e5, t4);
                    }
                  }(s3, function(e5, t4) {
                    var r5, n4 = 0, i4 = null, s4 = 0;
                    for (r5 = 0; r5 < t4.length; r5++) s4 += t4[r5].length;
                    switch (e5) {
                      case "string":
                        return t4.join("");
                      case "array":
                        return Array.prototype.concat.apply([], t4);
                      case "uint8array":
                        for (i4 = new Uint8Array(s4), r5 = 0; r5 < t4.length; r5++) i4.set(t4[r5], n4), n4 += t4[r5].length;
                        return i4;
                      case "nodebuffer":
                        return Buffer.concat(t4);
                      default:
                        throw new Error("concat : unsupported type '" + e5 + "'");
                    }
                  }(i3, n3), a3);
                  t3(e4);
                } catch (e5) {
                  r4(e5);
                }
                n3 = [];
              }).resume();
            });
          }
          function f(e3, t3, r4) {
            var n3 = t3;
            switch (t3) {
              case "blob":
              case "arraybuffer":
                n3 = "uint8array";
                break;
              case "base64":
                n3 = "string";
            }
            try {
              this._internalType = n3, this._outputType = t3, this._mimeType = r4, h2.checkSupport(n3), this._worker = e3.pipe(new i2(n3)), e3.lock();
            } catch (e4) {
              this._worker = new s2("error"), this._worker.error(e4);
            }
          }
          f.prototype = { accumulate: function(e3) {
            return l2(this, e3);
          }, on: function(e3, t3) {
            var r4 = this;
            return "data" === e3 ? this._worker.on(e3, function(e4) {
              t3.call(r4, e4.data, e4.meta);
            }) : this._worker.on(e3, function() {
              h2.delay(t3, arguments, r4);
            }), this;
          }, resume: function() {
            return h2.delay(this._worker.resume, [], this._worker), this;
          }, pause: function() {
            return this._worker.pause(), this;
          }, toNodejsStream: function(e3) {
            if (h2.checkSupport("nodestream"), "nodebuffer" !== this._outputType) throw new Error(this._outputType + " is not supported by this method");
            return new o2(this, { objectMode: "nodebuffer" !== this._outputType }, e3);
          } }, t2.exports = f;
        }, { "../base64": 1, "../external": 6, "../nodejs/NodejsStreamOutputAdapter": 13, "../support": 30, "../utils": 32, "./ConvertWorker": 24, "./GenericWorker": 28 }], 30: [function(e2, t2, r3) {
          "use strict";
          if (r3.base64 = true, r3.array = true, r3.string = true, r3.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r3.nodebuffer = "undefined" != typeof Buffer, r3.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer) r3.blob = false;
          else {
            var n2 = new ArrayBuffer(0);
            try {
              r3.blob = 0 === new Blob([n2], { type: "application/zip" }).size;
            } catch (e3) {
              try {
                var i2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                i2.append(n2), r3.blob = 0 === i2.getBlob("application/zip").size;
              } catch (e4) {
                r3.blob = false;
              }
            }
          }
          try {
            r3.nodestream = !!e2("readable-stream").Readable;
          } catch (e3) {
            r3.nodestream = false;
          }
        }, { "readable-stream": 16 }], 31: [function(e2, t2, s2) {
          "use strict";
          for (var o2 = e2("./utils"), h2 = e2("./support"), r3 = e2("./nodejsUtils"), n2 = e2("./stream/GenericWorker"), u2 = new Array(256), i2 = 0; i2 < 256; i2++) u2[i2] = 252 <= i2 ? 6 : 248 <= i2 ? 5 : 240 <= i2 ? 4 : 224 <= i2 ? 3 : 192 <= i2 ? 2 : 1;
          u2[254] = u2[254] = 1;
          function a2() {
            n2.call(this, "utf-8 decode"), this.leftOver = null;
          }
          function l2() {
            n2.call(this, "utf-8 encode");
          }
          s2.utf8encode = function(e3) {
            return h2.nodebuffer ? r3.newBufferFrom(e3, "utf-8") : function(e4) {
              var t3, r4, n3, i3, s3, a3 = e4.length, o3 = 0;
              for (i3 = 0; i3 < a3; i3++) 55296 == (64512 & (r4 = e4.charCodeAt(i3))) && i3 + 1 < a3 && 56320 == (64512 & (n3 = e4.charCodeAt(i3 + 1))) && (r4 = 65536 + (r4 - 55296 << 10) + (n3 - 56320), i3++), o3 += r4 < 128 ? 1 : r4 < 2048 ? 2 : r4 < 65536 ? 3 : 4;
              for (t3 = h2.uint8array ? new Uint8Array(o3) : new Array(o3), i3 = s3 = 0; s3 < o3; i3++) 55296 == (64512 & (r4 = e4.charCodeAt(i3))) && i3 + 1 < a3 && 56320 == (64512 & (n3 = e4.charCodeAt(i3 + 1))) && (r4 = 65536 + (r4 - 55296 << 10) + (n3 - 56320), i3++), r4 < 128 ? t3[s3++] = r4 : (r4 < 2048 ? t3[s3++] = 192 | r4 >>> 6 : (r4 < 65536 ? t3[s3++] = 224 | r4 >>> 12 : (t3[s3++] = 240 | r4 >>> 18, t3[s3++] = 128 | r4 >>> 12 & 63), t3[s3++] = 128 | r4 >>> 6 & 63), t3[s3++] = 128 | 63 & r4);
              return t3;
            }(e3);
          }, s2.utf8decode = function(e3) {
            return h2.nodebuffer ? o2.transformTo("nodebuffer", e3).toString("utf-8") : function(e4) {
              var t3, r4, n3, i3, s3 = e4.length, a3 = new Array(2 * s3);
              for (t3 = r4 = 0; t3 < s3; ) if ((n3 = e4[t3++]) < 128) a3[r4++] = n3;
              else if (4 < (i3 = u2[n3])) a3[r4++] = 65533, t3 += i3 - 1;
              else {
                for (n3 &= 2 === i3 ? 31 : 3 === i3 ? 15 : 7; 1 < i3 && t3 < s3; ) n3 = n3 << 6 | 63 & e4[t3++], i3--;
                1 < i3 ? a3[r4++] = 65533 : n3 < 65536 ? a3[r4++] = n3 : (n3 -= 65536, a3[r4++] = 55296 | n3 >> 10 & 1023, a3[r4++] = 56320 | 1023 & n3);
              }
              return a3.length !== r4 && (a3.subarray ? a3 = a3.subarray(0, r4) : a3.length = r4), o2.applyFromCharCode(a3);
            }(e3 = o2.transformTo(h2.uint8array ? "uint8array" : "array", e3));
          }, o2.inherits(a2, n2), a2.prototype.processChunk = function(e3) {
            var t3 = o2.transformTo(h2.uint8array ? "uint8array" : "array", e3.data);
            if (this.leftOver && this.leftOver.length) {
              if (h2.uint8array) {
                var r4 = t3;
                (t3 = new Uint8Array(r4.length + this.leftOver.length)).set(this.leftOver, 0), t3.set(r4, this.leftOver.length);
              } else t3 = this.leftOver.concat(t3);
              this.leftOver = null;
            }
            var n3 = function(e4, t4) {
              var r5;
              for ((t4 = t4 || e4.length) > e4.length && (t4 = e4.length), r5 = t4 - 1; 0 <= r5 && 128 == (192 & e4[r5]); ) r5--;
              return r5 < 0 ? t4 : 0 === r5 ? t4 : r5 + u2[e4[r5]] > t4 ? r5 : t4;
            }(t3), i3 = t3;
            n3 !== t3.length && (h2.uint8array ? (i3 = t3.subarray(0, n3), this.leftOver = t3.subarray(n3, t3.length)) : (i3 = t3.slice(0, n3), this.leftOver = t3.slice(n3, t3.length))), this.push({ data: s2.utf8decode(i3), meta: e3.meta });
          }, a2.prototype.flush = function() {
            this.leftOver && this.leftOver.length && (this.push({ data: s2.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
          }, s2.Utf8DecodeWorker = a2, o2.inherits(l2, n2), l2.prototype.processChunk = function(e3) {
            this.push({ data: s2.utf8encode(e3.data), meta: e3.meta });
          }, s2.Utf8EncodeWorker = l2;
        }, { "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./support": 30, "./utils": 32 }], 32: [function(e2, t2, a2) {
          "use strict";
          var o2 = e2("./support"), h2 = e2("./base64"), r3 = e2("./nodejsUtils"), u2 = e2("./external");
          function n2(e3) {
            return e3;
          }
          function l2(e3, t3) {
            for (var r4 = 0; r4 < e3.length; ++r4) t3[r4] = 255 & e3.charCodeAt(r4);
            return t3;
          }
          e2("setimmediate"), a2.newBlob = function(t3, r4) {
            a2.checkSupport("blob");
            try {
              return new Blob([t3], { type: r4 });
            } catch (e3) {
              try {
                var n3 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                return n3.append(t3), n3.getBlob(r4);
              } catch (e4) {
                throw new Error("Bug : can't construct the Blob.");
              }
            }
          };
          var i2 = { stringifyByChunk: function(e3, t3, r4) {
            var n3 = [], i3 = 0, s3 = e3.length;
            if (s3 <= r4) return String.fromCharCode.apply(null, e3);
            for (; i3 < s3; ) "array" === t3 || "nodebuffer" === t3 ? n3.push(String.fromCharCode.apply(null, e3.slice(i3, Math.min(i3 + r4, s3)))) : n3.push(String.fromCharCode.apply(null, e3.subarray(i3, Math.min(i3 + r4, s3)))), i3 += r4;
            return n3.join("");
          }, stringifyByChar: function(e3) {
            for (var t3 = "", r4 = 0; r4 < e3.length; r4++) t3 += String.fromCharCode(e3[r4]);
            return t3;
          }, applyCanBeUsed: { uint8array: function() {
            try {
              return o2.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
            } catch (e3) {
              return false;
            }
          }(), nodebuffer: function() {
            try {
              return o2.nodebuffer && 1 === String.fromCharCode.apply(null, r3.allocBuffer(1)).length;
            } catch (e3) {
              return false;
            }
          }() } };
          function s2(e3) {
            var t3 = 65536, r4 = a2.getTypeOf(e3), n3 = true;
            if ("uint8array" === r4 ? n3 = i2.applyCanBeUsed.uint8array : "nodebuffer" === r4 && (n3 = i2.applyCanBeUsed.nodebuffer), n3) for (; 1 < t3; ) try {
              return i2.stringifyByChunk(e3, r4, t3);
            } catch (e4) {
              t3 = Math.floor(t3 / 2);
            }
            return i2.stringifyByChar(e3);
          }
          function f(e3, t3) {
            for (var r4 = 0; r4 < e3.length; r4++) t3[r4] = e3[r4];
            return t3;
          }
          a2.applyFromCharCode = s2;
          var c2 = {};
          c2.string = { string: n2, array: function(e3) {
            return l2(e3, new Array(e3.length));
          }, arraybuffer: function(e3) {
            return c2.string.uint8array(e3).buffer;
          }, uint8array: function(e3) {
            return l2(e3, new Uint8Array(e3.length));
          }, nodebuffer: function(e3) {
            return l2(e3, r3.allocBuffer(e3.length));
          } }, c2.array = { string: s2, array: n2, arraybuffer: function(e3) {
            return new Uint8Array(e3).buffer;
          }, uint8array: function(e3) {
            return new Uint8Array(e3);
          }, nodebuffer: function(e3) {
            return r3.newBufferFrom(e3);
          } }, c2.arraybuffer = { string: function(e3) {
            return s2(new Uint8Array(e3));
          }, array: function(e3) {
            return f(new Uint8Array(e3), new Array(e3.byteLength));
          }, arraybuffer: n2, uint8array: function(e3) {
            return new Uint8Array(e3);
          }, nodebuffer: function(e3) {
            return r3.newBufferFrom(new Uint8Array(e3));
          } }, c2.uint8array = { string: s2, array: function(e3) {
            return f(e3, new Array(e3.length));
          }, arraybuffer: function(e3) {
            return e3.buffer;
          }, uint8array: n2, nodebuffer: function(e3) {
            return r3.newBufferFrom(e3);
          } }, c2.nodebuffer = { string: s2, array: function(e3) {
            return f(e3, new Array(e3.length));
          }, arraybuffer: function(e3) {
            return c2.nodebuffer.uint8array(e3).buffer;
          }, uint8array: function(e3) {
            return f(e3, new Uint8Array(e3.length));
          }, nodebuffer: n2 }, a2.transformTo = function(e3, t3) {
            if (t3 = t3 || "", !e3) return t3;
            a2.checkSupport(e3);
            var r4 = a2.getTypeOf(t3);
            return c2[r4][e3](t3);
          }, a2.resolve = function(e3) {
            for (var t3 = e3.split("/"), r4 = [], n3 = 0; n3 < t3.length; n3++) {
              var i3 = t3[n3];
              "." === i3 || "" === i3 && 0 !== n3 && n3 !== t3.length - 1 || (".." === i3 ? r4.pop() : r4.push(i3));
            }
            return r4.join("/");
          }, a2.getTypeOf = function(e3) {
            return "string" == typeof e3 ? "string" : "[object Array]" === Object.prototype.toString.call(e3) ? "array" : o2.nodebuffer && r3.isBuffer(e3) ? "nodebuffer" : o2.uint8array && e3 instanceof Uint8Array ? "uint8array" : o2.arraybuffer && e3 instanceof ArrayBuffer ? "arraybuffer" : void 0;
          }, a2.checkSupport = function(e3) {
            if (!o2[e3.toLowerCase()]) throw new Error(e3 + " is not supported by this platform");
          }, a2.MAX_VALUE_16BITS = 65535, a2.MAX_VALUE_32BITS = -1, a2.pretty = function(e3) {
            var t3, r4, n3 = "";
            for (r4 = 0; r4 < (e3 || "").length; r4++) n3 += "\\x" + ((t3 = e3.charCodeAt(r4)) < 16 ? "0" : "") + t3.toString(16).toUpperCase();
            return n3;
          }, a2.delay = function(e3, t3, r4) {
            setImmediate(function() {
              e3.apply(r4 || null, t3 || []);
            });
          }, a2.inherits = function(e3, t3) {
            function r4() {
            }
            r4.prototype = t3.prototype, e3.prototype = new r4();
          }, a2.extend = function() {
            var e3, t3, r4 = {};
            for (e3 = 0; e3 < arguments.length; e3++) for (t3 in arguments[e3]) Object.prototype.hasOwnProperty.call(arguments[e3], t3) && void 0 === r4[t3] && (r4[t3] = arguments[e3][t3]);
            return r4;
          }, a2.prepareContent = function(r4, e3, n3, i3, s3) {
            return u2.Promise.resolve(e3).then(function(n4) {
              return o2.blob && (n4 instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(n4))) && "undefined" != typeof FileReader ? new u2.Promise(function(t3, r5) {
                var e4 = new FileReader();
                e4.onload = function(e5) {
                  t3(e5.target.result);
                }, e4.onerror = function(e5) {
                  r5(e5.target.error);
                }, e4.readAsArrayBuffer(n4);
              }) : n4;
            }).then(function(e4) {
              var t3 = a2.getTypeOf(e4);
              return t3 ? ("arraybuffer" === t3 ? e4 = a2.transformTo("uint8array", e4) : "string" === t3 && (s3 ? e4 = h2.decode(e4) : n3 && true !== i3 && (e4 = function(e5) {
                return l2(e5, o2.uint8array ? new Uint8Array(e5.length) : new Array(e5.length));
              }(e4))), e4) : u2.Promise.reject(new Error("Can't read the data of '" + r4 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
            });
          };
        }, { "./base64": 1, "./external": 6, "./nodejsUtils": 14, "./support": 30, setimmediate: 54 }], 33: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./reader/readerFor"), i2 = e2("./utils"), s2 = e2("./signature"), a2 = e2("./zipEntry"), o2 = e2("./support");
          function h2(e3) {
            this.files = [], this.loadOptions = e3;
          }
          h2.prototype = { checkSignature: function(e3) {
            if (!this.reader.readAndCheckSignature(e3)) {
              this.reader.index -= 4;
              var t3 = this.reader.readString(4);
              throw new Error("Corrupted zip or bug: unexpected signature (" + i2.pretty(t3) + ", expected " + i2.pretty(e3) + ")");
            }
          }, isSignature: function(e3, t3) {
            var r4 = this.reader.index;
            this.reader.setIndex(e3);
            var n3 = this.reader.readString(4) === t3;
            return this.reader.setIndex(r4), n3;
          }, readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
            var e3 = this.reader.readData(this.zipCommentLength), t3 = o2.uint8array ? "uint8array" : "array", r4 = i2.transformTo(t3, e3);
            this.zipComment = this.loadOptions.decodeFileName(r4);
          }, readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
            for (var e3, t3, r4, n3 = this.zip64EndOfCentralSize - 44; 0 < n3; ) e3 = this.reader.readInt(2), t3 = this.reader.readInt(4), r4 = this.reader.readData(t3), this.zip64ExtensibleData[e3] = { id: e3, length: t3, value: r4 };
          }, readBlockZip64EndOfCentralLocator: function() {
            if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error("Multi-volumes zip are not supported");
          }, readLocalFiles: function() {
            var e3, t3;
            for (e3 = 0; e3 < this.files.length; e3++) t3 = this.files[e3], this.reader.setIndex(t3.localHeaderOffset), this.checkSignature(s2.LOCAL_FILE_HEADER), t3.readLocalPart(this.reader), t3.handleUTF8(), t3.processAttributes();
          }, readCentralDir: function() {
            var e3;
            for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s2.CENTRAL_FILE_HEADER); ) (e3 = new a2({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e3);
            if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
          }, readEndOfCentral: function() {
            var e3 = this.reader.lastIndexOfSignature(s2.CENTRAL_DIRECTORY_END);
            if (e3 < 0) throw !this.isSignature(0, s2.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
            this.reader.setIndex(e3);
            var t3 = e3;
            if (this.checkSignature(s2.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i2.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i2.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i2.MAX_VALUE_16BITS || this.centralDirRecords === i2.MAX_VALUE_16BITS || this.centralDirSize === i2.MAX_VALUE_32BITS || this.centralDirOffset === i2.MAX_VALUE_32BITS) {
              if (this.zip64 = true, (e3 = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
              if (this.reader.setIndex(e3), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s2.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
              this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
            }
            var r4 = this.centralDirOffset + this.centralDirSize;
            this.zip64 && (r4 += 20, r4 += 12 + this.zip64EndOfCentralSize);
            var n3 = t3 - r4;
            if (0 < n3) this.isSignature(t3, s2.CENTRAL_FILE_HEADER) || (this.reader.zero = n3);
            else if (n3 < 0) throw new Error("Corrupted zip: missing " + Math.abs(n3) + " bytes.");
          }, prepareReader: function(e3) {
            this.reader = n2(e3);
          }, load: function(e3) {
            this.prepareReader(e3), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
          } }, t2.exports = h2;
        }, { "./reader/readerFor": 22, "./signature": 23, "./support": 30, "./utils": 32, "./zipEntry": 34 }], 34: [function(e2, t2, r3) {
          "use strict";
          var n2 = e2("./reader/readerFor"), s2 = e2("./utils"), i2 = e2("./compressedObject"), a2 = e2("./crc32"), o2 = e2("./utf8"), h2 = e2("./compressions"), u2 = e2("./support");
          function l2(e3, t3) {
            this.options = e3, this.loadOptions = t3;
          }
          l2.prototype = { isEncrypted: function() {
            return 1 == (1 & this.bitFlag);
          }, useUTF8: function() {
            return 2048 == (2048 & this.bitFlag);
          }, readLocalPart: function(e3) {
            var t3, r4;
            if (e3.skip(22), this.fileNameLength = e3.readInt(2), r4 = e3.readInt(2), this.fileName = e3.readData(this.fileNameLength), e3.skip(r4), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
            if (null === (t3 = function(e4) {
              for (var t4 in h2) if (Object.prototype.hasOwnProperty.call(h2, t4) && h2[t4].magic === e4) return h2[t4];
              return null;
            }(this.compressionMethod))) throw new Error("Corrupted zip : compression " + s2.pretty(this.compressionMethod) + " unknown (inner file : " + s2.transformTo("string", this.fileName) + ")");
            this.decompressed = new i2(this.compressedSize, this.uncompressedSize, this.crc32, t3, e3.readData(this.compressedSize));
          }, readCentralPart: function(e3) {
            this.versionMadeBy = e3.readInt(2), e3.skip(2), this.bitFlag = e3.readInt(2), this.compressionMethod = e3.readString(2), this.date = e3.readDate(), this.crc32 = e3.readInt(4), this.compressedSize = e3.readInt(4), this.uncompressedSize = e3.readInt(4);
            var t3 = e3.readInt(2);
            if (this.extraFieldsLength = e3.readInt(2), this.fileCommentLength = e3.readInt(2), this.diskNumberStart = e3.readInt(2), this.internalFileAttributes = e3.readInt(2), this.externalFileAttributes = e3.readInt(4), this.localHeaderOffset = e3.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
            e3.skip(t3), this.readExtraFields(e3), this.parseZIP64ExtraField(e3), this.fileComment = e3.readData(this.fileCommentLength);
          }, processAttributes: function() {
            this.unixPermissions = null, this.dosPermissions = null;
            var e3 = this.versionMadeBy >> 8;
            this.dir = !!(16 & this.externalFileAttributes), 0 == e3 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e3 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = true);
          }, parseZIP64ExtraField: function() {
            if (this.extraFields[1]) {
              var e3 = n2(this.extraFields[1].value);
              this.uncompressedSize === s2.MAX_VALUE_32BITS && (this.uncompressedSize = e3.readInt(8)), this.compressedSize === s2.MAX_VALUE_32BITS && (this.compressedSize = e3.readInt(8)), this.localHeaderOffset === s2.MAX_VALUE_32BITS && (this.localHeaderOffset = e3.readInt(8)), this.diskNumberStart === s2.MAX_VALUE_32BITS && (this.diskNumberStart = e3.readInt(4));
            }
          }, readExtraFields: function(e3) {
            var t3, r4, n3, i3 = e3.index + this.extraFieldsLength;
            for (this.extraFields || (this.extraFields = {}); e3.index + 4 < i3; ) t3 = e3.readInt(2), r4 = e3.readInt(2), n3 = e3.readData(r4), this.extraFields[t3] = { id: t3, length: r4, value: n3 };
            e3.setIndex(i3);
          }, handleUTF8: function() {
            var e3 = u2.uint8array ? "uint8array" : "array";
            if (this.useUTF8()) this.fileNameStr = o2.utf8decode(this.fileName), this.fileCommentStr = o2.utf8decode(this.fileComment);
            else {
              var t3 = this.findExtraFieldUnicodePath();
              if (null !== t3) this.fileNameStr = t3;
              else {
                var r4 = s2.transformTo(e3, this.fileName);
                this.fileNameStr = this.loadOptions.decodeFileName(r4);
              }
              var n3 = this.findExtraFieldUnicodeComment();
              if (null !== n3) this.fileCommentStr = n3;
              else {
                var i3 = s2.transformTo(e3, this.fileComment);
                this.fileCommentStr = this.loadOptions.decodeFileName(i3);
              }
            }
          }, findExtraFieldUnicodePath: function() {
            var e3 = this.extraFields[28789];
            if (e3) {
              var t3 = n2(e3.value);
              return 1 !== t3.readInt(1) ? null : a2(this.fileName) !== t3.readInt(4) ? null : o2.utf8decode(t3.readData(e3.length - 5));
            }
            return null;
          }, findExtraFieldUnicodeComment: function() {
            var e3 = this.extraFields[25461];
            if (e3) {
              var t3 = n2(e3.value);
              return 1 !== t3.readInt(1) ? null : a2(this.fileComment) !== t3.readInt(4) ? null : o2.utf8decode(t3.readData(e3.length - 5));
            }
            return null;
          } }, t2.exports = l2;
        }, { "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./reader/readerFor": 22, "./support": 30, "./utf8": 31, "./utils": 32 }], 35: [function(e2, t2, r3) {
          "use strict";
          function n2(e3, t3, r4) {
            this.name = e3, this.dir = r4.dir, this.date = r4.date, this.comment = r4.comment, this.unixPermissions = r4.unixPermissions, this.dosPermissions = r4.dosPermissions, this._data = t3, this._dataBinary = r4.binary, this.options = { compression: r4.compression, compressionOptions: r4.compressionOptions };
          }
          var s2 = e2("./stream/StreamHelper"), i2 = e2("./stream/DataWorker"), a2 = e2("./utf8"), o2 = e2("./compressedObject"), h2 = e2("./stream/GenericWorker");
          n2.prototype = { internalStream: function(e3) {
            var t3 = null, r4 = "string";
            try {
              if (!e3) throw new Error("No output type specified.");
              var n3 = "string" === (r4 = e3.toLowerCase()) || "text" === r4;
              "binarystring" !== r4 && "text" !== r4 || (r4 = "string"), t3 = this._decompressWorker();
              var i3 = !this._dataBinary;
              i3 && !n3 && (t3 = t3.pipe(new a2.Utf8EncodeWorker())), !i3 && n3 && (t3 = t3.pipe(new a2.Utf8DecodeWorker()));
            } catch (e4) {
              (t3 = new h2("error")).error(e4);
            }
            return new s2(t3, r4, "");
          }, async: function(e3, t3) {
            return this.internalStream(e3).accumulate(t3);
          }, nodeStream: function(e3, t3) {
            return this.internalStream(e3 || "nodebuffer").toNodejsStream(t3);
          }, _compressWorker: function(e3, t3) {
            if (this._data instanceof o2 && this._data.compression.magic === e3.magic) return this._data.getCompressedWorker();
            var r4 = this._decompressWorker();
            return this._dataBinary || (r4 = r4.pipe(new a2.Utf8EncodeWorker())), o2.createWorkerFrom(r4, e3, t3);
          }, _decompressWorker: function() {
            return this._data instanceof o2 ? this._data.getContentWorker() : this._data instanceof h2 ? this._data : new i2(this._data);
          } };
          for (var u2 = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], l2 = function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, f = 0; f < u2.length; f++) n2.prototype[u2[f]] = l2;
          t2.exports = n2;
        }, { "./compressedObject": 2, "./stream/DataWorker": 27, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31 }], 36: [function(e2, l2, t2) {
          (function(t3) {
            "use strict";
            var r3, n2, e3 = t3.MutationObserver || t3.WebKitMutationObserver;
            if (e3) {
              var i2 = 0, s2 = new e3(u2), a2 = t3.document.createTextNode("");
              s2.observe(a2, { characterData: true }), r3 = function() {
                a2.data = i2 = ++i2 % 2;
              };
            } else if (t3.setImmediate || void 0 === t3.MessageChannel) r3 = "document" in t3 && "onreadystatechange" in t3.document.createElement("script") ? function() {
              var e4 = t3.document.createElement("script");
              e4.onreadystatechange = function() {
                u2(), e4.onreadystatechange = null, e4.parentNode.removeChild(e4), e4 = null;
              }, t3.document.documentElement.appendChild(e4);
            } : function() {
              setTimeout(u2, 0);
            };
            else {
              var o2 = new t3.MessageChannel();
              o2.port1.onmessage = u2, r3 = function() {
                o2.port2.postMessage(0);
              };
            }
            var h2 = [];
            function u2() {
              var e4, t4;
              n2 = true;
              for (var r4 = h2.length; r4; ) {
                for (t4 = h2, h2 = [], e4 = -1; ++e4 < r4; ) t4[e4]();
                r4 = h2.length;
              }
              n2 = false;
            }
            l2.exports = function(e4) {
              1 !== h2.push(e4) || n2 || r3();
            };
          }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}], 37: [function(e2, t2, r3) {
          "use strict";
          var i2 = e2("immediate");
          function u2() {
          }
          var l2 = {}, s2 = ["REJECTED"], a2 = ["FULFILLED"], n2 = ["PENDING"];
          function o2(e3) {
            if ("function" != typeof e3) throw new TypeError("resolver must be a function");
            this.state = n2, this.queue = [], this.outcome = void 0, e3 !== u2 && d(this, e3);
          }
          function h2(e3, t3, r4) {
            this.promise = e3, "function" == typeof t3 && (this.onFulfilled = t3, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r4 && (this.onRejected = r4, this.callRejected = this.otherCallRejected);
          }
          function f(t3, r4, n3) {
            i2(function() {
              var e3;
              try {
                e3 = r4(n3);
              } catch (e4) {
                return l2.reject(t3, e4);
              }
              e3 === t3 ? l2.reject(t3, new TypeError("Cannot resolve promise with itself")) : l2.resolve(t3, e3);
            });
          }
          function c2(e3) {
            var t3 = e3 && e3.then;
            if (e3 && ("object" == typeof e3 || "function" == typeof e3) && "function" == typeof t3) return function() {
              t3.apply(e3, arguments);
            };
          }
          function d(t3, e3) {
            var r4 = false;
            function n3(e4) {
              r4 || (r4 = true, l2.reject(t3, e4));
            }
            function i3(e4) {
              r4 || (r4 = true, l2.resolve(t3, e4));
            }
            var s3 = p2(function() {
              e3(i3, n3);
            });
            "error" === s3.status && n3(s3.value);
          }
          function p2(e3, t3) {
            var r4 = {};
            try {
              r4.value = e3(t3), r4.status = "success";
            } catch (e4) {
              r4.status = "error", r4.value = e4;
            }
            return r4;
          }
          (t2.exports = o2).prototype.finally = function(t3) {
            if ("function" != typeof t3) return this;
            var r4 = this.constructor;
            return this.then(function(e3) {
              return r4.resolve(t3()).then(function() {
                return e3;
              });
            }, function(e3) {
              return r4.resolve(t3()).then(function() {
                throw e3;
              });
            });
          }, o2.prototype.catch = function(e3) {
            return this.then(null, e3);
          }, o2.prototype.then = function(e3, t3) {
            if ("function" != typeof e3 && this.state === a2 || "function" != typeof t3 && this.state === s2) return this;
            var r4 = new this.constructor(u2);
            this.state !== n2 ? f(r4, this.state === a2 ? e3 : t3, this.outcome) : this.queue.push(new h2(r4, e3, t3));
            return r4;
          }, h2.prototype.callFulfilled = function(e3) {
            l2.resolve(this.promise, e3);
          }, h2.prototype.otherCallFulfilled = function(e3) {
            f(this.promise, this.onFulfilled, e3);
          }, h2.prototype.callRejected = function(e3) {
            l2.reject(this.promise, e3);
          }, h2.prototype.otherCallRejected = function(e3) {
            f(this.promise, this.onRejected, e3);
          }, l2.resolve = function(e3, t3) {
            var r4 = p2(c2, t3);
            if ("error" === r4.status) return l2.reject(e3, r4.value);
            var n3 = r4.value;
            if (n3) d(e3, n3);
            else {
              e3.state = a2, e3.outcome = t3;
              for (var i3 = -1, s3 = e3.queue.length; ++i3 < s3; ) e3.queue[i3].callFulfilled(t3);
            }
            return e3;
          }, l2.reject = function(e3, t3) {
            e3.state = s2, e3.outcome = t3;
            for (var r4 = -1, n3 = e3.queue.length; ++r4 < n3; ) e3.queue[r4].callRejected(t3);
            return e3;
          }, o2.resolve = function(e3) {
            if (e3 instanceof this) return e3;
            return l2.resolve(new this(u2), e3);
          }, o2.reject = function(e3) {
            var t3 = new this(u2);
            return l2.reject(t3, e3);
          }, o2.all = function(e3) {
            var r4 = this;
            if ("[object Array]" !== Object.prototype.toString.call(e3)) return this.reject(new TypeError("must be an array"));
            var n3 = e3.length, i3 = false;
            if (!n3) return this.resolve([]);
            var s3 = new Array(n3), a3 = 0, t3 = -1, o3 = new this(u2);
            for (; ++t3 < n3; ) h3(e3[t3], t3);
            return o3;
            function h3(e4, t4) {
              r4.resolve(e4).then(function(e5) {
                s3[t4] = e5, ++a3 !== n3 || i3 || (i3 = true, l2.resolve(o3, s3));
              }, function(e5) {
                i3 || (i3 = true, l2.reject(o3, e5));
              });
            }
          }, o2.race = function(e3) {
            var t3 = this;
            if ("[object Array]" !== Object.prototype.toString.call(e3)) return this.reject(new TypeError("must be an array"));
            var r4 = e3.length, n3 = false;
            if (!r4) return this.resolve([]);
            var i3 = -1, s3 = new this(u2);
            for (; ++i3 < r4; ) a3 = e3[i3], t3.resolve(a3).then(function(e4) {
              n3 || (n3 = true, l2.resolve(s3, e4));
            }, function(e4) {
              n3 || (n3 = true, l2.reject(s3, e4));
            });
            var a3;
            return s3;
          };
        }, { immediate: 36 }], 38: [function(e2, t2, r3) {
          "use strict";
          var n2 = {};
          (0, e2("./lib/utils/common").assign)(n2, e2("./lib/deflate"), e2("./lib/inflate"), e2("./lib/zlib/constants")), t2.exports = n2;
        }, { "./lib/deflate": 39, "./lib/inflate": 40, "./lib/utils/common": 41, "./lib/zlib/constants": 44 }], 39: [function(e2, t2, r3) {
          "use strict";
          var a2 = e2("./zlib/deflate"), o2 = e2("./utils/common"), h2 = e2("./utils/strings"), i2 = e2("./zlib/messages"), s2 = e2("./zlib/zstream"), u2 = Object.prototype.toString, l2 = 0, f = -1, c2 = 0, d = 8;
          function p2(e3) {
            if (!(this instanceof p2)) return new p2(e3);
            this.options = o2.assign({ level: f, method: d, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: c2, to: "" }, e3 || {});
            var t3 = this.options;
            t3.raw && 0 < t3.windowBits ? t3.windowBits = -t3.windowBits : t3.gzip && 0 < t3.windowBits && t3.windowBits < 16 && (t3.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new s2(), this.strm.avail_out = 0;
            var r4 = a2.deflateInit2(this.strm, t3.level, t3.method, t3.windowBits, t3.memLevel, t3.strategy);
            if (r4 !== l2) throw new Error(i2[r4]);
            if (t3.header && a2.deflateSetHeader(this.strm, t3.header), t3.dictionary) {
              var n3;
              if (n3 = "string" == typeof t3.dictionary ? h2.string2buf(t3.dictionary) : "[object ArrayBuffer]" === u2.call(t3.dictionary) ? new Uint8Array(t3.dictionary) : t3.dictionary, (r4 = a2.deflateSetDictionary(this.strm, n3)) !== l2) throw new Error(i2[r4]);
              this._dict_set = true;
            }
          }
          function n2(e3, t3) {
            var r4 = new p2(t3);
            if (r4.push(e3, true), r4.err) throw r4.msg || i2[r4.err];
            return r4.result;
          }
          p2.prototype.push = function(e3, t3) {
            var r4, n3, i3 = this.strm, s3 = this.options.chunkSize;
            if (this.ended) return false;
            n3 = t3 === ~~t3 ? t3 : true === t3 ? 4 : 0, "string" == typeof e3 ? i3.input = h2.string2buf(e3) : "[object ArrayBuffer]" === u2.call(e3) ? i3.input = new Uint8Array(e3) : i3.input = e3, i3.next_in = 0, i3.avail_in = i3.input.length;
            do {
              if (0 === i3.avail_out && (i3.output = new o2.Buf8(s3), i3.next_out = 0, i3.avail_out = s3), 1 !== (r4 = a2.deflate(i3, n3)) && r4 !== l2) return this.onEnd(r4), !(this.ended = true);
              0 !== i3.avail_out && (0 !== i3.avail_in || 4 !== n3 && 2 !== n3) || ("string" === this.options.to ? this.onData(h2.buf2binstring(o2.shrinkBuf(i3.output, i3.next_out))) : this.onData(o2.shrinkBuf(i3.output, i3.next_out)));
            } while ((0 < i3.avail_in || 0 === i3.avail_out) && 1 !== r4);
            return 4 === n3 ? (r4 = a2.deflateEnd(this.strm), this.onEnd(r4), this.ended = true, r4 === l2) : 2 !== n3 || (this.onEnd(l2), !(i3.avail_out = 0));
          }, p2.prototype.onData = function(e3) {
            this.chunks.push(e3);
          }, p2.prototype.onEnd = function(e3) {
            e3 === l2 && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o2.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
          }, r3.Deflate = p2, r3.deflate = n2, r3.deflateRaw = function(e3, t3) {
            return (t3 = t3 || {}).raw = true, n2(e3, t3);
          }, r3.gzip = function(e3, t3) {
            return (t3 = t3 || {}).gzip = true, n2(e3, t3);
          };
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/deflate": 46, "./zlib/messages": 51, "./zlib/zstream": 53 }], 40: [function(e2, t2, r3) {
          "use strict";
          var c2 = e2("./zlib/inflate"), d = e2("./utils/common"), p2 = e2("./utils/strings"), m = e2("./zlib/constants"), n2 = e2("./zlib/messages"), i2 = e2("./zlib/zstream"), s2 = e2("./zlib/gzheader"), _5 = Object.prototype.toString;
          function a2(e3) {
            if (!(this instanceof a2)) return new a2(e3);
            this.options = d.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e3 || {});
            var t3 = this.options;
            t3.raw && 0 <= t3.windowBits && t3.windowBits < 16 && (t3.windowBits = -t3.windowBits, 0 === t3.windowBits && (t3.windowBits = -15)), !(0 <= t3.windowBits && t3.windowBits < 16) || e3 && e3.windowBits || (t3.windowBits += 32), 15 < t3.windowBits && t3.windowBits < 48 && 0 == (15 & t3.windowBits) && (t3.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new i2(), this.strm.avail_out = 0;
            var r4 = c2.inflateInit2(this.strm, t3.windowBits);
            if (r4 !== m.Z_OK) throw new Error(n2[r4]);
            this.header = new s2(), c2.inflateGetHeader(this.strm, this.header);
          }
          function o2(e3, t3) {
            var r4 = new a2(t3);
            if (r4.push(e3, true), r4.err) throw r4.msg || n2[r4.err];
            return r4.result;
          }
          a2.prototype.push = function(e3, t3) {
            var r4, n3, i3, s3, a3, o3, h2 = this.strm, u2 = this.options.chunkSize, l2 = this.options.dictionary, f = false;
            if (this.ended) return false;
            n3 = t3 === ~~t3 ? t3 : true === t3 ? m.Z_FINISH : m.Z_NO_FLUSH, "string" == typeof e3 ? h2.input = p2.binstring2buf(e3) : "[object ArrayBuffer]" === _5.call(e3) ? h2.input = new Uint8Array(e3) : h2.input = e3, h2.next_in = 0, h2.avail_in = h2.input.length;
            do {
              if (0 === h2.avail_out && (h2.output = new d.Buf8(u2), h2.next_out = 0, h2.avail_out = u2), (r4 = c2.inflate(h2, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l2 && (o3 = "string" == typeof l2 ? p2.string2buf(l2) : "[object ArrayBuffer]" === _5.call(l2) ? new Uint8Array(l2) : l2, r4 = c2.inflateSetDictionary(this.strm, o3)), r4 === m.Z_BUF_ERROR && true === f && (r4 = m.Z_OK, f = false), r4 !== m.Z_STREAM_END && r4 !== m.Z_OK) return this.onEnd(r4), !(this.ended = true);
              h2.next_out && (0 !== h2.avail_out && r4 !== m.Z_STREAM_END && (0 !== h2.avail_in || n3 !== m.Z_FINISH && n3 !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i3 = p2.utf8border(h2.output, h2.next_out), s3 = h2.next_out - i3, a3 = p2.buf2string(h2.output, i3), h2.next_out = s3, h2.avail_out = u2 - s3, s3 && d.arraySet(h2.output, h2.output, i3, s3, 0), this.onData(a3)) : this.onData(d.shrinkBuf(h2.output, h2.next_out)))), 0 === h2.avail_in && 0 === h2.avail_out && (f = true);
            } while ((0 < h2.avail_in || 0 === h2.avail_out) && r4 !== m.Z_STREAM_END);
            return r4 === m.Z_STREAM_END && (n3 = m.Z_FINISH), n3 === m.Z_FINISH ? (r4 = c2.inflateEnd(this.strm), this.onEnd(r4), this.ended = true, r4 === m.Z_OK) : n3 !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h2.avail_out = 0));
          }, a2.prototype.onData = function(e3) {
            this.chunks.push(e3);
          }, a2.prototype.onEnd = function(e3) {
            e3 === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
          }, r3.Inflate = a2, r3.inflate = o2, r3.inflateRaw = function(e3, t3) {
            return (t3 = t3 || {}).raw = true, o2(e3, t3);
          }, r3.ungzip = o2;
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/constants": 44, "./zlib/gzheader": 47, "./zlib/inflate": 49, "./zlib/messages": 51, "./zlib/zstream": 53 }], 41: [function(e2, t2, r3) {
          "use strict";
          var n2 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
          r3.assign = function(e3) {
            for (var t3 = Array.prototype.slice.call(arguments, 1); t3.length; ) {
              var r4 = t3.shift();
              if (r4) {
                if ("object" != typeof r4) throw new TypeError(r4 + "must be non-object");
                for (var n3 in r4) r4.hasOwnProperty(n3) && (e3[n3] = r4[n3]);
              }
            }
            return e3;
          }, r3.shrinkBuf = function(e3, t3) {
            return e3.length === t3 ? e3 : e3.subarray ? e3.subarray(0, t3) : (e3.length = t3, e3);
          };
          var i2 = { arraySet: function(e3, t3, r4, n3, i3) {
            if (t3.subarray && e3.subarray) e3.set(t3.subarray(r4, r4 + n3), i3);
            else for (var s3 = 0; s3 < n3; s3++) e3[i3 + s3] = t3[r4 + s3];
          }, flattenChunks: function(e3) {
            var t3, r4, n3, i3, s3, a2;
            for (t3 = n3 = 0, r4 = e3.length; t3 < r4; t3++) n3 += e3[t3].length;
            for (a2 = new Uint8Array(n3), t3 = i3 = 0, r4 = e3.length; t3 < r4; t3++) s3 = e3[t3], a2.set(s3, i3), i3 += s3.length;
            return a2;
          } }, s2 = { arraySet: function(e3, t3, r4, n3, i3) {
            for (var s3 = 0; s3 < n3; s3++) e3[i3 + s3] = t3[r4 + s3];
          }, flattenChunks: function(e3) {
            return [].concat.apply([], e3);
          } };
          r3.setTyped = function(e3) {
            e3 ? (r3.Buf8 = Uint8Array, r3.Buf16 = Uint16Array, r3.Buf32 = Int32Array, r3.assign(r3, i2)) : (r3.Buf8 = Array, r3.Buf16 = Array, r3.Buf32 = Array, r3.assign(r3, s2));
          }, r3.setTyped(n2);
        }, {}], 42: [function(e2, t2, r3) {
          "use strict";
          var h2 = e2("./common"), i2 = true, s2 = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (e3) {
            i2 = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (e3) {
            s2 = false;
          }
          for (var u2 = new h2.Buf8(256), n2 = 0; n2 < 256; n2++) u2[n2] = 252 <= n2 ? 6 : 248 <= n2 ? 5 : 240 <= n2 ? 4 : 224 <= n2 ? 3 : 192 <= n2 ? 2 : 1;
          function l2(e3, t3) {
            if (t3 < 65537 && (e3.subarray && s2 || !e3.subarray && i2)) return String.fromCharCode.apply(null, h2.shrinkBuf(e3, t3));
            for (var r4 = "", n3 = 0; n3 < t3; n3++) r4 += String.fromCharCode(e3[n3]);
            return r4;
          }
          u2[254] = u2[254] = 1, r3.string2buf = function(e3) {
            var t3, r4, n3, i3, s3, a2 = e3.length, o2 = 0;
            for (i3 = 0; i3 < a2; i3++) 55296 == (64512 & (r4 = e3.charCodeAt(i3))) && i3 + 1 < a2 && 56320 == (64512 & (n3 = e3.charCodeAt(i3 + 1))) && (r4 = 65536 + (r4 - 55296 << 10) + (n3 - 56320), i3++), o2 += r4 < 128 ? 1 : r4 < 2048 ? 2 : r4 < 65536 ? 3 : 4;
            for (t3 = new h2.Buf8(o2), i3 = s3 = 0; s3 < o2; i3++) 55296 == (64512 & (r4 = e3.charCodeAt(i3))) && i3 + 1 < a2 && 56320 == (64512 & (n3 = e3.charCodeAt(i3 + 1))) && (r4 = 65536 + (r4 - 55296 << 10) + (n3 - 56320), i3++), r4 < 128 ? t3[s3++] = r4 : (r4 < 2048 ? t3[s3++] = 192 | r4 >>> 6 : (r4 < 65536 ? t3[s3++] = 224 | r4 >>> 12 : (t3[s3++] = 240 | r4 >>> 18, t3[s3++] = 128 | r4 >>> 12 & 63), t3[s3++] = 128 | r4 >>> 6 & 63), t3[s3++] = 128 | 63 & r4);
            return t3;
          }, r3.buf2binstring = function(e3) {
            return l2(e3, e3.length);
          }, r3.binstring2buf = function(e3) {
            for (var t3 = new h2.Buf8(e3.length), r4 = 0, n3 = t3.length; r4 < n3; r4++) t3[r4] = e3.charCodeAt(r4);
            return t3;
          }, r3.buf2string = function(e3, t3) {
            var r4, n3, i3, s3, a2 = t3 || e3.length, o2 = new Array(2 * a2);
            for (r4 = n3 = 0; r4 < a2; ) if ((i3 = e3[r4++]) < 128) o2[n3++] = i3;
            else if (4 < (s3 = u2[i3])) o2[n3++] = 65533, r4 += s3 - 1;
            else {
              for (i3 &= 2 === s3 ? 31 : 3 === s3 ? 15 : 7; 1 < s3 && r4 < a2; ) i3 = i3 << 6 | 63 & e3[r4++], s3--;
              1 < s3 ? o2[n3++] = 65533 : i3 < 65536 ? o2[n3++] = i3 : (i3 -= 65536, o2[n3++] = 55296 | i3 >> 10 & 1023, o2[n3++] = 56320 | 1023 & i3);
            }
            return l2(o2, n3);
          }, r3.utf8border = function(e3, t3) {
            var r4;
            for ((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r4 = t3 - 1; 0 <= r4 && 128 == (192 & e3[r4]); ) r4--;
            return r4 < 0 ? t3 : 0 === r4 ? t3 : r4 + u2[e3[r4]] > t3 ? r4 : t3;
          };
        }, { "./common": 41 }], 43: [function(e2, t2, r3) {
          "use strict";
          t2.exports = function(e3, t3, r4, n2) {
            for (var i2 = 65535 & e3 | 0, s2 = e3 >>> 16 & 65535 | 0, a2 = 0; 0 !== r4; ) {
              for (r4 -= a2 = 2e3 < r4 ? 2e3 : r4; s2 = s2 + (i2 = i2 + t3[n2++] | 0) | 0, --a2; ) ;
              i2 %= 65521, s2 %= 65521;
            }
            return i2 | s2 << 16 | 0;
          };
        }, {}], 44: [function(e2, t2, r3) {
          "use strict";
          t2.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
        }, {}], 45: [function(e2, t2, r3) {
          "use strict";
          var o2 = function() {
            for (var e3, t3 = [], r4 = 0; r4 < 256; r4++) {
              e3 = r4;
              for (var n2 = 0; n2 < 8; n2++) e3 = 1 & e3 ? 3988292384 ^ e3 >>> 1 : e3 >>> 1;
              t3[r4] = e3;
            }
            return t3;
          }();
          t2.exports = function(e3, t3, r4, n2) {
            var i2 = o2, s2 = n2 + r4;
            e3 ^= -1;
            for (var a2 = n2; a2 < s2; a2++) e3 = e3 >>> 8 ^ i2[255 & (e3 ^ t3[a2])];
            return -1 ^ e3;
          };
        }, {}], 46: [function(e2, t2, r3) {
          "use strict";
          var h2, c2 = e2("../utils/common"), u2 = e2("./trees"), d = e2("./adler32"), p2 = e2("./crc32"), n2 = e2("./messages"), l2 = 0, f = 4, m = 0, _5 = -2, g = -1, b2 = 4, i2 = 2, v = 8, y = 9, s2 = 286, a2 = 30, o2 = 19, w = 2 * s2 + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;
          function R(e3, t3) {
            return e3.msg = n2[t3], t3;
          }
          function T(e3) {
            return (e3 << 1) - (4 < e3 ? 9 : 0);
          }
          function D(e3) {
            for (var t3 = e3.length; 0 <= --t3; ) e3[t3] = 0;
          }
          function F(e3) {
            var t3 = e3.state, r4 = t3.pending;
            r4 > e3.avail_out && (r4 = e3.avail_out), 0 !== r4 && (c2.arraySet(e3.output, t3.pending_buf, t3.pending_out, r4, e3.next_out), e3.next_out += r4, t3.pending_out += r4, e3.total_out += r4, e3.avail_out -= r4, t3.pending -= r4, 0 === t3.pending && (t3.pending_out = 0));
          }
          function N(e3, t3) {
            u2._tr_flush_block(e3, 0 <= e3.block_start ? e3.block_start : -1, e3.strstart - e3.block_start, t3), e3.block_start = e3.strstart, F(e3.strm);
          }
          function U(e3, t3) {
            e3.pending_buf[e3.pending++] = t3;
          }
          function P(e3, t3) {
            e3.pending_buf[e3.pending++] = t3 >>> 8 & 255, e3.pending_buf[e3.pending++] = 255 & t3;
          }
          function L(e3, t3) {
            var r4, n3, i3 = e3.max_chain_length, s3 = e3.strstart, a3 = e3.prev_length, o3 = e3.nice_match, h3 = e3.strstart > e3.w_size - z ? e3.strstart - (e3.w_size - z) : 0, u3 = e3.window, l3 = e3.w_mask, f2 = e3.prev, c3 = e3.strstart + S, d2 = u3[s3 + a3 - 1], p3 = u3[s3 + a3];
            e3.prev_length >= e3.good_match && (i3 >>= 2), o3 > e3.lookahead && (o3 = e3.lookahead);
            do {
              if (u3[(r4 = t3) + a3] === p3 && u3[r4 + a3 - 1] === d2 && u3[r4] === u3[s3] && u3[++r4] === u3[s3 + 1]) {
                s3 += 2, r4++;
                do {
                } while (u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && u3[++s3] === u3[++r4] && s3 < c3);
                if (n3 = S - (c3 - s3), s3 = c3 - S, a3 < n3) {
                  if (e3.match_start = t3, o3 <= (a3 = n3)) break;
                  d2 = u3[s3 + a3 - 1], p3 = u3[s3 + a3];
                }
              }
            } while ((t3 = f2[t3 & l3]) > h3 && 0 != --i3);
            return a3 <= e3.lookahead ? a3 : e3.lookahead;
          }
          function j(e3) {
            var t3, r4, n3, i3, s3, a3, o3, h3, u3, l3, f2 = e3.w_size;
            do {
              if (i3 = e3.window_size - e3.lookahead - e3.strstart, e3.strstart >= f2 + (f2 - z)) {
                for (c2.arraySet(e3.window, e3.window, f2, f2, 0), e3.match_start -= f2, e3.strstart -= f2, e3.block_start -= f2, t3 = r4 = e3.hash_size; n3 = e3.head[--t3], e3.head[t3] = f2 <= n3 ? n3 - f2 : 0, --r4; ) ;
                for (t3 = r4 = f2; n3 = e3.prev[--t3], e3.prev[t3] = f2 <= n3 ? n3 - f2 : 0, --r4; ) ;
                i3 += f2;
              }
              if (0 === e3.strm.avail_in) break;
              if (a3 = e3.strm, o3 = e3.window, h3 = e3.strstart + e3.lookahead, u3 = i3, l3 = void 0, l3 = a3.avail_in, u3 < l3 && (l3 = u3), r4 = 0 === l3 ? 0 : (a3.avail_in -= l3, c2.arraySet(o3, a3.input, a3.next_in, l3, h3), 1 === a3.state.wrap ? a3.adler = d(a3.adler, o3, l3, h3) : 2 === a3.state.wrap && (a3.adler = p2(a3.adler, o3, l3, h3)), a3.next_in += l3, a3.total_in += l3, l3), e3.lookahead += r4, e3.lookahead + e3.insert >= x) for (s3 = e3.strstart - e3.insert, e3.ins_h = e3.window[s3], e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[s3 + 1]) & e3.hash_mask; e3.insert && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[s3 + x - 1]) & e3.hash_mask, e3.prev[s3 & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = s3, s3++, e3.insert--, !(e3.lookahead + e3.insert < x)); ) ;
            } while (e3.lookahead < z && 0 !== e3.strm.avail_in);
          }
          function Z(e3, t3) {
            for (var r4, n3; ; ) {
              if (e3.lookahead < z) {
                if (j(e3), e3.lookahead < z && t3 === l2) return A;
                if (0 === e3.lookahead) break;
              }
              if (r4 = 0, e3.lookahead >= x && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x - 1]) & e3.hash_mask, r4 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), 0 !== r4 && e3.strstart - r4 <= e3.w_size - z && (e3.match_length = L(e3, r4)), e3.match_length >= x) if (n3 = u2._tr_tally(e3, e3.strstart - e3.match_start, e3.match_length - x), e3.lookahead -= e3.match_length, e3.match_length <= e3.max_lazy_match && e3.lookahead >= x) {
                for (e3.match_length--; e3.strstart++, e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x - 1]) & e3.hash_mask, r4 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart, 0 != --e3.match_length; ) ;
                e3.strstart++;
              } else e3.strstart += e3.match_length, e3.match_length = 0, e3.ins_h = e3.window[e3.strstart], e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 1]) & e3.hash_mask;
              else n3 = u2._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++;
              if (n3 && (N(e3, false), 0 === e3.strm.avail_out)) return A;
            }
            return e3.insert = e3.strstart < x - 1 ? e3.strstart : x - 1, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;
          }
          function W(e3, t3) {
            for (var r4, n3, i3; ; ) {
              if (e3.lookahead < z) {
                if (j(e3), e3.lookahead < z && t3 === l2) return A;
                if (0 === e3.lookahead) break;
              }
              if (r4 = 0, e3.lookahead >= x && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x - 1]) & e3.hash_mask, r4 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), e3.prev_length = e3.match_length, e3.prev_match = e3.match_start, e3.match_length = x - 1, 0 !== r4 && e3.prev_length < e3.max_lazy_match && e3.strstart - r4 <= e3.w_size - z && (e3.match_length = L(e3, r4), e3.match_length <= 5 && (1 === e3.strategy || e3.match_length === x && 4096 < e3.strstart - e3.match_start) && (e3.match_length = x - 1)), e3.prev_length >= x && e3.match_length <= e3.prev_length) {
                for (i3 = e3.strstart + e3.lookahead - x, n3 = u2._tr_tally(e3, e3.strstart - 1 - e3.prev_match, e3.prev_length - x), e3.lookahead -= e3.prev_length - 1, e3.prev_length -= 2; ++e3.strstart <= i3 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + x - 1]) & e3.hash_mask, r4 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), 0 != --e3.prev_length; ) ;
                if (e3.match_available = 0, e3.match_length = x - 1, e3.strstart++, n3 && (N(e3, false), 0 === e3.strm.avail_out)) return A;
              } else if (e3.match_available) {
                if ((n3 = u2._tr_tally(e3, 0, e3.window[e3.strstart - 1])) && N(e3, false), e3.strstart++, e3.lookahead--, 0 === e3.strm.avail_out) return A;
              } else e3.match_available = 1, e3.strstart++, e3.lookahead--;
            }
            return e3.match_available && (n3 = u2._tr_tally(e3, 0, e3.window[e3.strstart - 1]), e3.match_available = 0), e3.insert = e3.strstart < x - 1 ? e3.strstart : x - 1, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;
          }
          function M(e3, t3, r4, n3, i3) {
            this.good_length = e3, this.max_lazy = t3, this.nice_length = r4, this.max_chain = n3, this.func = i3;
          }
          function H() {
            this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c2.Buf16(2 * w), this.dyn_dtree = new c2.Buf16(2 * (2 * a2 + 1)), this.bl_tree = new c2.Buf16(2 * (2 * o2 + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c2.Buf16(k + 1), this.heap = new c2.Buf16(2 * s2 + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c2.Buf16(2 * s2 + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
          }
          function G(e3) {
            var t3;
            return e3 && e3.state ? (e3.total_in = e3.total_out = 0, e3.data_type = i2, (t3 = e3.state).pending = 0, t3.pending_out = 0, t3.wrap < 0 && (t3.wrap = -t3.wrap), t3.status = t3.wrap ? C : E, e3.adler = 2 === t3.wrap ? 0 : 1, t3.last_flush = l2, u2._tr_init(t3), m) : R(e3, _5);
          }
          function K(e3) {
            var t3 = G(e3);
            return t3 === m && function(e4) {
              e4.window_size = 2 * e4.w_size, D(e4.head), e4.max_lazy_match = h2[e4.level].max_lazy, e4.good_match = h2[e4.level].good_length, e4.nice_match = h2[e4.level].nice_length, e4.max_chain_length = h2[e4.level].max_chain, e4.strstart = 0, e4.block_start = 0, e4.lookahead = 0, e4.insert = 0, e4.match_length = e4.prev_length = x - 1, e4.match_available = 0, e4.ins_h = 0;
            }(e3.state), t3;
          }
          function Y(e3, t3, r4, n3, i3, s3) {
            if (!e3) return _5;
            var a3 = 1;
            if (t3 === g && (t3 = 6), n3 < 0 ? (a3 = 0, n3 = -n3) : 15 < n3 && (a3 = 2, n3 -= 16), i3 < 1 || y < i3 || r4 !== v || n3 < 8 || 15 < n3 || t3 < 0 || 9 < t3 || s3 < 0 || b2 < s3) return R(e3, _5);
            8 === n3 && (n3 = 9);
            var o3 = new H();
            return (e3.state = o3).strm = e3, o3.wrap = a3, o3.gzhead = null, o3.w_bits = n3, o3.w_size = 1 << o3.w_bits, o3.w_mask = o3.w_size - 1, o3.hash_bits = i3 + 7, o3.hash_size = 1 << o3.hash_bits, o3.hash_mask = o3.hash_size - 1, o3.hash_shift = ~~((o3.hash_bits + x - 1) / x), o3.window = new c2.Buf8(2 * o3.w_size), o3.head = new c2.Buf16(o3.hash_size), o3.prev = new c2.Buf16(o3.w_size), o3.lit_bufsize = 1 << i3 + 6, o3.pending_buf_size = 4 * o3.lit_bufsize, o3.pending_buf = new c2.Buf8(o3.pending_buf_size), o3.d_buf = 1 * o3.lit_bufsize, o3.l_buf = 3 * o3.lit_bufsize, o3.level = t3, o3.strategy = s3, o3.method = r4, K(e3);
          }
          h2 = [new M(0, 0, 0, 0, function(e3, t3) {
            var r4 = 65535;
            for (r4 > e3.pending_buf_size - 5 && (r4 = e3.pending_buf_size - 5); ; ) {
              if (e3.lookahead <= 1) {
                if (j(e3), 0 === e3.lookahead && t3 === l2) return A;
                if (0 === e3.lookahead) break;
              }
              e3.strstart += e3.lookahead, e3.lookahead = 0;
              var n3 = e3.block_start + r4;
              if ((0 === e3.strstart || e3.strstart >= n3) && (e3.lookahead = e3.strstart - n3, e3.strstart = n3, N(e3, false), 0 === e3.strm.avail_out)) return A;
              if (e3.strstart - e3.block_start >= e3.w_size - z && (N(e3, false), 0 === e3.strm.avail_out)) return A;
            }
            return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : (e3.strstart > e3.block_start && (N(e3, false), e3.strm.avail_out), A);
          }), new M(4, 4, 8, 4, Z), new M(4, 5, 16, 8, Z), new M(4, 6, 32, 32, Z), new M(4, 4, 16, 16, W), new M(8, 16, 32, 32, W), new M(8, 16, 128, 128, W), new M(8, 32, 128, 256, W), new M(32, 128, 258, 1024, W), new M(32, 258, 258, 4096, W)], r3.deflateInit = function(e3, t3) {
            return Y(e3, t3, v, 15, 8, 0);
          }, r3.deflateInit2 = Y, r3.deflateReset = K, r3.deflateResetKeep = G, r3.deflateSetHeader = function(e3, t3) {
            return e3 && e3.state ? 2 !== e3.state.wrap ? _5 : (e3.state.gzhead = t3, m) : _5;
          }, r3.deflate = function(e3, t3) {
            var r4, n3, i3, s3;
            if (!e3 || !e3.state || 5 < t3 || t3 < 0) return e3 ? R(e3, _5) : _5;
            if (n3 = e3.state, !e3.output || !e3.input && 0 !== e3.avail_in || 666 === n3.status && t3 !== f) return R(e3, 0 === e3.avail_out ? -5 : _5);
            if (n3.strm = e3, r4 = n3.last_flush, n3.last_flush = t3, n3.status === C) if (2 === n3.wrap) e3.adler = 0, U(n3, 31), U(n3, 139), U(n3, 8), n3.gzhead ? (U(n3, (n3.gzhead.text ? 1 : 0) + (n3.gzhead.hcrc ? 2 : 0) + (n3.gzhead.extra ? 4 : 0) + (n3.gzhead.name ? 8 : 0) + (n3.gzhead.comment ? 16 : 0)), U(n3, 255 & n3.gzhead.time), U(n3, n3.gzhead.time >> 8 & 255), U(n3, n3.gzhead.time >> 16 & 255), U(n3, n3.gzhead.time >> 24 & 255), U(n3, 9 === n3.level ? 2 : 2 <= n3.strategy || n3.level < 2 ? 4 : 0), U(n3, 255 & n3.gzhead.os), n3.gzhead.extra && n3.gzhead.extra.length && (U(n3, 255 & n3.gzhead.extra.length), U(n3, n3.gzhead.extra.length >> 8 & 255)), n3.gzhead.hcrc && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending, 0)), n3.gzindex = 0, n3.status = 69) : (U(n3, 0), U(n3, 0), U(n3, 0), U(n3, 0), U(n3, 0), U(n3, 9 === n3.level ? 2 : 2 <= n3.strategy || n3.level < 2 ? 4 : 0), U(n3, 3), n3.status = E);
            else {
              var a3 = v + (n3.w_bits - 8 << 4) << 8;
              a3 |= (2 <= n3.strategy || n3.level < 2 ? 0 : n3.level < 6 ? 1 : 6 === n3.level ? 2 : 3) << 6, 0 !== n3.strstart && (a3 |= 32), a3 += 31 - a3 % 31, n3.status = E, P(n3, a3), 0 !== n3.strstart && (P(n3, e3.adler >>> 16), P(n3, 65535 & e3.adler)), e3.adler = 1;
            }
            if (69 === n3.status) if (n3.gzhead.extra) {
              for (i3 = n3.pending; n3.gzindex < (65535 & n3.gzhead.extra.length) && (n3.pending !== n3.pending_buf_size || (n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), F(e3), i3 = n3.pending, n3.pending !== n3.pending_buf_size)); ) U(n3, 255 & n3.gzhead.extra[n3.gzindex]), n3.gzindex++;
              n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), n3.gzindex === n3.gzhead.extra.length && (n3.gzindex = 0, n3.status = 73);
            } else n3.status = 73;
            if (73 === n3.status) if (n3.gzhead.name) {
              i3 = n3.pending;
              do {
                if (n3.pending === n3.pending_buf_size && (n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), F(e3), i3 = n3.pending, n3.pending === n3.pending_buf_size)) {
                  s3 = 1;
                  break;
                }
                s3 = n3.gzindex < n3.gzhead.name.length ? 255 & n3.gzhead.name.charCodeAt(n3.gzindex++) : 0, U(n3, s3);
              } while (0 !== s3);
              n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), 0 === s3 && (n3.gzindex = 0, n3.status = 91);
            } else n3.status = 91;
            if (91 === n3.status) if (n3.gzhead.comment) {
              i3 = n3.pending;
              do {
                if (n3.pending === n3.pending_buf_size && (n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), F(e3), i3 = n3.pending, n3.pending === n3.pending_buf_size)) {
                  s3 = 1;
                  break;
                }
                s3 = n3.gzindex < n3.gzhead.comment.length ? 255 & n3.gzhead.comment.charCodeAt(n3.gzindex++) : 0, U(n3, s3);
              } while (0 !== s3);
              n3.gzhead.hcrc && n3.pending > i3 && (e3.adler = p2(e3.adler, n3.pending_buf, n3.pending - i3, i3)), 0 === s3 && (n3.status = 103);
            } else n3.status = 103;
            if (103 === n3.status && (n3.gzhead.hcrc ? (n3.pending + 2 > n3.pending_buf_size && F(e3), n3.pending + 2 <= n3.pending_buf_size && (U(n3, 255 & e3.adler), U(n3, e3.adler >> 8 & 255), e3.adler = 0, n3.status = E)) : n3.status = E), 0 !== n3.pending) {
              if (F(e3), 0 === e3.avail_out) return n3.last_flush = -1, m;
            } else if (0 === e3.avail_in && T(t3) <= T(r4) && t3 !== f) return R(e3, -5);
            if (666 === n3.status && 0 !== e3.avail_in) return R(e3, -5);
            if (0 !== e3.avail_in || 0 !== n3.lookahead || t3 !== l2 && 666 !== n3.status) {
              var o3 = 2 === n3.strategy ? function(e4, t4) {
                for (var r5; ; ) {
                  if (0 === e4.lookahead && (j(e4), 0 === e4.lookahead)) {
                    if (t4 === l2) return A;
                    break;
                  }
                  if (e4.match_length = 0, r5 = u2._tr_tally(e4, 0, e4.window[e4.strstart]), e4.lookahead--, e4.strstart++, r5 && (N(e4, false), 0 === e4.strm.avail_out)) return A;
                }
                return e4.insert = 0, t4 === f ? (N(e4, true), 0 === e4.strm.avail_out ? O : B) : e4.last_lit && (N(e4, false), 0 === e4.strm.avail_out) ? A : I;
              }(n3, t3) : 3 === n3.strategy ? function(e4, t4) {
                for (var r5, n4, i4, s4, a4 = e4.window; ; ) {
                  if (e4.lookahead <= S) {
                    if (j(e4), e4.lookahead <= S && t4 === l2) return A;
                    if (0 === e4.lookahead) break;
                  }
                  if (e4.match_length = 0, e4.lookahead >= x && 0 < e4.strstart && (n4 = a4[i4 = e4.strstart - 1]) === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4]) {
                    s4 = e4.strstart + S;
                    do {
                    } while (n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && n4 === a4[++i4] && i4 < s4);
                    e4.match_length = S - (s4 - i4), e4.match_length > e4.lookahead && (e4.match_length = e4.lookahead);
                  }
                  if (e4.match_length >= x ? (r5 = u2._tr_tally(e4, 1, e4.match_length - x), e4.lookahead -= e4.match_length, e4.strstart += e4.match_length, e4.match_length = 0) : (r5 = u2._tr_tally(e4, 0, e4.window[e4.strstart]), e4.lookahead--, e4.strstart++), r5 && (N(e4, false), 0 === e4.strm.avail_out)) return A;
                }
                return e4.insert = 0, t4 === f ? (N(e4, true), 0 === e4.strm.avail_out ? O : B) : e4.last_lit && (N(e4, false), 0 === e4.strm.avail_out) ? A : I;
              }(n3, t3) : h2[n3.level].func(n3, t3);
              if (o3 !== O && o3 !== B || (n3.status = 666), o3 === A || o3 === O) return 0 === e3.avail_out && (n3.last_flush = -1), m;
              if (o3 === I && (1 === t3 ? u2._tr_align(n3) : 5 !== t3 && (u2._tr_stored_block(n3, 0, 0, false), 3 === t3 && (D(n3.head), 0 === n3.lookahead && (n3.strstart = 0, n3.block_start = 0, n3.insert = 0))), F(e3), 0 === e3.avail_out)) return n3.last_flush = -1, m;
            }
            return t3 !== f ? m : n3.wrap <= 0 ? 1 : (2 === n3.wrap ? (U(n3, 255 & e3.adler), U(n3, e3.adler >> 8 & 255), U(n3, e3.adler >> 16 & 255), U(n3, e3.adler >> 24 & 255), U(n3, 255 & e3.total_in), U(n3, e3.total_in >> 8 & 255), U(n3, e3.total_in >> 16 & 255), U(n3, e3.total_in >> 24 & 255)) : (P(n3, e3.adler >>> 16), P(n3, 65535 & e3.adler)), F(e3), 0 < n3.wrap && (n3.wrap = -n3.wrap), 0 !== n3.pending ? m : 1);
          }, r3.deflateEnd = function(e3) {
            var t3;
            return e3 && e3.state ? (t3 = e3.state.status) !== C && 69 !== t3 && 73 !== t3 && 91 !== t3 && 103 !== t3 && t3 !== E && 666 !== t3 ? R(e3, _5) : (e3.state = null, t3 === E ? R(e3, -3) : m) : _5;
          }, r3.deflateSetDictionary = function(e3, t3) {
            var r4, n3, i3, s3, a3, o3, h3, u3, l3 = t3.length;
            if (!e3 || !e3.state) return _5;
            if (2 === (s3 = (r4 = e3.state).wrap) || 1 === s3 && r4.status !== C || r4.lookahead) return _5;
            for (1 === s3 && (e3.adler = d(e3.adler, t3, l3, 0)), r4.wrap = 0, l3 >= r4.w_size && (0 === s3 && (D(r4.head), r4.strstart = 0, r4.block_start = 0, r4.insert = 0), u3 = new c2.Buf8(r4.w_size), c2.arraySet(u3, t3, l3 - r4.w_size, r4.w_size, 0), t3 = u3, l3 = r4.w_size), a3 = e3.avail_in, o3 = e3.next_in, h3 = e3.input, e3.avail_in = l3, e3.next_in = 0, e3.input = t3, j(r4); r4.lookahead >= x; ) {
              for (n3 = r4.strstart, i3 = r4.lookahead - (x - 1); r4.ins_h = (r4.ins_h << r4.hash_shift ^ r4.window[n3 + x - 1]) & r4.hash_mask, r4.prev[n3 & r4.w_mask] = r4.head[r4.ins_h], r4.head[r4.ins_h] = n3, n3++, --i3; ) ;
              r4.strstart = n3, r4.lookahead = x - 1, j(r4);
            }
            return r4.strstart += r4.lookahead, r4.block_start = r4.strstart, r4.insert = r4.lookahead, r4.lookahead = 0, r4.match_length = r4.prev_length = x - 1, r4.match_available = 0, e3.next_in = o3, e3.input = h3, e3.avail_in = a3, r4.wrap = s3, m;
          }, r3.deflateInfo = "pako deflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./messages": 51, "./trees": 52 }], 47: [function(e2, t2, r3) {
          "use strict";
          t2.exports = function() {
            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
          };
        }, {}], 48: [function(e2, t2, r3) {
          "use strict";
          t2.exports = function(e3, t3) {
            var r4, n2, i2, s2, a2, o2, h2, u2, l2, f, c2, d, p2, m, _5, g, b2, v, y, w, k, x, S, z, C;
            r4 = e3.state, n2 = e3.next_in, z = e3.input, i2 = n2 + (e3.avail_in - 5), s2 = e3.next_out, C = e3.output, a2 = s2 - (t3 - e3.avail_out), o2 = s2 + (e3.avail_out - 257), h2 = r4.dmax, u2 = r4.wsize, l2 = r4.whave, f = r4.wnext, c2 = r4.window, d = r4.hold, p2 = r4.bits, m = r4.lencode, _5 = r4.distcode, g = (1 << r4.lenbits) - 1, b2 = (1 << r4.distbits) - 1;
            e: do {
              p2 < 15 && (d += z[n2++] << p2, p2 += 8, d += z[n2++] << p2, p2 += 8), v = m[d & g];
              t: for (; ; ) {
                if (d >>>= y = v >>> 24, p2 -= y, 0 === (y = v >>> 16 & 255)) C[s2++] = 65535 & v;
                else {
                  if (!(16 & y)) {
                    if (0 == (64 & y)) {
                      v = m[(65535 & v) + (d & (1 << y) - 1)];
                      continue t;
                    }
                    if (32 & y) {
                      r4.mode = 12;
                      break e;
                    }
                    e3.msg = "invalid literal/length code", r4.mode = 30;
                    break e;
                  }
                  w = 65535 & v, (y &= 15) && (p2 < y && (d += z[n2++] << p2, p2 += 8), w += d & (1 << y) - 1, d >>>= y, p2 -= y), p2 < 15 && (d += z[n2++] << p2, p2 += 8, d += z[n2++] << p2, p2 += 8), v = _5[d & b2];
                  r: for (; ; ) {
                    if (d >>>= y = v >>> 24, p2 -= y, !(16 & (y = v >>> 16 & 255))) {
                      if (0 == (64 & y)) {
                        v = _5[(65535 & v) + (d & (1 << y) - 1)];
                        continue r;
                      }
                      e3.msg = "invalid distance code", r4.mode = 30;
                      break e;
                    }
                    if (k = 65535 & v, p2 < (y &= 15) && (d += z[n2++] << p2, (p2 += 8) < y && (d += z[n2++] << p2, p2 += 8)), h2 < (k += d & (1 << y) - 1)) {
                      e3.msg = "invalid distance too far back", r4.mode = 30;
                      break e;
                    }
                    if (d >>>= y, p2 -= y, (y = s2 - a2) < k) {
                      if (l2 < (y = k - y) && r4.sane) {
                        e3.msg = "invalid distance too far back", r4.mode = 30;
                        break e;
                      }
                      if (S = c2, (x = 0) === f) {
                        if (x += u2 - y, y < w) {
                          for (w -= y; C[s2++] = c2[x++], --y; ) ;
                          x = s2 - k, S = C;
                        }
                      } else if (f < y) {
                        if (x += u2 + f - y, (y -= f) < w) {
                          for (w -= y; C[s2++] = c2[x++], --y; ) ;
                          if (x = 0, f < w) {
                            for (w -= y = f; C[s2++] = c2[x++], --y; ) ;
                            x = s2 - k, S = C;
                          }
                        }
                      } else if (x += f - y, y < w) {
                        for (w -= y; C[s2++] = c2[x++], --y; ) ;
                        x = s2 - k, S = C;
                      }
                      for (; 2 < w; ) C[s2++] = S[x++], C[s2++] = S[x++], C[s2++] = S[x++], w -= 3;
                      w && (C[s2++] = S[x++], 1 < w && (C[s2++] = S[x++]));
                    } else {
                      for (x = s2 - k; C[s2++] = C[x++], C[s2++] = C[x++], C[s2++] = C[x++], 2 < (w -= 3); ) ;
                      w && (C[s2++] = C[x++], 1 < w && (C[s2++] = C[x++]));
                    }
                    break;
                  }
                }
                break;
              }
            } while (n2 < i2 && s2 < o2);
            n2 -= w = p2 >> 3, d &= (1 << (p2 -= w << 3)) - 1, e3.next_in = n2, e3.next_out = s2, e3.avail_in = n2 < i2 ? i2 - n2 + 5 : 5 - (n2 - i2), e3.avail_out = s2 < o2 ? o2 - s2 + 257 : 257 - (s2 - o2), r4.hold = d, r4.bits = p2;
          };
        }, {}], 49: [function(e2, t2, r3) {
          "use strict";
          var I = e2("../utils/common"), O = e2("./adler32"), B = e2("./crc32"), R = e2("./inffast"), T = e2("./inftrees"), D = 1, F = 2, N = 0, U = -2, P = 1, n2 = 852, i2 = 592;
          function L(e3) {
            return (e3 >>> 24 & 255) + (e3 >>> 8 & 65280) + ((65280 & e3) << 8) + ((255 & e3) << 24);
          }
          function s2() {
            this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
          }
          function a2(e3) {
            var t3;
            return e3 && e3.state ? (t3 = e3.state, e3.total_in = e3.total_out = t3.total = 0, e3.msg = "", t3.wrap && (e3.adler = 1 & t3.wrap), t3.mode = P, t3.last = 0, t3.havedict = 0, t3.dmax = 32768, t3.head = null, t3.hold = 0, t3.bits = 0, t3.lencode = t3.lendyn = new I.Buf32(n2), t3.distcode = t3.distdyn = new I.Buf32(i2), t3.sane = 1, t3.back = -1, N) : U;
          }
          function o2(e3) {
            var t3;
            return e3 && e3.state ? ((t3 = e3.state).wsize = 0, t3.whave = 0, t3.wnext = 0, a2(e3)) : U;
          }
          function h2(e3, t3) {
            var r4, n3;
            return e3 && e3.state ? (n3 = e3.state, t3 < 0 ? (r4 = 0, t3 = -t3) : (r4 = 1 + (t3 >> 4), t3 < 48 && (t3 &= 15)), t3 && (t3 < 8 || 15 < t3) ? U : (null !== n3.window && n3.wbits !== t3 && (n3.window = null), n3.wrap = r4, n3.wbits = t3, o2(e3))) : U;
          }
          function u2(e3, t3) {
            var r4, n3;
            return e3 ? (n3 = new s2(), (e3.state = n3).window = null, (r4 = h2(e3, t3)) !== N && (e3.state = null), r4) : U;
          }
          var l2, f, c2 = true;
          function j(e3) {
            if (c2) {
              var t3;
              for (l2 = new I.Buf32(512), f = new I.Buf32(32), t3 = 0; t3 < 144; ) e3.lens[t3++] = 8;
              for (; t3 < 256; ) e3.lens[t3++] = 9;
              for (; t3 < 280; ) e3.lens[t3++] = 7;
              for (; t3 < 288; ) e3.lens[t3++] = 8;
              for (T(D, e3.lens, 0, 288, l2, 0, e3.work, { bits: 9 }), t3 = 0; t3 < 32; ) e3.lens[t3++] = 5;
              T(F, e3.lens, 0, 32, f, 0, e3.work, { bits: 5 }), c2 = false;
            }
            e3.lencode = l2, e3.lenbits = 9, e3.distcode = f, e3.distbits = 5;
          }
          function Z(e3, t3, r4, n3) {
            var i3, s3 = e3.state;
            return null === s3.window && (s3.wsize = 1 << s3.wbits, s3.wnext = 0, s3.whave = 0, s3.window = new I.Buf8(s3.wsize)), n3 >= s3.wsize ? (I.arraySet(s3.window, t3, r4 - s3.wsize, s3.wsize, 0), s3.wnext = 0, s3.whave = s3.wsize) : (n3 < (i3 = s3.wsize - s3.wnext) && (i3 = n3), I.arraySet(s3.window, t3, r4 - n3, i3, s3.wnext), (n3 -= i3) ? (I.arraySet(s3.window, t3, r4 - n3, n3, 0), s3.wnext = n3, s3.whave = s3.wsize) : (s3.wnext += i3, s3.wnext === s3.wsize && (s3.wnext = 0), s3.whave < s3.wsize && (s3.whave += i3))), 0;
          }
          r3.inflateReset = o2, r3.inflateReset2 = h2, r3.inflateResetKeep = a2, r3.inflateInit = function(e3) {
            return u2(e3, 15);
          }, r3.inflateInit2 = u2, r3.inflate = function(e3, t3) {
            var r4, n3, i3, s3, a3, o3, h3, u3, l3, f2, c3, d, p2, m, _5, g, b2, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            if (!e3 || !e3.state || !e3.output || !e3.input && 0 !== e3.avail_in) return U;
            12 === (r4 = e3.state).mode && (r4.mode = 13), a3 = e3.next_out, i3 = e3.output, h3 = e3.avail_out, s3 = e3.next_in, n3 = e3.input, o3 = e3.avail_in, u3 = r4.hold, l3 = r4.bits, f2 = o3, c3 = h3, x = N;
            e: for (; ; ) switch (r4.mode) {
              case P:
                if (0 === r4.wrap) {
                  r4.mode = 13;
                  break;
                }
                for (; l3 < 16; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (2 & r4.wrap && 35615 === u3) {
                  E[r4.check = 0] = 255 & u3, E[1] = u3 >>> 8 & 255, r4.check = B(r4.check, E, 2, 0), l3 = u3 = 0, r4.mode = 2;
                  break;
                }
                if (r4.flags = 0, r4.head && (r4.head.done = false), !(1 & r4.wrap) || (((255 & u3) << 8) + (u3 >> 8)) % 31) {
                  e3.msg = "incorrect header check", r4.mode = 30;
                  break;
                }
                if (8 != (15 & u3)) {
                  e3.msg = "unknown compression method", r4.mode = 30;
                  break;
                }
                if (l3 -= 4, k = 8 + (15 & (u3 >>>= 4)), 0 === r4.wbits) r4.wbits = k;
                else if (k > r4.wbits) {
                  e3.msg = "invalid window size", r4.mode = 30;
                  break;
                }
                r4.dmax = 1 << k, e3.adler = r4.check = 1, r4.mode = 512 & u3 ? 10 : 12, l3 = u3 = 0;
                break;
              case 2:
                for (; l3 < 16; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (r4.flags = u3, 8 != (255 & r4.flags)) {
                  e3.msg = "unknown compression method", r4.mode = 30;
                  break;
                }
                if (57344 & r4.flags) {
                  e3.msg = "unknown header flags set", r4.mode = 30;
                  break;
                }
                r4.head && (r4.head.text = u3 >> 8 & 1), 512 & r4.flags && (E[0] = 255 & u3, E[1] = u3 >>> 8 & 255, r4.check = B(r4.check, E, 2, 0)), l3 = u3 = 0, r4.mode = 3;
              case 3:
                for (; l3 < 32; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                r4.head && (r4.head.time = u3), 512 & r4.flags && (E[0] = 255 & u3, E[1] = u3 >>> 8 & 255, E[2] = u3 >>> 16 & 255, E[3] = u3 >>> 24 & 255, r4.check = B(r4.check, E, 4, 0)), l3 = u3 = 0, r4.mode = 4;
              case 4:
                for (; l3 < 16; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                r4.head && (r4.head.xflags = 255 & u3, r4.head.os = u3 >> 8), 512 & r4.flags && (E[0] = 255 & u3, E[1] = u3 >>> 8 & 255, r4.check = B(r4.check, E, 2, 0)), l3 = u3 = 0, r4.mode = 5;
              case 5:
                if (1024 & r4.flags) {
                  for (; l3 < 16; ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r4.length = u3, r4.head && (r4.head.extra_len = u3), 512 & r4.flags && (E[0] = 255 & u3, E[1] = u3 >>> 8 & 255, r4.check = B(r4.check, E, 2, 0)), l3 = u3 = 0;
                } else r4.head && (r4.head.extra = null);
                r4.mode = 6;
              case 6:
                if (1024 & r4.flags && (o3 < (d = r4.length) && (d = o3), d && (r4.head && (k = r4.head.extra_len - r4.length, r4.head.extra || (r4.head.extra = new Array(r4.head.extra_len)), I.arraySet(r4.head.extra, n3, s3, d, k)), 512 & r4.flags && (r4.check = B(r4.check, n3, d, s3)), o3 -= d, s3 += d, r4.length -= d), r4.length)) break e;
                r4.length = 0, r4.mode = 7;
              case 7:
                if (2048 & r4.flags) {
                  if (0 === o3) break e;
                  for (d = 0; k = n3[s3 + d++], r4.head && k && r4.length < 65536 && (r4.head.name += String.fromCharCode(k)), k && d < o3; ) ;
                  if (512 & r4.flags && (r4.check = B(r4.check, n3, d, s3)), o3 -= d, s3 += d, k) break e;
                } else r4.head && (r4.head.name = null);
                r4.length = 0, r4.mode = 8;
              case 8:
                if (4096 & r4.flags) {
                  if (0 === o3) break e;
                  for (d = 0; k = n3[s3 + d++], r4.head && k && r4.length < 65536 && (r4.head.comment += String.fromCharCode(k)), k && d < o3; ) ;
                  if (512 & r4.flags && (r4.check = B(r4.check, n3, d, s3)), o3 -= d, s3 += d, k) break e;
                } else r4.head && (r4.head.comment = null);
                r4.mode = 9;
              case 9:
                if (512 & r4.flags) {
                  for (; l3 < 16; ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  if (u3 !== (65535 & r4.check)) {
                    e3.msg = "header crc mismatch", r4.mode = 30;
                    break;
                  }
                  l3 = u3 = 0;
                }
                r4.head && (r4.head.hcrc = r4.flags >> 9 & 1, r4.head.done = true), e3.adler = r4.check = 0, r4.mode = 12;
                break;
              case 10:
                for (; l3 < 32; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                e3.adler = r4.check = L(u3), l3 = u3 = 0, r4.mode = 11;
              case 11:
                if (0 === r4.havedict) return e3.next_out = a3, e3.avail_out = h3, e3.next_in = s3, e3.avail_in = o3, r4.hold = u3, r4.bits = l3, 2;
                e3.adler = r4.check = 1, r4.mode = 12;
              case 12:
                if (5 === t3 || 6 === t3) break e;
              case 13:
                if (r4.last) {
                  u3 >>>= 7 & l3, l3 -= 7 & l3, r4.mode = 27;
                  break;
                }
                for (; l3 < 3; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                switch (r4.last = 1 & u3, l3 -= 1, 3 & (u3 >>>= 1)) {
                  case 0:
                    r4.mode = 14;
                    break;
                  case 1:
                    if (j(r4), r4.mode = 20, 6 !== t3) break;
                    u3 >>>= 2, l3 -= 2;
                    break e;
                  case 2:
                    r4.mode = 17;
                    break;
                  case 3:
                    e3.msg = "invalid block type", r4.mode = 30;
                }
                u3 >>>= 2, l3 -= 2;
                break;
              case 14:
                for (u3 >>>= 7 & l3, l3 -= 7 & l3; l3 < 32; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if ((65535 & u3) != (u3 >>> 16 ^ 65535)) {
                  e3.msg = "invalid stored block lengths", r4.mode = 30;
                  break;
                }
                if (r4.length = 65535 & u3, l3 = u3 = 0, r4.mode = 15, 6 === t3) break e;
              case 15:
                r4.mode = 16;
              case 16:
                if (d = r4.length) {
                  if (o3 < d && (d = o3), h3 < d && (d = h3), 0 === d) break e;
                  I.arraySet(i3, n3, s3, d, a3), o3 -= d, s3 += d, h3 -= d, a3 += d, r4.length -= d;
                  break;
                }
                r4.mode = 12;
                break;
              case 17:
                for (; l3 < 14; ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (r4.nlen = 257 + (31 & u3), u3 >>>= 5, l3 -= 5, r4.ndist = 1 + (31 & u3), u3 >>>= 5, l3 -= 5, r4.ncode = 4 + (15 & u3), u3 >>>= 4, l3 -= 4, 286 < r4.nlen || 30 < r4.ndist) {
                  e3.msg = "too many length or distance symbols", r4.mode = 30;
                  break;
                }
                r4.have = 0, r4.mode = 18;
              case 18:
                for (; r4.have < r4.ncode; ) {
                  for (; l3 < 3; ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r4.lens[A[r4.have++]] = 7 & u3, u3 >>>= 3, l3 -= 3;
                }
                for (; r4.have < 19; ) r4.lens[A[r4.have++]] = 0;
                if (r4.lencode = r4.lendyn, r4.lenbits = 7, S = { bits: r4.lenbits }, x = T(0, r4.lens, 0, 19, r4.lencode, 0, r4.work, S), r4.lenbits = S.bits, x) {
                  e3.msg = "invalid code lengths set", r4.mode = 30;
                  break;
                }
                r4.have = 0, r4.mode = 19;
              case 19:
                for (; r4.have < r4.nlen + r4.ndist; ) {
                  for (; g = (C = r4.lencode[u3 & (1 << r4.lenbits) - 1]) >>> 16 & 255, b2 = 65535 & C, !((_5 = C >>> 24) <= l3); ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  if (b2 < 16) u3 >>>= _5, l3 -= _5, r4.lens[r4.have++] = b2;
                  else {
                    if (16 === b2) {
                      for (z = _5 + 2; l3 < z; ) {
                        if (0 === o3) break e;
                        o3--, u3 += n3[s3++] << l3, l3 += 8;
                      }
                      if (u3 >>>= _5, l3 -= _5, 0 === r4.have) {
                        e3.msg = "invalid bit length repeat", r4.mode = 30;
                        break;
                      }
                      k = r4.lens[r4.have - 1], d = 3 + (3 & u3), u3 >>>= 2, l3 -= 2;
                    } else if (17 === b2) {
                      for (z = _5 + 3; l3 < z; ) {
                        if (0 === o3) break e;
                        o3--, u3 += n3[s3++] << l3, l3 += 8;
                      }
                      l3 -= _5, k = 0, d = 3 + (7 & (u3 >>>= _5)), u3 >>>= 3, l3 -= 3;
                    } else {
                      for (z = _5 + 7; l3 < z; ) {
                        if (0 === o3) break e;
                        o3--, u3 += n3[s3++] << l3, l3 += 8;
                      }
                      l3 -= _5, k = 0, d = 11 + (127 & (u3 >>>= _5)), u3 >>>= 7, l3 -= 7;
                    }
                    if (r4.have + d > r4.nlen + r4.ndist) {
                      e3.msg = "invalid bit length repeat", r4.mode = 30;
                      break;
                    }
                    for (; d--; ) r4.lens[r4.have++] = k;
                  }
                }
                if (30 === r4.mode) break;
                if (0 === r4.lens[256]) {
                  e3.msg = "invalid code -- missing end-of-block", r4.mode = 30;
                  break;
                }
                if (r4.lenbits = 9, S = { bits: r4.lenbits }, x = T(D, r4.lens, 0, r4.nlen, r4.lencode, 0, r4.work, S), r4.lenbits = S.bits, x) {
                  e3.msg = "invalid literal/lengths set", r4.mode = 30;
                  break;
                }
                if (r4.distbits = 6, r4.distcode = r4.distdyn, S = { bits: r4.distbits }, x = T(F, r4.lens, r4.nlen, r4.ndist, r4.distcode, 0, r4.work, S), r4.distbits = S.bits, x) {
                  e3.msg = "invalid distances set", r4.mode = 30;
                  break;
                }
                if (r4.mode = 20, 6 === t3) break e;
              case 20:
                r4.mode = 21;
              case 21:
                if (6 <= o3 && 258 <= h3) {
                  e3.next_out = a3, e3.avail_out = h3, e3.next_in = s3, e3.avail_in = o3, r4.hold = u3, r4.bits = l3, R(e3, c3), a3 = e3.next_out, i3 = e3.output, h3 = e3.avail_out, s3 = e3.next_in, n3 = e3.input, o3 = e3.avail_in, u3 = r4.hold, l3 = r4.bits, 12 === r4.mode && (r4.back = -1);
                  break;
                }
                for (r4.back = 0; g = (C = r4.lencode[u3 & (1 << r4.lenbits) - 1]) >>> 16 & 255, b2 = 65535 & C, !((_5 = C >>> 24) <= l3); ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (g && 0 == (240 & g)) {
                  for (v = _5, y = g, w = b2; g = (C = r4.lencode[w + ((u3 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b2 = 65535 & C, !(v + (_5 = C >>> 24) <= l3); ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  u3 >>>= v, l3 -= v, r4.back += v;
                }
                if (u3 >>>= _5, l3 -= _5, r4.back += _5, r4.length = b2, 0 === g) {
                  r4.mode = 26;
                  break;
                }
                if (32 & g) {
                  r4.back = -1, r4.mode = 12;
                  break;
                }
                if (64 & g) {
                  e3.msg = "invalid literal/length code", r4.mode = 30;
                  break;
                }
                r4.extra = 15 & g, r4.mode = 22;
              case 22:
                if (r4.extra) {
                  for (z = r4.extra; l3 < z; ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r4.length += u3 & (1 << r4.extra) - 1, u3 >>>= r4.extra, l3 -= r4.extra, r4.back += r4.extra;
                }
                r4.was = r4.length, r4.mode = 23;
              case 23:
                for (; g = (C = r4.distcode[u3 & (1 << r4.distbits) - 1]) >>> 16 & 255, b2 = 65535 & C, !((_5 = C >>> 24) <= l3); ) {
                  if (0 === o3) break e;
                  o3--, u3 += n3[s3++] << l3, l3 += 8;
                }
                if (0 == (240 & g)) {
                  for (v = _5, y = g, w = b2; g = (C = r4.distcode[w + ((u3 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b2 = 65535 & C, !(v + (_5 = C >>> 24) <= l3); ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  u3 >>>= v, l3 -= v, r4.back += v;
                }
                if (u3 >>>= _5, l3 -= _5, r4.back += _5, 64 & g) {
                  e3.msg = "invalid distance code", r4.mode = 30;
                  break;
                }
                r4.offset = b2, r4.extra = 15 & g, r4.mode = 24;
              case 24:
                if (r4.extra) {
                  for (z = r4.extra; l3 < z; ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  r4.offset += u3 & (1 << r4.extra) - 1, u3 >>>= r4.extra, l3 -= r4.extra, r4.back += r4.extra;
                }
                if (r4.offset > r4.dmax) {
                  e3.msg = "invalid distance too far back", r4.mode = 30;
                  break;
                }
                r4.mode = 25;
              case 25:
                if (0 === h3) break e;
                if (d = c3 - h3, r4.offset > d) {
                  if ((d = r4.offset - d) > r4.whave && r4.sane) {
                    e3.msg = "invalid distance too far back", r4.mode = 30;
                    break;
                  }
                  p2 = d > r4.wnext ? (d -= r4.wnext, r4.wsize - d) : r4.wnext - d, d > r4.length && (d = r4.length), m = r4.window;
                } else m = i3, p2 = a3 - r4.offset, d = r4.length;
                for (h3 < d && (d = h3), h3 -= d, r4.length -= d; i3[a3++] = m[p2++], --d; ) ;
                0 === r4.length && (r4.mode = 21);
                break;
              case 26:
                if (0 === h3) break e;
                i3[a3++] = r4.length, h3--, r4.mode = 21;
                break;
              case 27:
                if (r4.wrap) {
                  for (; l3 < 32; ) {
                    if (0 === o3) break e;
                    o3--, u3 |= n3[s3++] << l3, l3 += 8;
                  }
                  if (c3 -= h3, e3.total_out += c3, r4.total += c3, c3 && (e3.adler = r4.check = r4.flags ? B(r4.check, i3, c3, a3 - c3) : O(r4.check, i3, c3, a3 - c3)), c3 = h3, (r4.flags ? u3 : L(u3)) !== r4.check) {
                    e3.msg = "incorrect data check", r4.mode = 30;
                    break;
                  }
                  l3 = u3 = 0;
                }
                r4.mode = 28;
              case 28:
                if (r4.wrap && r4.flags) {
                  for (; l3 < 32; ) {
                    if (0 === o3) break e;
                    o3--, u3 += n3[s3++] << l3, l3 += 8;
                  }
                  if (u3 !== (4294967295 & r4.total)) {
                    e3.msg = "incorrect length check", r4.mode = 30;
                    break;
                  }
                  l3 = u3 = 0;
                }
                r4.mode = 29;
              case 29:
                x = 1;
                break e;
              case 30:
                x = -3;
                break e;
              case 31:
                return -4;
              case 32:
              default:
                return U;
            }
            return e3.next_out = a3, e3.avail_out = h3, e3.next_in = s3, e3.avail_in = o3, r4.hold = u3, r4.bits = l3, (r4.wsize || c3 !== e3.avail_out && r4.mode < 30 && (r4.mode < 27 || 4 !== t3)) && Z(e3, e3.output, e3.next_out, c3 - e3.avail_out) ? (r4.mode = 31, -4) : (f2 -= e3.avail_in, c3 -= e3.avail_out, e3.total_in += f2, e3.total_out += c3, r4.total += c3, r4.wrap && c3 && (e3.adler = r4.check = r4.flags ? B(r4.check, i3, c3, e3.next_out - c3) : O(r4.check, i3, c3, e3.next_out - c3)), e3.data_type = r4.bits + (r4.last ? 64 : 0) + (12 === r4.mode ? 128 : 0) + (20 === r4.mode || 15 === r4.mode ? 256 : 0), (0 == f2 && 0 === c3 || 4 === t3) && x === N && (x = -5), x);
          }, r3.inflateEnd = function(e3) {
            if (!e3 || !e3.state) return U;
            var t3 = e3.state;
            return t3.window && (t3.window = null), e3.state = null, N;
          }, r3.inflateGetHeader = function(e3, t3) {
            var r4;
            return e3 && e3.state ? 0 == (2 & (r4 = e3.state).wrap) ? U : ((r4.head = t3).done = false, N) : U;
          }, r3.inflateSetDictionary = function(e3, t3) {
            var r4, n3 = t3.length;
            return e3 && e3.state ? 0 !== (r4 = e3.state).wrap && 11 !== r4.mode ? U : 11 === r4.mode && O(1, t3, n3, 0) !== r4.check ? -3 : Z(e3, t3, n3, n3) ? (r4.mode = 31, -4) : (r4.havedict = 1, N) : U;
          }, r3.inflateInfo = "pako inflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./inffast": 48, "./inftrees": 50 }], 50: [function(e2, t2, r3) {
          "use strict";
          var D = e2("../utils/common"), F = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], N = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], U = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], P = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
          t2.exports = function(e3, t3, r4, n2, i2, s2, a2, o2) {
            var h2, u2, l2, f, c2, d, p2, m, _5, g = o2.bits, b2 = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R = null, T = 0;
            for (b2 = 0; b2 <= 15; b2++) O[b2] = 0;
            for (v = 0; v < n2; v++) O[t3[r4 + v]]++;
            for (k = g, w = 15; 1 <= w && 0 === O[w]; w--) ;
            if (w < k && (k = w), 0 === w) return i2[s2++] = 20971520, i2[s2++] = 20971520, o2.bits = 1, 0;
            for (y = 1; y < w && 0 === O[y]; y++) ;
            for (k < y && (k = y), b2 = z = 1; b2 <= 15; b2++) if (z <<= 1, (z -= O[b2]) < 0) return -1;
            if (0 < z && (0 === e3 || 1 !== w)) return -1;
            for (B[1] = 0, b2 = 1; b2 < 15; b2++) B[b2 + 1] = B[b2] + O[b2];
            for (v = 0; v < n2; v++) 0 !== t3[r4 + v] && (a2[B[t3[r4 + v]]++] = v);
            if (d = 0 === e3 ? (A = R = a2, 19) : 1 === e3 ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b2 = y, c2 = s2, S = v = E = 0, l2 = -1, f = (C = 1 << (x = k)) - 1, 1 === e3 && 852 < C || 2 === e3 && 592 < C) return 1;
            for (; ; ) {
              for (p2 = b2 - S, _5 = a2[v] < d ? (m = 0, a2[v]) : a2[v] > d ? (m = R[T + a2[v]], A[I + a2[v]]) : (m = 96, 0), h2 = 1 << b2 - S, y = u2 = 1 << x; i2[c2 + (E >> S) + (u2 -= h2)] = p2 << 24 | m << 16 | _5 | 0, 0 !== u2; ) ;
              for (h2 = 1 << b2 - 1; E & h2; ) h2 >>= 1;
              if (0 !== h2 ? (E &= h2 - 1, E += h2) : E = 0, v++, 0 == --O[b2]) {
                if (b2 === w) break;
                b2 = t3[r4 + a2[v]];
              }
              if (k < b2 && (E & f) !== l2) {
                for (0 === S && (S = k), c2 += y, z = 1 << (x = b2 - S); x + S < w && !((z -= O[x + S]) <= 0); ) x++, z <<= 1;
                if (C += 1 << x, 1 === e3 && 852 < C || 2 === e3 && 592 < C) return 1;
                i2[l2 = E & f] = k << 24 | x << 16 | c2 - s2 | 0;
              }
            }
            return 0 !== E && (i2[c2 + E] = b2 - S << 24 | 64 << 16 | 0), o2.bits = k, 0;
          };
        }, { "../utils/common": 41 }], 51: [function(e2, t2, r3) {
          "use strict";
          t2.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
        }, {}], 52: [function(e2, t2, r3) {
          "use strict";
          var i2 = e2("../utils/common"), o2 = 0, h2 = 1;
          function n2(e3) {
            for (var t3 = e3.length; 0 <= --t3; ) e3[t3] = 0;
          }
          var s2 = 0, a2 = 29, u2 = 256, l2 = u2 + 1 + a2, f = 30, c2 = 19, _5 = 2 * l2 + 1, g = 15, d = 16, p2 = 7, m = 256, b2 = 16, v = 17, y = 18, w = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], k = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], S = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], z = new Array(2 * (l2 + 2));
          n2(z);
          var C = new Array(2 * f);
          n2(C);
          var E = new Array(512);
          n2(E);
          var A = new Array(256);
          n2(A);
          var I = new Array(a2);
          n2(I);
          var O, B, R, T = new Array(f);
          function D(e3, t3, r4, n3, i3) {
            this.static_tree = e3, this.extra_bits = t3, this.extra_base = r4, this.elems = n3, this.max_length = i3, this.has_stree = e3 && e3.length;
          }
          function F(e3, t3) {
            this.dyn_tree = e3, this.max_code = 0, this.stat_desc = t3;
          }
          function N(e3) {
            return e3 < 256 ? E[e3] : E[256 + (e3 >>> 7)];
          }
          function U(e3, t3) {
            e3.pending_buf[e3.pending++] = 255 & t3, e3.pending_buf[e3.pending++] = t3 >>> 8 & 255;
          }
          function P(e3, t3, r4) {
            e3.bi_valid > d - r4 ? (e3.bi_buf |= t3 << e3.bi_valid & 65535, U(e3, e3.bi_buf), e3.bi_buf = t3 >> d - e3.bi_valid, e3.bi_valid += r4 - d) : (e3.bi_buf |= t3 << e3.bi_valid & 65535, e3.bi_valid += r4);
          }
          function L(e3, t3, r4) {
            P(e3, r4[2 * t3], r4[2 * t3 + 1]);
          }
          function j(e3, t3) {
            for (var r4 = 0; r4 |= 1 & e3, e3 >>>= 1, r4 <<= 1, 0 < --t3; ) ;
            return r4 >>> 1;
          }
          function Z(e3, t3, r4) {
            var n3, i3, s3 = new Array(g + 1), a3 = 0;
            for (n3 = 1; n3 <= g; n3++) s3[n3] = a3 = a3 + r4[n3 - 1] << 1;
            for (i3 = 0; i3 <= t3; i3++) {
              var o3 = e3[2 * i3 + 1];
              0 !== o3 && (e3[2 * i3] = j(s3[o3]++, o3));
            }
          }
          function W(e3) {
            var t3;
            for (t3 = 0; t3 < l2; t3++) e3.dyn_ltree[2 * t3] = 0;
            for (t3 = 0; t3 < f; t3++) e3.dyn_dtree[2 * t3] = 0;
            for (t3 = 0; t3 < c2; t3++) e3.bl_tree[2 * t3] = 0;
            e3.dyn_ltree[2 * m] = 1, e3.opt_len = e3.static_len = 0, e3.last_lit = e3.matches = 0;
          }
          function M(e3) {
            8 < e3.bi_valid ? U(e3, e3.bi_buf) : 0 < e3.bi_valid && (e3.pending_buf[e3.pending++] = e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0;
          }
          function H(e3, t3, r4, n3) {
            var i3 = 2 * t3, s3 = 2 * r4;
            return e3[i3] < e3[s3] || e3[i3] === e3[s3] && n3[t3] <= n3[r4];
          }
          function G(e3, t3, r4) {
            for (var n3 = e3.heap[r4], i3 = r4 << 1; i3 <= e3.heap_len && (i3 < e3.heap_len && H(t3, e3.heap[i3 + 1], e3.heap[i3], e3.depth) && i3++, !H(t3, n3, e3.heap[i3], e3.depth)); ) e3.heap[r4] = e3.heap[i3], r4 = i3, i3 <<= 1;
            e3.heap[r4] = n3;
          }
          function K(e3, t3, r4) {
            var n3, i3, s3, a3, o3 = 0;
            if (0 !== e3.last_lit) for (; n3 = e3.pending_buf[e3.d_buf + 2 * o3] << 8 | e3.pending_buf[e3.d_buf + 2 * o3 + 1], i3 = e3.pending_buf[e3.l_buf + o3], o3++, 0 === n3 ? L(e3, i3, t3) : (L(e3, (s3 = A[i3]) + u2 + 1, t3), 0 !== (a3 = w[s3]) && P(e3, i3 -= I[s3], a3), L(e3, s3 = N(--n3), r4), 0 !== (a3 = k[s3]) && P(e3, n3 -= T[s3], a3)), o3 < e3.last_lit; ) ;
            L(e3, m, t3);
          }
          function Y(e3, t3) {
            var r4, n3, i3, s3 = t3.dyn_tree, a3 = t3.stat_desc.static_tree, o3 = t3.stat_desc.has_stree, h3 = t3.stat_desc.elems, u3 = -1;
            for (e3.heap_len = 0, e3.heap_max = _5, r4 = 0; r4 < h3; r4++) 0 !== s3[2 * r4] ? (e3.heap[++e3.heap_len] = u3 = r4, e3.depth[r4] = 0) : s3[2 * r4 + 1] = 0;
            for (; e3.heap_len < 2; ) s3[2 * (i3 = e3.heap[++e3.heap_len] = u3 < 2 ? ++u3 : 0)] = 1, e3.depth[i3] = 0, e3.opt_len--, o3 && (e3.static_len -= a3[2 * i3 + 1]);
            for (t3.max_code = u3, r4 = e3.heap_len >> 1; 1 <= r4; r4--) G(e3, s3, r4);
            for (i3 = h3; r4 = e3.heap[1], e3.heap[1] = e3.heap[e3.heap_len--], G(e3, s3, 1), n3 = e3.heap[1], e3.heap[--e3.heap_max] = r4, e3.heap[--e3.heap_max] = n3, s3[2 * i3] = s3[2 * r4] + s3[2 * n3], e3.depth[i3] = (e3.depth[r4] >= e3.depth[n3] ? e3.depth[r4] : e3.depth[n3]) + 1, s3[2 * r4 + 1] = s3[2 * n3 + 1] = i3, e3.heap[1] = i3++, G(e3, s3, 1), 2 <= e3.heap_len; ) ;
            e3.heap[--e3.heap_max] = e3.heap[1], function(e4, t4) {
              var r5, n4, i4, s4, a4, o4, h4 = t4.dyn_tree, u4 = t4.max_code, l3 = t4.stat_desc.static_tree, f2 = t4.stat_desc.has_stree, c3 = t4.stat_desc.extra_bits, d2 = t4.stat_desc.extra_base, p3 = t4.stat_desc.max_length, m2 = 0;
              for (s4 = 0; s4 <= g; s4++) e4.bl_count[s4] = 0;
              for (h4[2 * e4.heap[e4.heap_max] + 1] = 0, r5 = e4.heap_max + 1; r5 < _5; r5++) p3 < (s4 = h4[2 * h4[2 * (n4 = e4.heap[r5]) + 1] + 1] + 1) && (s4 = p3, m2++), h4[2 * n4 + 1] = s4, u4 < n4 || (e4.bl_count[s4]++, a4 = 0, d2 <= n4 && (a4 = c3[n4 - d2]), o4 = h4[2 * n4], e4.opt_len += o4 * (s4 + a4), f2 && (e4.static_len += o4 * (l3[2 * n4 + 1] + a4)));
              if (0 !== m2) {
                do {
                  for (s4 = p3 - 1; 0 === e4.bl_count[s4]; ) s4--;
                  e4.bl_count[s4]--, e4.bl_count[s4 + 1] += 2, e4.bl_count[p3]--, m2 -= 2;
                } while (0 < m2);
                for (s4 = p3; 0 !== s4; s4--) for (n4 = e4.bl_count[s4]; 0 !== n4; ) u4 < (i4 = e4.heap[--r5]) || (h4[2 * i4 + 1] !== s4 && (e4.opt_len += (s4 - h4[2 * i4 + 1]) * h4[2 * i4], h4[2 * i4 + 1] = s4), n4--);
              }
            }(e3, t3), Z(s3, u3, e3.bl_count);
          }
          function X(e3, t3, r4) {
            var n3, i3, s3 = -1, a3 = t3[1], o3 = 0, h3 = 7, u3 = 4;
            for (0 === a3 && (h3 = 138, u3 = 3), t3[2 * (r4 + 1) + 1] = 65535, n3 = 0; n3 <= r4; n3++) i3 = a3, a3 = t3[2 * (n3 + 1) + 1], ++o3 < h3 && i3 === a3 || (o3 < u3 ? e3.bl_tree[2 * i3] += o3 : 0 !== i3 ? (i3 !== s3 && e3.bl_tree[2 * i3]++, e3.bl_tree[2 * b2]++) : o3 <= 10 ? e3.bl_tree[2 * v]++ : e3.bl_tree[2 * y]++, s3 = i3, u3 = (o3 = 0) === a3 ? (h3 = 138, 3) : i3 === a3 ? (h3 = 6, 3) : (h3 = 7, 4));
          }
          function V(e3, t3, r4) {
            var n3, i3, s3 = -1, a3 = t3[1], o3 = 0, h3 = 7, u3 = 4;
            for (0 === a3 && (h3 = 138, u3 = 3), n3 = 0; n3 <= r4; n3++) if (i3 = a3, a3 = t3[2 * (n3 + 1) + 1], !(++o3 < h3 && i3 === a3)) {
              if (o3 < u3) for (; L(e3, i3, e3.bl_tree), 0 != --o3; ) ;
              else 0 !== i3 ? (i3 !== s3 && (L(e3, i3, e3.bl_tree), o3--), L(e3, b2, e3.bl_tree), P(e3, o3 - 3, 2)) : o3 <= 10 ? (L(e3, v, e3.bl_tree), P(e3, o3 - 3, 3)) : (L(e3, y, e3.bl_tree), P(e3, o3 - 11, 7));
              s3 = i3, u3 = (o3 = 0) === a3 ? (h3 = 138, 3) : i3 === a3 ? (h3 = 6, 3) : (h3 = 7, 4);
            }
          }
          n2(T);
          var q = false;
          function J(e3, t3, r4, n3) {
            P(e3, (s2 << 1) + (n3 ? 1 : 0), 3), function(e4, t4, r5, n4) {
              M(e4), n4 && (U(e4, r5), U(e4, ~r5)), i2.arraySet(e4.pending_buf, e4.window, t4, r5, e4.pending), e4.pending += r5;
            }(e3, t3, r4, true);
          }
          r3._tr_init = function(e3) {
            q || (function() {
              var e4, t3, r4, n3, i3, s3 = new Array(g + 1);
              for (n3 = r4 = 0; n3 < a2 - 1; n3++) for (I[n3] = r4, e4 = 0; e4 < 1 << w[n3]; e4++) A[r4++] = n3;
              for (A[r4 - 1] = n3, n3 = i3 = 0; n3 < 16; n3++) for (T[n3] = i3, e4 = 0; e4 < 1 << k[n3]; e4++) E[i3++] = n3;
              for (i3 >>= 7; n3 < f; n3++) for (T[n3] = i3 << 7, e4 = 0; e4 < 1 << k[n3] - 7; e4++) E[256 + i3++] = n3;
              for (t3 = 0; t3 <= g; t3++) s3[t3] = 0;
              for (e4 = 0; e4 <= 143; ) z[2 * e4 + 1] = 8, e4++, s3[8]++;
              for (; e4 <= 255; ) z[2 * e4 + 1] = 9, e4++, s3[9]++;
              for (; e4 <= 279; ) z[2 * e4 + 1] = 7, e4++, s3[7]++;
              for (; e4 <= 287; ) z[2 * e4 + 1] = 8, e4++, s3[8]++;
              for (Z(z, l2 + 1, s3), e4 = 0; e4 < f; e4++) C[2 * e4 + 1] = 5, C[2 * e4] = j(e4, 5);
              O = new D(z, w, u2 + 1, l2, g), B = new D(C, k, 0, f, g), R = new D(new Array(0), x, 0, c2, p2);
            }(), q = true), e3.l_desc = new F(e3.dyn_ltree, O), e3.d_desc = new F(e3.dyn_dtree, B), e3.bl_desc = new F(e3.bl_tree, R), e3.bi_buf = 0, e3.bi_valid = 0, W(e3);
          }, r3._tr_stored_block = J, r3._tr_flush_block = function(e3, t3, r4, n3) {
            var i3, s3, a3 = 0;
            0 < e3.level ? (2 === e3.strm.data_type && (e3.strm.data_type = function(e4) {
              var t4, r5 = 4093624447;
              for (t4 = 0; t4 <= 31; t4++, r5 >>>= 1) if (1 & r5 && 0 !== e4.dyn_ltree[2 * t4]) return o2;
              if (0 !== e4.dyn_ltree[18] || 0 !== e4.dyn_ltree[20] || 0 !== e4.dyn_ltree[26]) return h2;
              for (t4 = 32; t4 < u2; t4++) if (0 !== e4.dyn_ltree[2 * t4]) return h2;
              return o2;
            }(e3)), Y(e3, e3.l_desc), Y(e3, e3.d_desc), a3 = function(e4) {
              var t4;
              for (X(e4, e4.dyn_ltree, e4.l_desc.max_code), X(e4, e4.dyn_dtree, e4.d_desc.max_code), Y(e4, e4.bl_desc), t4 = c2 - 1; 3 <= t4 && 0 === e4.bl_tree[2 * S[t4] + 1]; t4--) ;
              return e4.opt_len += 3 * (t4 + 1) + 5 + 5 + 4, t4;
            }(e3), i3 = e3.opt_len + 3 + 7 >>> 3, (s3 = e3.static_len + 3 + 7 >>> 3) <= i3 && (i3 = s3)) : i3 = s3 = r4 + 5, r4 + 4 <= i3 && -1 !== t3 ? J(e3, t3, r4, n3) : 4 === e3.strategy || s3 === i3 ? (P(e3, 2 + (n3 ? 1 : 0), 3), K(e3, z, C)) : (P(e3, 4 + (n3 ? 1 : 0), 3), function(e4, t4, r5, n4) {
              var i4;
              for (P(e4, t4 - 257, 5), P(e4, r5 - 1, 5), P(e4, n4 - 4, 4), i4 = 0; i4 < n4; i4++) P(e4, e4.bl_tree[2 * S[i4] + 1], 3);
              V(e4, e4.dyn_ltree, t4 - 1), V(e4, e4.dyn_dtree, r5 - 1);
            }(e3, e3.l_desc.max_code + 1, e3.d_desc.max_code + 1, a3 + 1), K(e3, e3.dyn_ltree, e3.dyn_dtree)), W(e3), n3 && M(e3);
          }, r3._tr_tally = function(e3, t3, r4) {
            return e3.pending_buf[e3.d_buf + 2 * e3.last_lit] = t3 >>> 8 & 255, e3.pending_buf[e3.d_buf + 2 * e3.last_lit + 1] = 255 & t3, e3.pending_buf[e3.l_buf + e3.last_lit] = 255 & r4, e3.last_lit++, 0 === t3 ? e3.dyn_ltree[2 * r4]++ : (e3.matches++, t3--, e3.dyn_ltree[2 * (A[r4] + u2 + 1)]++, e3.dyn_dtree[2 * N(t3)]++), e3.last_lit === e3.lit_bufsize - 1;
          }, r3._tr_align = function(e3) {
            P(e3, 2, 3), L(e3, m, z), function(e4) {
              16 === e4.bi_valid ? (U(e4, e4.bi_buf), e4.bi_buf = 0, e4.bi_valid = 0) : 8 <= e4.bi_valid && (e4.pending_buf[e4.pending++] = 255 & e4.bi_buf, e4.bi_buf >>= 8, e4.bi_valid -= 8);
            }(e3);
          };
        }, { "../utils/common": 41 }], 53: [function(e2, t2, r3) {
          "use strict";
          t2.exports = function() {
            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
          };
        }, {}], 54: [function(e2, t2, r3) {
          (function(e3) {
            !function(r4, n2) {
              "use strict";
              if (!r4.setImmediate) {
                var i2, s2, t3, a2, o2 = 1, h2 = {}, u2 = false, l2 = r4.document, e4 = Object.getPrototypeOf && Object.getPrototypeOf(r4);
                e4 = e4 && e4.setTimeout ? e4 : r4, i2 = "[object process]" === {}.toString.call(r4.process) ? function(e5) {
                  process.nextTick(function() {
                    c2(e5);
                  });
                } : function() {
                  if (r4.postMessage && !r4.importScripts) {
                    var e5 = true, t4 = r4.onmessage;
                    return r4.onmessage = function() {
                      e5 = false;
                    }, r4.postMessage("", "*"), r4.onmessage = t4, e5;
                  }
                }() ? (a2 = "setImmediate$" + Math.random() + "$", r4.addEventListener ? r4.addEventListener("message", d, false) : r4.attachEvent("onmessage", d), function(e5) {
                  r4.postMessage(a2 + e5, "*");
                }) : r4.MessageChannel ? ((t3 = new MessageChannel()).port1.onmessage = function(e5) {
                  c2(e5.data);
                }, function(e5) {
                  t3.port2.postMessage(e5);
                }) : l2 && "onreadystatechange" in l2.createElement("script") ? (s2 = l2.documentElement, function(e5) {
                  var t4 = l2.createElement("script");
                  t4.onreadystatechange = function() {
                    c2(e5), t4.onreadystatechange = null, s2.removeChild(t4), t4 = null;
                  }, s2.appendChild(t4);
                }) : function(e5) {
                  setTimeout(c2, 0, e5);
                }, e4.setImmediate = function(e5) {
                  "function" != typeof e5 && (e5 = new Function("" + e5));
                  for (var t4 = new Array(arguments.length - 1), r5 = 0; r5 < t4.length; r5++) t4[r5] = arguments[r5 + 1];
                  var n3 = { callback: e5, args: t4 };
                  return h2[o2] = n3, i2(o2), o2++;
                }, e4.clearImmediate = f;
              }
              function f(e5) {
                delete h2[e5];
              }
              function c2(e5) {
                if (u2) setTimeout(c2, 0, e5);
                else {
                  var t4 = h2[e5];
                  if (t4) {
                    u2 = true;
                    try {
                      !function(e6) {
                        var t5 = e6.callback, r5 = e6.args;
                        switch (r5.length) {
                          case 0:
                            t5();
                            break;
                          case 1:
                            t5(r5[0]);
                            break;
                          case 2:
                            t5(r5[0], r5[1]);
                            break;
                          case 3:
                            t5(r5[0], r5[1], r5[2]);
                            break;
                          default:
                            t5.apply(n2, r5);
                        }
                      }(t4);
                    } finally {
                      f(e5), u2 = false;
                    }
                  }
                }
              }
              function d(e5) {
                e5.source === r4 && "string" == typeof e5.data && 0 === e5.data.indexOf(a2) && c2(+e5.data.slice(a2.length));
              }
            }("undefined" == typeof self ? void 0 === e3 ? this : e3 : self);
          }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}] }, {}, [10])(10);
      });
    }
  });

  // node_modules/@mui/material/index.js
  var material_exports = {};
  __export(material_exports, {
    Accordion: () => Accordion_default,
    AccordionActions: () => AccordionActions_default,
    AccordionDetails: () => AccordionDetails_default,
    AccordionSummary: () => AccordionSummary_default,
    Alert: () => Alert_default,
    AlertTitle: () => AlertTitle_default,
    AppBar: () => AppBar_default,
    Autocomplete: () => Autocomplete_default,
    Avatar: () => Avatar_default,
    AvatarGroup: () => AvatarGroup_default,
    Backdrop: () => Backdrop_default,
    Badge: () => Badge_default,
    BottomNavigation: () => BottomNavigation_default,
    BottomNavigationAction: () => BottomNavigationAction_default,
    Box: () => Box_default,
    Breadcrumbs: () => Breadcrumbs_default,
    Button: () => Button_default,
    ButtonBase: () => ButtonBase_default,
    ButtonGroup: () => ButtonGroup_default,
    ButtonGroupButtonContext: () => ButtonGroupButtonContext_default,
    ButtonGroupContext: () => ButtonGroupContext_default,
    Card: () => Card_default,
    CardActionArea: () => CardActionArea_default,
    CardActions: () => CardActions_default,
    CardContent: () => CardContent_default,
    CardHeader: () => CardHeader_default,
    CardMedia: () => CardMedia_default,
    Checkbox: () => Checkbox_default,
    Chip: () => Chip_default,
    CircularProgress: () => CircularProgress_default,
    ClickAwayListener: () => ClickAwayListener,
    Collapse: () => Collapse_default,
    Container: () => Container_default,
    CssBaseline: () => CssBaseline_default,
    Dialog: () => Dialog_default,
    DialogActions: () => DialogActions_default,
    DialogContent: () => DialogContent_default,
    DialogContentText: () => DialogContentText_default,
    DialogTitle: () => DialogTitle_default,
    Divider: () => Divider_default,
    Drawer: () => Drawer_default,
    Experimental_CssVarsProvider: () => CssVarsProvider,
    Fab: () => Fab_default,
    Fade: () => Fade_default,
    FilledInput: () => FilledInput_default,
    FormControl: () => FormControl_default,
    FormControlLabel: () => FormControlLabel_default,
    FormGroup: () => FormGroup_default,
    FormHelperText: () => FormHelperText_default,
    FormLabel: () => FormLabel_default,
    FormLabelRoot: () => FormLabelRoot,
    GlobalStyles: () => GlobalStyles_default2,
    Grid: () => Grid_default,
    Grow: () => Grow_default,
    Hidden: () => Hidden_default,
    Icon: () => Icon_default,
    IconButton: () => IconButton_default,
    ImageList: () => ImageList_default,
    ImageListItem: () => ImageListItem_default,
    ImageListItemBar: () => ImageListItemBar_default,
    Input: () => Input_default,
    InputAdornment: () => InputAdornment_default,
    InputBase: () => InputBase_default,
    InputLabel: () => InputLabel_default,
    LinearProgress: () => LinearProgress_default,
    Link: () => Link_default,
    List: () => List_default,
    ListItem: () => ListItem_default,
    ListItemAvatar: () => ListItemAvatar_default,
    ListItemButton: () => ListItemButton_default,
    ListItemIcon: () => ListItemIcon_default,
    ListItemSecondaryAction: () => ListItemSecondaryAction_default,
    ListItemText: () => ListItemText_default,
    ListSubheader: () => ListSubheader_default,
    Menu: () => Menu_default,
    MenuItem: () => MenuItem_default,
    MenuList: () => MenuList_default,
    MobileStepper: () => MobileStepper_default,
    Modal: () => Modal_default,
    ModalManager: () => ModalManager,
    NativeSelect: () => NativeSelect_default,
    NoSsr: () => NoSsr,
    OutlinedInput: () => OutlinedInput_default,
    Pagination: () => Pagination_default,
    PaginationItem: () => PaginationItem_default,
    Paper: () => Paper_default,
    Popover: () => Popover_default,
    PopoverPaper: () => PopoverPaper,
    PopoverRoot: () => PopoverRoot,
    Popper: () => Popper_default,
    Portal: () => Portal,
    Radio: () => Radio_default,
    RadioGroup: () => RadioGroup_default,
    Rating: () => Rating_default,
    ScopedCssBaseline: () => ScopedCssBaseline_default,
    Select: () => Select_default,
    Skeleton: () => Skeleton_default,
    Slide: () => Slide_default,
    Slider: () => Slider_default,
    SliderMark: () => SliderMark,
    SliderMarkLabel: () => SliderMarkLabel,
    SliderRail: () => SliderRail,
    SliderRoot: () => SliderRoot,
    SliderThumb: () => SliderThumb,
    SliderTrack: () => SliderTrack,
    SliderValueLabel: () => SliderValueLabel2,
    Snackbar: () => Snackbar_default,
    SnackbarContent: () => SnackbarContent_default,
    SpeedDial: () => SpeedDial_default,
    SpeedDialAction: () => SpeedDialAction_default,
    SpeedDialIcon: () => SpeedDialIcon_default,
    Stack: () => Stack_default,
    Step: () => Step_default,
    StepButton: () => StepButton_default,
    StepConnector: () => StepConnector_default,
    StepContent: () => StepContent_default,
    StepContext: () => StepContext_default,
    StepIcon: () => StepIcon_default,
    StepLabel: () => StepLabel_default,
    Stepper: () => Stepper_default,
    StepperContext: () => StepperContext_default,
    StyledEngineProvider: () => import_styled_engine7.StyledEngineProvider,
    SvgIcon: () => import_SvgIcon3.default,
    SwipeableDrawer: () => SwipeableDrawer_default,
    Switch: () => Switch_default,
    THEME_ID: () => identifier_default,
    Tab: () => Tab_default,
    TabScrollButton: () => TabScrollButton_default,
    Table: () => Table_default,
    TableBody: () => TableBody_default,
    TableCell: () => TableCell_default,
    TableContainer: () => TableContainer_default,
    TableFooter: () => TableFooter_default,
    TableHead: () => TableHead_default,
    TablePagination: () => TablePagination_default,
    TableRow: () => TableRow_default,
    TableSortLabel: () => TableSortLabel_default,
    Tabs: () => Tabs_default,
    TextField: () => TextField_default,
    TextareaAutosize: () => TextareaAutosize,
    ThemeProvider: () => ThemeProvider5,
    ToggleButton: () => ToggleButton_default,
    ToggleButtonGroup: () => ToggleButtonGroup_default,
    Toolbar: () => Toolbar_default,
    Tooltip: () => Tooltip_default,
    Typography: () => Typography_default,
    Unstable_Grid2: () => Grid2_default,
    Unstable_TrapFocus: () => FocusTrap,
    Zoom: () => Zoom_default,
    accordionActionsClasses: () => accordionActionsClasses_default,
    accordionClasses: () => accordionClasses_default,
    accordionDetailsClasses: () => accordionDetailsClasses_default,
    accordionSummaryClasses: () => accordionSummaryClasses_default,
    adaptV4Theme: () => adaptV4Theme,
    alertClasses: () => alertClasses_default,
    alertTitleClasses: () => alertTitleClasses_default,
    alpha: () => alpha,
    appBarClasses: () => appBarClasses_default,
    autocompleteClasses: () => autocompleteClasses_default,
    avatarClasses: () => avatarClasses_default,
    avatarGroupClasses: () => avatarGroupClasses_default,
    backdropClasses: () => backdropClasses_default,
    badgeClasses: () => badgeClasses_default,
    bottomNavigationActionClasses: () => bottomNavigationActionClasses_default,
    bottomNavigationClasses: () => bottomNavigationClasses_default,
    boxClasses: () => boxClasses_default,
    breadcrumbsClasses: () => breadcrumbsClasses_default,
    buttonBaseClasses: () => buttonBaseClasses_default,
    buttonClasses: () => buttonClasses_default,
    buttonGroupClasses: () => buttonGroupClasses_default,
    cardActionAreaClasses: () => cardActionAreaClasses_default,
    cardActionsClasses: () => cardActionsClasses_default,
    cardClasses: () => cardClasses_default,
    cardContentClasses: () => cardContentClasses_default,
    cardHeaderClasses: () => cardHeaderClasses_default,
    cardMediaClasses: () => cardMediaClasses_default,
    checkboxClasses: () => checkboxClasses_default,
    chipClasses: () => chipClasses_default,
    circularProgressClasses: () => circularProgressClasses_default,
    collapseClasses: () => collapseClasses_default,
    colors: () => colors_exports,
    containerClasses: () => containerClasses_default,
    createFilterOptions: () => createFilterOptions,
    createMuiTheme: () => createMuiTheme,
    createStyles: () => createStyles,
    createTheme: () => createTheme_default2,
    css: () => import_styled_engine7.css,
    darkScrollbar: () => darkScrollbar,
    darken: () => darken,
    decomposeColor: () => decomposeColor,
    dialogActionsClasses: () => dialogActionsClasses_default,
    dialogClasses: () => dialogClasses_default,
    dialogContentClasses: () => dialogContentClasses_default,
    dialogContentTextClasses: () => dialogContentTextClasses_default,
    dialogTitleClasses: () => dialogTitleClasses_default,
    dividerClasses: () => dividerClasses_default,
    drawerClasses: () => drawerClasses_default,
    duration: () => duration,
    easing: () => easing,
    emphasize: () => emphasize,
    experimentalStyled: () => styled_default2,
    experimental_extendTheme: () => extendTheme,
    experimental_sx: () => experimental_sx,
    fabClasses: () => fabClasses_default,
    filledInputClasses: () => filledInputClasses_default,
    formControlClasses: () => formControlClasses_default,
    formControlLabelClasses: () => formControlLabelClasses_default,
    formGroupClasses: () => formGroupClasses_default,
    formHelperTextClasses: () => formHelperTextClasses_default,
    formLabelClasses: () => formLabelClasses_default,
    generateUtilityClass: () => import_utils54.unstable_generateUtilityClass,
    generateUtilityClasses: () => import_utils55.unstable_generateUtilityClasses,
    getAccordionActionsUtilityClass: () => getAccordionActionsUtilityClass,
    getAccordionDetailsUtilityClass: () => getAccordionDetailsUtilityClass,
    getAccordionSummaryUtilityClass: () => getAccordionSummaryUtilityClass,
    getAccordionUtilityClass: () => getAccordionUtilityClass,
    getAlertTitleUtilityClass: () => getAlertTitleUtilityClass,
    getAlertUtilityClass: () => getAlertUtilityClass,
    getAppBarUtilityClass: () => getAppBarUtilityClass,
    getAutocompleteUtilityClass: () => getAutocompleteUtilityClass,
    getAvatarGroupUtilityClass: () => getAvatarGroupUtilityClass,
    getAvatarUtilityClass: () => getAvatarUtilityClass,
    getBackdropUtilityClass: () => getBackdropUtilityClass,
    getBadgeUtilityClass: () => getBadgeUtilityClass,
    getBottomNavigationActionUtilityClass: () => getBottomNavigationActionUtilityClass,
    getBottomNavigationUtilityClass: () => getBottomNavigationUtilityClass,
    getBreadcrumbsUtilityClass: () => getBreadcrumbsUtilityClass,
    getButtonBaseUtilityClass: () => getButtonBaseUtilityClass,
    getButtonGroupUtilityClass: () => getButtonGroupUtilityClass,
    getButtonUtilityClass: () => getButtonUtilityClass,
    getCardActionAreaUtilityClass: () => getCardActionAreaUtilityClass,
    getCardActionsUtilityClass: () => getCardActionsUtilityClass,
    getCardContentUtilityClass: () => getCardContentUtilityClass,
    getCardHeaderUtilityClass: () => getCardHeaderUtilityClass,
    getCardMediaUtilityClass: () => getCardMediaUtilityClass,
    getCardUtilityClass: () => getCardUtilityClass,
    getCheckboxUtilityClass: () => getCheckboxUtilityClass,
    getChipUtilityClass: () => getChipUtilityClass,
    getCircularProgressUtilityClass: () => getCircularProgressUtilityClass,
    getCollapseUtilityClass: () => getCollapseUtilityClass,
    getContainerUtilityClass: () => getContainerUtilityClass,
    getContrastRatio: () => getContrastRatio,
    getDialogActionsUtilityClass: () => getDialogActionsUtilityClass,
    getDialogContentTextUtilityClass: () => getDialogContentTextUtilityClass,
    getDialogContentUtilityClass: () => getDialogContentUtilityClass,
    getDialogTitleUtilityClass: () => getDialogTitleUtilityClass,
    getDialogUtilityClass: () => getDialogUtilityClass,
    getDividerUtilityClass: () => getDividerUtilityClass,
    getDrawerUtilityClass: () => getDrawerUtilityClass,
    getFabUtilityClass: () => getFabUtilityClass,
    getFilledInputUtilityClass: () => getFilledInputUtilityClass,
    getFormControlLabelUtilityClasses: () => getFormControlLabelUtilityClasses,
    getFormControlUtilityClasses: () => getFormControlUtilityClasses,
    getFormGroupUtilityClass: () => getFormGroupUtilityClass,
    getFormHelperTextUtilityClasses: () => getFormHelperTextUtilityClasses,
    getFormLabelUtilityClasses: () => getFormLabelUtilityClasses,
    getGrid2UtilityClass: () => getGrid2UtilityClass,
    getGridUtilityClass: () => getGridUtilityClass,
    getIconButtonUtilityClass: () => getIconButtonUtilityClass,
    getIconUtilityClass: () => getIconUtilityClass,
    getImageListItemBarUtilityClass: () => getImageListItemBarUtilityClass,
    getImageListItemUtilityClass: () => getImageListItemUtilityClass,
    getImageListUtilityClass: () => getImageListUtilityClass,
    getInitColorSchemeScript: () => getInitColorSchemeScript2,
    getInputAdornmentUtilityClass: () => getInputAdornmentUtilityClass,
    getInputBaseUtilityClass: () => getInputBaseUtilityClass,
    getInputLabelUtilityClasses: () => getInputLabelUtilityClasses,
    getInputUtilityClass: () => getInputUtilityClass,
    getLinearProgressUtilityClass: () => getLinearProgressUtilityClass,
    getLinkUtilityClass: () => getLinkUtilityClass,
    getListItemAvatarUtilityClass: () => getListItemAvatarUtilityClass,
    getListItemButtonUtilityClass: () => getListItemButtonUtilityClass,
    getListItemIconUtilityClass: () => getListItemIconUtilityClass,
    getListItemSecondaryActionClassesUtilityClass: () => getListItemSecondaryActionClassesUtilityClass,
    getListItemTextUtilityClass: () => getListItemTextUtilityClass,
    getListItemUtilityClass: () => getListItemUtilityClass,
    getListSubheaderUtilityClass: () => getListSubheaderUtilityClass,
    getListUtilityClass: () => getListUtilityClass,
    getLuminance: () => getLuminance,
    getMenuItemUtilityClass: () => getMenuItemUtilityClass,
    getMenuUtilityClass: () => getMenuUtilityClass,
    getMobileStepperUtilityClass: () => getMobileStepperUtilityClass,
    getModalUtilityClass: () => getModalUtilityClass,
    getNativeSelectUtilityClasses: () => getNativeSelectUtilityClasses,
    getOffsetLeft: () => getOffsetLeft,
    getOffsetTop: () => getOffsetTop,
    getOutlinedInputUtilityClass: () => getOutlinedInputUtilityClass,
    getOverlayAlpha: () => getOverlayAlpha_default,
    getPaginationItemUtilityClass: () => getPaginationItemUtilityClass,
    getPaginationUtilityClass: () => getPaginationUtilityClass,
    getPaperUtilityClass: () => getPaperUtilityClass,
    getPopoverUtilityClass: () => getPopoverUtilityClass,
    getRadioGroupUtilityClass: () => getRadioGroupUtilityClass,
    getRadioUtilityClass: () => getRadioUtilityClass,
    getRatingUtilityClass: () => getRatingUtilityClass,
    getScopedCssBaselineUtilityClass: () => getScopedCssBaselineUtilityClass,
    getSelectUtilityClasses: () => getSelectUtilityClasses,
    getSkeletonUtilityClass: () => getSkeletonUtilityClass,
    getSliderUtilityClass: () => getSliderUtilityClass,
    getSnackbarContentUtilityClass: () => getSnackbarContentUtilityClass,
    getSnackbarUtilityClass: () => getSnackbarUtilityClass,
    getSpeedDialActionUtilityClass: () => getSpeedDialActionUtilityClass,
    getSpeedDialIconUtilityClass: () => getSpeedDialIconUtilityClass,
    getSpeedDialUtilityClass: () => getSpeedDialUtilityClass,
    getStepButtonUtilityClass: () => getStepButtonUtilityClass,
    getStepConnectorUtilityClass: () => getStepConnectorUtilityClass,
    getStepContentUtilityClass: () => getStepContentUtilityClass,
    getStepIconUtilityClass: () => getStepIconUtilityClass,
    getStepLabelUtilityClass: () => getStepLabelUtilityClass,
    getStepUtilityClass: () => getStepUtilityClass,
    getStepperUtilityClass: () => getStepperUtilityClass,
    getSwitchUtilityClass: () => getSwitchUtilityClass,
    getTabScrollButtonUtilityClass: () => getTabScrollButtonUtilityClass,
    getTabUtilityClass: () => getTabUtilityClass,
    getTableBodyUtilityClass: () => getTableBodyUtilityClass,
    getTableCellUtilityClass: () => getTableCellUtilityClass,
    getTableContainerUtilityClass: () => getTableContainerUtilityClass,
    getTableFooterUtilityClass: () => getTableFooterUtilityClass,
    getTableHeadUtilityClass: () => getTableHeadUtilityClass,
    getTablePaginationUtilityClass: () => getTablePaginationUtilityClass,
    getTableRowUtilityClass: () => getTableRowUtilityClass,
    getTableSortLabelUtilityClass: () => getTableSortLabelUtilityClass,
    getTableUtilityClass: () => getTableUtilityClass,
    getTabsUtilityClass: () => getTabsUtilityClass,
    getTextFieldUtilityClass: () => getTextFieldUtilityClass,
    getToggleButtonGroupUtilityClass: () => getToggleButtonGroupUtilityClass,
    getToggleButtonUtilityClass: () => getToggleButtonUtilityClass,
    getToolbarUtilityClass: () => getToolbarUtilityClass,
    getTooltipUtilityClass: () => getTooltipUtilityClass,
    getTouchRippleUtilityClass: () => getTouchRippleUtilityClass,
    getTypographyUtilityClass: () => getTypographyUtilityClass,
    grid2Classes: () => grid2Classes_default,
    gridClasses: () => gridClasses_default,
    hexToRgb: () => hexToRgb,
    hslToRgb: () => hslToRgb,
    iconButtonClasses: () => iconButtonClasses_default,
    iconClasses: () => iconClasses_default,
    imageListClasses: () => imageListClasses_default,
    imageListItemBarClasses: () => imageListItemBarClasses_default,
    imageListItemClasses: () => imageListItemClasses_default,
    inputAdornmentClasses: () => inputAdornmentClasses_default,
    inputBaseClasses: () => inputBaseClasses_default,
    inputClasses: () => inputClasses_default,
    inputLabelClasses: () => inputLabelClasses_default,
    keyframes: () => import_styled_engine7.keyframes,
    lighten: () => lighten,
    linearProgressClasses: () => linearProgressClasses_default,
    linkClasses: () => linkClasses_default,
    listClasses: () => listClasses_default,
    listItemAvatarClasses: () => listItemAvatarClasses_default,
    listItemButtonClasses: () => listItemButtonClasses_default,
    listItemClasses: () => listItemClasses_default,
    listItemIconClasses: () => listItemIconClasses_default,
    listItemSecondaryActionClasses: () => listItemSecondaryActionClasses_default,
    listItemTextClasses: () => listItemTextClasses_default,
    listSubheaderClasses: () => listSubheaderClasses_default,
    makeStyles: () => makeStyles,
    menuClasses: () => menuClasses_default,
    menuItemClasses: () => menuItemClasses_default,
    mobileStepperClasses: () => mobileStepperClasses_default,
    modalClasses: () => modalClasses_default,
    nativeSelectClasses: () => nativeSelectClasses_default,
    outlinedInputClasses: () => outlinedInputClasses_default,
    paginationClasses: () => paginationClasses_default,
    paginationItemClasses: () => paginationItemClasses_default,
    paperClasses: () => paperClasses_default,
    popoverClasses: () => popoverClasses_default,
    private_createMixins: () => createMixins,
    private_createTypography: () => createTypography,
    private_excludeVariablesFromRoot: () => excludeVariablesFromRoot_default,
    radioClasses: () => radioClasses_default,
    radioGroupClasses: () => radioGroupClasses_default,
    ratingClasses: () => ratingClasses_default,
    recomposeColor: () => recomposeColor,
    responsiveFontSizes: () => responsiveFontSizes,
    rgbToHex: () => rgbToHex,
    scopedCssBaselineClasses: () => scopedCssBaselineClasses_default,
    selectClasses: () => selectClasses_default,
    shouldSkipGeneratingVar: () => shouldSkipGeneratingVar,
    skeletonClasses: () => skeletonClasses_default,
    sliderClasses: () => sliderClasses_default,
    snackbarClasses: () => snackbarClasses_default,
    snackbarContentClasses: () => snackbarContentClasses_default,
    speedDialActionClasses: () => speedDialActionClasses_default,
    speedDialClasses: () => speedDialClasses_default,
    speedDialIconClasses: () => speedDialIconClasses_default,
    stackClasses: () => stackClasses_default,
    stepButtonClasses: () => stepButtonClasses_default,
    stepClasses: () => stepClasses_default,
    stepConnectorClasses: () => stepConnectorClasses_default,
    stepContentClasses: () => stepContentClasses_default,
    stepIconClasses: () => stepIconClasses_default,
    stepLabelClasses: () => stepLabelClasses_default,
    stepperClasses: () => stepperClasses_default,
    styled: () => styled_default2,
    switchClasses: () => switchClasses_default,
    tabClasses: () => tabClasses_default,
    tabScrollButtonClasses: () => tabScrollButtonClasses_default,
    tableBodyClasses: () => tableBodyClasses_default,
    tableCellClasses: () => tableCellClasses_default,
    tableClasses: () => tableClasses_default,
    tableContainerClasses: () => tableContainerClasses_default,
    tableFooterClasses: () => tableFooterClasses_default,
    tableHeadClasses: () => tableHeadClasses_default,
    tablePaginationClasses: () => tablePaginationClasses_default,
    tableRowClasses: () => tableRowClasses_default,
    tableSortLabelClasses: () => tableSortLabelClasses_default,
    tabsClasses: () => tabsClasses_default,
    textFieldClasses: () => textFieldClasses_default,
    toggleButtonClasses: () => toggleButtonClasses_default,
    toggleButtonGroupClasses: () => toggleButtonGroupClasses_default,
    toolbarClasses: () => toolbarClasses_default,
    tooltipClasses: () => tooltipClasses_default,
    touchRippleClasses: () => touchRippleClasses_default,
    typographyClasses: () => typographyClasses_default,
    unstable_composeClasses: () => import_utils10.unstable_composeClasses,
    unstable_createMuiStrictModeTheme: () => createMuiStrictModeTheme,
    unstable_getUnit: () => getUnit,
    unstable_toUnitless: () => toUnitless,
    useAutocomplete: () => useAutocomplete,
    useColorScheme: () => useColorScheme,
    useFormControl: () => useFormControl,
    useMediaQuery: () => useMediaQuery,
    usePagination: () => usePagination,
    useRadioGroup: () => useRadioGroup,
    useScrollTrigger: () => useScrollTrigger,
    useStepContext: () => useStepContext,
    useStepperContext: () => useStepperContext,
    useTheme: () => useTheme6,
    useThemeProps: () => useThemeProps2,
    withStyles: () => withStyles,
    withTheme: () => withTheme2
  });

  // node_modules/@mui/material/colors/index.js
  var colors_exports = {};
  __export(colors_exports, {
    amber: () => amber_default,
    blue: () => blue_default,
    blueGrey: () => blueGrey_default,
    brown: () => brown_default,
    common: () => common_default,
    cyan: () => cyan_default,
    deepOrange: () => deepOrange_default,
    deepPurple: () => deepPurple_default,
    green: () => green_default,
    grey: () => grey_default,
    indigo: () => indigo_default,
    lightBlue: () => lightBlue_default,
    lightGreen: () => lightGreen_default,
    lime: () => lime_default,
    orange: () => orange_default,
    pink: () => pink_default,
    purple: () => purple_default,
    red: () => red_default,
    teal: () => teal_default,
    yellow: () => yellow_default
  });

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/pink.js
  var pink = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
  };
  var pink_default = pink;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/deepPurple.js
  var deepPurple = {
    50: "#ede7f6",
    100: "#d1c4e9",
    200: "#b39ddb",
    300: "#9575cd",
    400: "#7e57c2",
    500: "#673ab7",
    600: "#5e35b1",
    700: "#512da8",
    800: "#4527a0",
    900: "#311b92",
    A100: "#b388ff",
    A200: "#7c4dff",
    A400: "#651fff",
    A700: "#6200ea"
  };
  var deepPurple_default = deepPurple;

  // node_modules/@mui/material/colors/indigo.js
  var indigo = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
  };
  var indigo_default = indigo;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/cyan.js
  var cyan = {
    50: "#e0f7fa",
    100: "#b2ebf2",
    200: "#80deea",
    300: "#4dd0e1",
    400: "#26c6da",
    500: "#00bcd4",
    600: "#00acc1",
    700: "#0097a7",
    800: "#00838f",
    900: "#006064",
    A100: "#84ffff",
    A200: "#18ffff",
    A400: "#00e5ff",
    A700: "#00b8d4"
  };
  var cyan_default = cyan;

  // node_modules/@mui/material/colors/teal.js
  var teal = {
    50: "#e0f2f1",
    100: "#b2dfdb",
    200: "#80cbc4",
    300: "#4db6ac",
    400: "#26a69a",
    500: "#009688",
    600: "#00897b",
    700: "#00796b",
    800: "#00695c",
    900: "#004d40",
    A100: "#a7ffeb",
    A200: "#64ffda",
    A400: "#1de9b6",
    A700: "#00bfa5"
  };
  var teal_default = teal;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/colors/lightGreen.js
  var lightGreen = {
    50: "#f1f8e9",
    100: "#dcedc8",
    200: "#c5e1a5",
    300: "#aed581",
    400: "#9ccc65",
    500: "#8bc34a",
    600: "#7cb342",
    700: "#689f38",
    800: "#558b2f",
    900: "#33691e",
    A100: "#ccff90",
    A200: "#b2ff59",
    A400: "#76ff03",
    A700: "#64dd17"
  };
  var lightGreen_default = lightGreen;

  // node_modules/@mui/material/colors/lime.js
  var lime = {
    50: "#f9fbe7",
    100: "#f0f4c3",
    200: "#e6ee9c",
    300: "#dce775",
    400: "#d4e157",
    500: "#cddc39",
    600: "#c0ca33",
    700: "#afb42b",
    800: "#9e9d24",
    900: "#827717",
    A100: "#f4ff81",
    A200: "#eeff41",
    A400: "#c6ff00",
    A700: "#aeea00"
  };
  var lime_default = lime;

  // node_modules/@mui/material/colors/yellow.js
  var yellow = {
    50: "#fffde7",
    100: "#fff9c4",
    200: "#fff59d",
    300: "#fff176",
    400: "#ffee58",
    500: "#ffeb3b",
    600: "#fdd835",
    700: "#fbc02d",
    800: "#f9a825",
    900: "#f57f17",
    A100: "#ffff8d",
    A200: "#ffff00",
    A400: "#ffea00",
    A700: "#ffd600"
  };
  var yellow_default = yellow;

  // node_modules/@mui/material/colors/amber.js
  var amber = {
    50: "#fff8e1",
    100: "#ffecb3",
    200: "#ffe082",
    300: "#ffd54f",
    400: "#ffca28",
    500: "#ffc107",
    600: "#ffb300",
    700: "#ffa000",
    800: "#ff8f00",
    900: "#ff6f00",
    A100: "#ffe57f",
    A200: "#ffd740",
    A400: "#ffc400",
    A700: "#ffab00"
  };
  var amber_default = amber;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/deepOrange.js
  var deepOrange = {
    50: "#fbe9e7",
    100: "#ffccbc",
    200: "#ffab91",
    300: "#ff8a65",
    400: "#ff7043",
    500: "#ff5722",
    600: "#f4511e",
    700: "#e64a19",
    800: "#d84315",
    900: "#bf360c",
    A100: "#ff9e80",
    A200: "#ff6e40",
    A400: "#ff3d00",
    A700: "#dd2c00"
  };
  var deepOrange_default = deepOrange;

  // node_modules/@mui/material/colors/brown.js
  var brown = {
    50: "#efebe9",
    100: "#d7ccc8",
    200: "#bcaaa4",
    300: "#a1887f",
    400: "#8d6e63",
    500: "#795548",
    600: "#6d4c41",
    700: "#5d4037",
    800: "#4e342e",
    900: "#3e2723",
    A100: "#d7ccc8",
    A200: "#bcaaa4",
    A400: "#8d6e63",
    A700: "#5d4037"
  };
  var brown_default = brown;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/colors/blueGrey.js
  var blueGrey = {
    50: "#eceff1",
    100: "#cfd8dc",
    200: "#b0bec5",
    300: "#90a4ae",
    400: "#78909c",
    500: "#607d8b",
    600: "#546e7a",
    700: "#455a64",
    800: "#37474f",
    900: "#263238",
    A100: "#cfd8dc",
    A200: "#b0bec5",
    A400: "#78909c",
    A700: "#455a64"
  };
  var blueGrey_default = blueGrey;

  // node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // node_modules/@mui/material/styles/adaptV4Theme.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r3, e2) {
    if (null == r3) return {};
    var t2 = {};
    for (var n2 in r3) if ({}.hasOwnProperty.call(r3, n2)) {
      if (-1 !== e2.indexOf(n2)) continue;
      t2[n2] = r3[n2];
    }
    return t2;
  }

  // node_modules/@mui/system/esm/index.js
  var import_styled_engine7 = __toESM(require_node());

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var React6 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_styled_engine2 = __toESM(require_node());

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  init_extends();
  var import_deepmerge3 = __toESM(require_deepmerge2());

  // node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  init_extends();
  var _excluded = ["values", "unit", "step"];
  var sortBreakpointsValues = (values3) => {
    const breakpointsAsArray = Object.keys(values3).map((key) => ({
      key,
      val: values3[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints2) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values3 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints2, other = _objectWithoutPropertiesLoose(breakpoints2, _excluded);
    const sortedValues = sortBreakpointsValues(values3);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys.indexOf(end2);
      return `@media (min-width:${typeof values3[start2] === "number" ? values3[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@mui/system/esm/responsivePropType.js
  var import_prop_types = __toESM(require_prop_types());
  var responsivePropType = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.object, import_prop_types.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@mui/system/esm/breakpoints.js
  init_extends();
  var import_deepmerge2 = __toESM(require_deepmerge2());

  // node_modules/@mui/system/esm/merge.js
  var import_deepmerge = __toESM(require_deepmerge2());
  function merge2(acc, item) {
    if (!item) {
      return acc;
    }
    return (0, import_deepmerge.default)(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  var merge_default = merge2;

  // node_modules/@mui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  var defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys2, style4) {
    return breakpointKeys2.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style4);
  }
  function mergeBreakpointsInOrder(breakpointsInput, ...styles8) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [emptyBreakpoints, ...styles8].reduce((prev2, next2) => (0, import_deepmerge2.default)(prev2, next2), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i2) => {
        if (i2 < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys.reduce((acc, breakpoint, i2) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i2] != null ? breakpointValues[i2] : breakpointValues[previous];
        previous = i2;
      } else if (typeof breakpointValues === "object") {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        previous = breakpoint;
      } else {
        acc[breakpoint] = breakpointValues;
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/system/esm/style.js
  var import_capitalize = __toESM(require_capitalize2());
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn2 = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn2.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn2.filterProps = [prop];
    return fn2;
  }
  var style_default = style;

  // node_modules/@mui/system/esm/memoize.js
  function memoize2(fn2) {
    const cache = {};
    return (arg) => {
      if (cache[arg] === void 0) {
        cache[arg] = fn2(arg);
      }
      return cache[arg];
    };
  }

  // node_modules/@mui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize2((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a2, b2] = prop.split("");
    const property = properties[a2];
    const direction2 = directions[b2] || "";
    return Array.isArray(direction2) ? direction2.map((dir) => property + dir) : [property + direction2];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;

  // node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  var import_capitalize2 = __toESM(require_capitalize2());

  // node_modules/@mui/system/esm/compose.js
  function compose(...styles8) {
    const handlers = styles8.reduce((acc, style4) => {
      style4.filterProps.forEach((prop) => {
        acc[prop] = style4;
      });
      return acc;
    }, {});
    const fn2 = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn2.propTypes = true ? styles8.reduce((acc, style4) => Object.assign(acc, style4.propTypes), {}) : {};
    fn2.filterProps = styles8.reduce((acc, style4) => acc.concat(style4.filterProps), []);
    return fn2;
  }
  var compose_default = compose;

  // node_modules/@mui/system/esm/borders.js
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform) {
    return style_default({
      prop,
      themeKey: "borders",
      transform
    });
  }
  var border = createBorderStyle("border", borderTransform);
  var borderTop = createBorderStyle("borderTop", borderTransform);
  var borderRight = createBorderStyle("borderRight", borderTransform);
  var borderBottom = createBorderStyle("borderBottom", borderTransform);
  var borderLeft = createBorderStyle("borderLeft", borderTransform);
  var borderColor = createBorderStyle("borderColor");
  var borderTopColor = createBorderStyle("borderTopColor");
  var borderRightColor = createBorderStyle("borderRightColor");
  var borderBottomColor = createBorderStyle("borderBottomColor");
  var borderLeftColor = createBorderStyle("borderLeftColor");
  var outline = createBorderStyle("outline", borderTransform);
  var outlineColor = createBorderStyle("outlineColor");
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

  // node_modules/@mui/system/esm/cssGrid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  // node_modules/@mui/system/esm/palette.js
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  var color = style_default({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var palette = compose_default(color, bgcolor, backgroundColor);

  // node_modules/@mui/system/esm/sizing.js
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform: sizingTransform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform: sizingTransform
  });
  var height = style_default({
    prop: "height",
    transform: sizingTransform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform: sizingTransform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform: sizingTransform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

  // node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
  var defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  var defaultSxConfig_default = defaultSxConfig;

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme, config) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style4
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style4) {
        return style4(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize2.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx5(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig_default;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css3 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config[styleKey]) {
                css3 = merge_default(css3, getThemeValue(styleKey, value, theme, config));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css3[styleKey] = styleFunctionSx5({
                    sx: value,
                    theme
                  });
                } else {
                  css3 = merge_default(css3, breakpointsValues);
                }
              }
            } else {
              css3 = merge_default(css3, getThemeValue(styleKey, value, theme, config));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css3);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx5;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@mui/system/esm/createTheme/applyStyles.js
  function applyStyles(key, styles8) {
    const theme = this;
    if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
      const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
      return {
        [selector]: styles8
      };
    }
    if (theme.palette.mode === key) {
      return styles8;
    }
    return {};
  }

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  var _excluded2 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded2);
    const breakpoints2 = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = (0, import_deepmerge3.default)({
      breakpoints: breakpoints2,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends({}, shape_default, shapeInput)
    }, other);
    muiTheme.applyStyles = applyStyles;
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge3.default)(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig_default, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/system/esm/useThemeWithoutDefault.js
  var React5 = __toESM(require_react());
  var import_styled_engine = __toESM(require_node());
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme3(defaultTheme7 = null) {
    const contextTheme = React5.useContext(import_styled_engine.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme7 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme3;

  // node_modules/@mui/system/esm/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme4(defaultTheme7 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme7);
  }
  var useTheme_default = useTheme4;

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function GlobalStyles({
    styles: styles8,
    themeId,
    defaultTheme: defaultTheme7 = {}
  }) {
    const upperTheme = useTheme_default(defaultTheme7);
    const globalStyles = typeof styles8 === "function" ? styles8(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles8;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_styled_engine2.GlobalStyles, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    defaultTheme: import_prop_types2.default.object,
    /**
     * @ignore
     */
    styles: import_prop_types2.default.oneOfType([import_prop_types2.default.array, import_prop_types2.default.func, import_prop_types2.default.number, import_prop_types2.default.object, import_prop_types2.default.string, import_prop_types2.default.bool]),
    /**
     * @ignore
     */
    themeId: import_prop_types2.default.string
  } : void 0;
  var GlobalStyles_default = GlobalStyles;

  // node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
  init_extends();
  var import_deepmerge4 = __toESM(require_deepmerge2());
  var _excluded3 = ["sx"];
  var splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig_default;
    Object.keys(props).forEach((prop) => {
      if (config[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!(0, import_deepmerge4.isPlainObject)(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }

  // node_modules/@mui/system/esm/createBox.js
  init_extends();
  var React7 = __toESM(require_react());

  // node_modules/clsx/dist/clsx.mjs
  function r(e2) {
    var t2, f, n2 = "";
    if ("string" == typeof e2 || "number" == typeof e2) n2 += e2;
    else if ("object" == typeof e2) if (Array.isArray(e2)) {
      var o2 = e2.length;
      for (t2 = 0; t2 < o2; t2++) e2[t2] && (f = r(e2[t2])) && (n2 && (n2 += " "), n2 += f);
    } else for (f in e2) e2[f] && (n2 && (n2 += " "), n2 += f);
    return n2;
  }
  function clsx() {
    for (var e2, t2, f = 0, n2 = "", o2 = arguments.length; f < o2; f++) (e2 = arguments[f]) && (t2 = r(e2)) && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  var clsx_default = clsx;

  // node_modules/@mui/system/esm/createBox.js
  var import_styled_engine3 = __toESM(require_node());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var _excluded4 = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme7,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = (0, import_styled_engine3.default)("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx_default);
    const Box2 = /* @__PURE__ */ React7.forwardRef(function Box3(inProps, ref) {
      const theme = useTheme_default(defaultTheme7);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded4);
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx_default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme[themeId] || theme : theme
      }, other));
    });
    return Box2;
  }

  // node_modules/@mui/system/esm/createStyled.js
  init_extends();
  var import_styled_engine4 = __toESM(require_node());
  var import_deepmerge5 = __toESM(require_deepmerge2());
  var import_capitalize3 = __toESM(require_capitalize2());
  var import_getDisplayName = __toESM(require_getDisplayName2());
  var _excluded5 = ["ownerState"];
  var _excluded22 = ["variants"];
  var _excluded32 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var systemDefaultTheme2 = createTheme_default();
  var lowercaseFirstLetter = (string) => {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme7,
    theme,
    themeId
  }) {
    return isEmpty(theme) ? defaultTheme7 : theme[themeId] || theme;
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (props, styles8) => styles8[slot];
  }
  function processStyleArg(callableStyle, _ref) {
    let {
      ownerState
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded5);
    const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle(_extends({
      ownerState
    }, props)) : callableStyle;
    if (Array.isArray(resolvedStylesArg)) {
      return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg(resolvedStyle, _extends({
        ownerState
      }, props)));
    }
    if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
      const {
        variants = []
      } = resolvedStylesArg, otherStyles = _objectWithoutPropertiesLoose(resolvedStylesArg, _excluded22);
      let result = otherStyles;
      variants.forEach((variant) => {
        let isMatch = true;
        if (typeof variant.props === "function") {
          isMatch = variant.props(_extends({
            ownerState
          }, props, ownerState));
        } else {
          Object.keys(variant.props).forEach((key) => {
            if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
              isMatch = false;
            }
          });
        }
        if (isMatch) {
          if (!Array.isArray(result)) {
            result = [result];
          }
          result.push(typeof variant.style === "function" ? variant.style(_extends({
            ownerState
          }, props, ownerState)) : variant.style);
        }
      });
      return result;
    }
    return resolvedStylesArg;
  }
  function createStyled3(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme7 = systemDefaultTheme2,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx_default(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme: defaultTheme7,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      (0, import_styled_engine4.internal_processStyles)(tag, (styles8) => styles8.filter((style4) => !(style4 != null && style4.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver: overridesResolver8 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded32);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let label;
      if (true) {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = (0, import_styled_engine4.default)(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const transformStyleArg = (stylesArg) => {
        if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, import_deepmerge5.isPlainObject)(stylesArg)) {
          return (props) => processStyleArg(stylesArg, _extends({}, props, {
            theme: resolveTheme({
              theme: props.theme,
              defaultTheme: defaultTheme7,
              themeId
            })
          }));
        }
        return stylesArg;
      };
      const muiStyledResolver = (styleArg, ...expressions) => {
        let transformedStyleArg = transformStyleArg(styleArg);
        const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
        if (componentName && overridesResolver8) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme7,
              themeId
            }));
            if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
              return null;
            }
            const styleOverrides = theme.components[componentName].styleOverrides;
            const resolvedStyleOverrides = {};
            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
              resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, _extends({}, props, {
                theme
              }));
            });
            return overridesResolver8(props, resolvedStyleOverrides);
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            var _theme$components;
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme7,
              themeId
            }));
            const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
            return processStyleArg({
              variants: themeVariants
            }, _extends({}, props, {
              theme
            }));
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        }
        const Component2 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (true) {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${(0, import_capitalize3.default)(componentSlot || "")}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${(0, import_getDisplayName.default)(tag)})`;
          }
          Component2.displayName = displayName;
        }
        if (tag.muiName) {
          Component2.muiName = tag.muiName;
        }
        return Component2;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }

  // node_modules/@mui/system/esm/styled.js
  var styled2 = createStyled3();
  var styled_default = styled2;

  // node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  var import_resolveProps = __toESM(require_resolveProps2());
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return (0, import_resolveProps.default)(theme.components[name].defaultProps, props);
  }

  // node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme7,
    themeId
  }) {
    let theme = useTheme_default(defaultTheme7);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js
  var React8 = __toESM(require_react());
  var import_useEnhancedEffect = __toESM(require_useEnhancedEffect2());
  function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const [match2, setMatch] = React8.useState(() => {
      if (noSsr && matchMedia) {
        return matchMedia(query).matches;
      }
      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      }
      return defaultMatches;
    });
    (0, import_useEnhancedEffect.default)(() => {
      let active = true;
      if (!matchMedia) {
        return void 0;
      }
      const queryList = matchMedia(query);
      const updateMatch = () => {
        if (active) {
          setMatch(queryList.matches);
        }
      };
      updateMatch();
      queryList.addListener(updateMatch);
      return () => {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia]);
    return match2;
  }
  var maybeReactUseSyncExternalStore = React8["useSyncExternalStore"];
  function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const getDefaultSnapshot = React8.useCallback(() => defaultMatches, [defaultMatches]);
    const getServerSnapshot = React8.useMemo(() => {
      if (noSsr && matchMedia) {
        return () => matchMedia(query).matches;
      }
      if (ssrMatchMedia !== null) {
        const {
          matches
        } = ssrMatchMedia(query);
        return () => matches;
      }
      return getDefaultSnapshot;
    }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
    const [getSnapshot, subscribe] = React8.useMemo(() => {
      if (matchMedia === null) {
        return [getDefaultSnapshot, () => () => {
        }];
      }
      const mediaQueryList = matchMedia(query);
      return [() => mediaQueryList.matches, (notify) => {
        mediaQueryList.addListener(notify);
        return () => {
          mediaQueryList.removeListener(notify);
        };
      }];
    }, [getDefaultSnapshot, matchMedia, query]);
    const match2 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    return match2;
  }
  function useMediaQuery(queryInput, options = {}) {
    const theme = useThemeWithoutDefault_default();
    const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    const {
      defaultMatches = false,
      matchMedia = supportMatchMedia ? window.matchMedia : null,
      ssrMatchMedia = null,
      noSsr = false
    } = getThemeProps({
      name: "MuiUseMediaQuery",
      props: options,
      theme
    });
    if (true) {
      if (typeof queryInput === "function" && theme === null) {
        console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    let query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
    const match2 = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    if (true) {
      React8.useDebugValue({
        query,
        match: match2
      });
    }
    return match2;
  }

  // node_modules/@mui/system/esm/colorManipulator.js
  var import_clamp = __toESM(require_clamp2());
  function clampWrapper(value, min2 = 0, max2 = 1) {
    if (true) {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return (0, import_clamp.default)(value, min2, max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n2) => n2 + n2);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n2, index) => {
      return index < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, import_formatMuiErrorMessage.default)(9, color2));
    }
    let values3 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values3 = values3.split(" ");
      colorSpace = values3.shift();
      if (values3.length === 4 && values3[3].charAt(0) === "/") {
        values3[3] = values3[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, import_formatMuiErrorMessage.default)(10, colorSpace));
      }
    } else {
      values3 = values3.split(",");
    }
    values3 = values3.map((value) => parseFloat(value));
    return {
      type,
      values: values3,
      colorSpace
    };
  }
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values3
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values3 = values3.map((n2, i2) => i2 < 3 ? parseInt(n2, 10) : n2);
    } else if (type.indexOf("hsl") !== -1) {
      values3[1] = `${values3[1]}%`;
      values3[2] = `${values3[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values3 = `${colorSpace} ${values3.join(" ")}`;
    } else {
      values3 = `${values3.join(", ")}`;
    }
    return `${type}(${values3})`;
  }
  function rgbToHex(color2) {
    if (color2.indexOf("#") === 0) {
      return color2;
    }
    const {
      values: values3
    } = decomposeColor(color2);
    return `#${values3.map((n2, i2) => intToHex(i2 === 3 ? Math.round(255 * n2) : n2)).join("")}`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values3
    } = color2;
    const h2 = values3[0];
    const s2 = values3[1] / 100;
    const l2 = values3[2] / 100;
    const a2 = s2 * Math.min(l2, 1 - l2);
    const f = (n2, k = (n2 + h2 / 30) % 12) => l2 - a2 * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values3[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clampWrapper(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (255 - color2.values[i2]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (1 - color2.values[i2]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function emphasize(color2, coefficient = 0.15) {
    return getLuminance(color2) > 0.5 ? darken(color2, coefficient) : lighten(color2, coefficient);
  }

  // node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  init_extends();
  var React13 = __toESM(require_react());
  var import_prop_types5 = __toESM(require_prop_types());

  // node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  init_extends();
  var React11 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());
  var import_utils5 = __toESM(require_node2());

  // node_modules/@mui/private-theming/useTheme/ThemeContext.js
  var React9 = __toESM(require_react());
  var ThemeContext3 = /* @__PURE__ */ React9.createContext(null);
  if (true) {
    ThemeContext3.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext3;

  // node_modules/@mui/private-theming/useTheme/useTheme.js
  var React10 = __toESM(require_react());
  function useTheme5() {
    const theme = React10.useContext(ThemeContext_default);
    if (true) {
      React10.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@mui/private-theming/ThemeProvider/nested.js
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  var nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

  // node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      if (true) {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends({}, outerTheme, localTheme);
  }
  function ThemeProvider3(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme5();
    if (true) {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme = React11.useMemo(() => {
      const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested_default] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ThemeContext_default.Provider, {
      value: theme,
      children
    });
  }
  true ? ThemeProvider3.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types3.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types3.default.oneOfType([import_prop_types3.default.object, import_prop_types3.default.func]).isRequired
  } : void 0;
  if (true) {
    true ? ThemeProvider3.propTypes = (0, import_utils5.exactProp)(ThemeProvider3.propTypes) : void 0;
  }
  var ThemeProvider_default = ThemeProvider3;

  // node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_exactProp = __toESM(require_exactProp2());
  var import_styled_engine5 = __toESM(require_node());

  // node_modules/@mui/system/esm/RtlProvider/index.js
  init_extends();
  var React12 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var _excluded6 = ["value"];
  var RtlContext = /* @__PURE__ */ React12.createContext();
  function RtlProvider(_ref) {
    let {
      value
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded6);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(RtlContext.Provider, _extends({
      value: value != null ? value : true
    }, props));
  }
  true ? RtlProvider.propTypes = {
    children: import_prop_types4.default.node,
    value: import_prop_types4.default.bool
  } : void 0;
  var useRtl = () => {
    const value = React12.useContext(RtlContext);
    return value != null ? value : false;
  };
  var RtlProvider_default = RtlProvider;

  // node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React13.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? _extends({}, upperTheme, {
          [themeId]: mergedTheme
        }) : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? _extends({}, upperTheme, {
        [themeId]: localTheme
      }) : _extends({}, upperTheme, localTheme);
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider4(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useThemeWithoutDefault_default(EMPTY_THEME);
    const upperPrivateTheme = useTheme5() || EMPTY_THEME;
    if (true) {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    const rtlValue = engineTheme.direction === "rtl";
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ThemeProvider_default, {
      theme: privateTheme,
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_styled_engine5.ThemeContext.Provider, {
        value: engineTheme,
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(RtlProvider_default, {
          value: rtlValue,
          children
        })
      })
    });
  }
  true ? ThemeProvider4.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Your component tree.
     */
    children: import_prop_types5.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: import_prop_types5.default.string
  } : void 0;
  if (true) {
    true ? ThemeProvider4.propTypes = (0, import_exactProp.default)(ThemeProvider4.propTypes) : void 0;
  }
  var ThemeProvider_default2 = ThemeProvider4;

  // node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js
  init_extends();
  var React16 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());
  var import_deepmerge6 = __toESM(require_deepmerge2());
  var import_styled_engine6 = __toESM(require_node());

  // node_modules/@mui/system/esm/cssVars/getInitColorSchemeScript.js
  var React14 = __toESM(require_react());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var DEFAULT_MODE_STORAGE_KEY = "mode";
  var DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
  var DEFAULT_ATTRIBUTE = "data-color-scheme";
  function getInitColorSchemeScript(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme = "light",
      defaultDarkColorScheme = "dark",
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      attribute = DEFAULT_ATTRIBUTE,
      colorSchemeNode = "document.documentElement"
    } = options || {};
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("script", {
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: {
        __html: `(function() {
try {
  var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  var colorScheme = '';
  if (mode === 'system') {
    // handle system mode
    var mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
    } else {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
    }
  }
  if (mode === 'light') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  }
  if (mode === 'dark') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  }
  if (colorScheme) {
    ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
  }
} catch(e){}})();`
      }
    }, "mui-color-scheme-init");
  }

  // node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js
  init_extends();
  var React15 = __toESM(require_react());
  function getSystemMode(mode) {
    if (typeof window !== "undefined" && mode === "system") {
      const mql = window.matchMedia("(prefers-color-scheme: dark)");
      if (mql.matches) {
        return "dark";
      }
      return "light";
    }
    return void 0;
  }
  function processState(state, callback) {
    if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
      return callback("light");
    }
    if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
      return callback("dark");
    }
    return void 0;
  }
  function getColorScheme(state) {
    return processState(state, (mode) => {
      if (mode === "light") {
        return state.lightColorScheme;
      }
      if (mode === "dark") {
        return state.darkColorScheme;
      }
      return void 0;
    });
  }
  function initializeValue(key, defaultValue) {
    if (typeof window === "undefined") {
      return void 0;
    }
    let value;
    try {
      value = localStorage.getItem(key) || void 0;
      if (!value) {
        localStorage.setItem(key, defaultValue);
      }
    } catch (e2) {
    }
    return value || defaultValue;
  }
  function useCurrentColorScheme(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme,
      defaultDarkColorScheme,
      supportedColorSchemes = [],
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      storageWindow = typeof window === "undefined" ? void 0 : window
    } = options;
    const joinedColorSchemes = supportedColorSchemes.join(",");
    const [state, setState] = React15.useState(() => {
      const initialMode = initializeValue(modeStorageKey, defaultMode);
      const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
      const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
      return {
        mode: initialMode,
        systemMode: getSystemMode(initialMode),
        lightColorScheme,
        darkColorScheme
      };
    });
    const colorScheme = getColorScheme(state);
    const setMode = React15.useCallback((mode) => {
      setState((currentState) => {
        if (mode === currentState.mode) {
          return currentState;
        }
        const newMode = mode != null ? mode : defaultMode;
        try {
          localStorage.setItem(modeStorageKey, newMode);
        } catch (e2) {
        }
        return _extends({}, currentState, {
          mode: newMode,
          systemMode: getSystemMode(newMode)
        });
      });
    }, [modeStorageKey, defaultMode]);
    const setColorScheme = React15.useCallback((value) => {
      if (!value) {
        setState((currentState) => {
          try {
            localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
            localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
          } catch (e2) {
          }
          return _extends({}, currentState, {
            lightColorScheme: defaultLightColorScheme,
            darkColorScheme: defaultDarkColorScheme
          });
        });
      } else if (typeof value === "string") {
        if (value && !joinedColorSchemes.includes(value)) {
          console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
        } else {
          setState((currentState) => {
            const newState = _extends({}, currentState);
            processState(currentState, (mode) => {
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
              } catch (e2) {
              }
              if (mode === "light") {
                newState.lightColorScheme = value;
              }
              if (mode === "dark") {
                newState.darkColorScheme = value;
              }
            });
            return newState;
          });
        }
      } else {
        setState((currentState) => {
          const newState = _extends({}, currentState);
          const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
          const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
          if (newLightColorScheme) {
            if (!joinedColorSchemes.includes(newLightColorScheme)) {
              console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.lightColorScheme = newLightColorScheme;
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
              } catch (error) {
              }
            }
          }
          if (newDarkColorScheme) {
            if (!joinedColorSchemes.includes(newDarkColorScheme)) {
              console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.darkColorScheme = newDarkColorScheme;
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
              } catch (error) {
              }
            }
          }
          return newState;
        });
      }
    }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
    const handleMediaQuery = React15.useCallback((event) => {
      if (state.mode === "system") {
        setState((currentState) => {
          const systemMode = event != null && event.matches ? "dark" : "light";
          if (currentState.systemMode === systemMode) {
            return currentState;
          }
          return _extends({}, currentState, {
            systemMode
          });
        });
      }
    }, [state.mode]);
    const mediaListener = React15.useRef(handleMediaQuery);
    mediaListener.current = handleMediaQuery;
    React15.useEffect(() => {
      const handler = (...args) => mediaListener.current(...args);
      const media = window.matchMedia("(prefers-color-scheme: dark)");
      media.addListener(handler);
      handler(media);
      return () => {
        media.removeListener(handler);
      };
    }, []);
    React15.useEffect(() => {
      if (storageWindow) {
        const handleStorage = (event) => {
          const value = event.newValue;
          if (typeof event.key === "string" && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
            if (event.key.endsWith("light")) {
              setColorScheme({
                light: value
              });
            }
            if (event.key.endsWith("dark")) {
              setColorScheme({
                dark: value
              });
            }
          }
          if (event.key === modeStorageKey && (!value || ["light", "dark", "system"].includes(value))) {
            setMode(value || defaultMode);
          }
        };
        storageWindow.addEventListener("storage", handleStorage);
        return () => {
          storageWindow.removeEventListener("storage", handleStorage);
        };
      }
      return void 0;
    }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
    return _extends({}, state, {
      colorScheme,
      setMode,
      setColorScheme
    });
  }

  // node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var _excluded7 = ["colorSchemes", "components", "generateCssVars", "cssVarPrefix"];
  var DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
  function createCssVarsProvider(options) {
    const {
      themeId,
      /**
       * This `theme` object needs to follow a certain structure to
       * be used correctly by the finel `CssVarsProvider`. It should have a
       * `colorSchemes` key with the light and dark (and any other) palette.
       * It should also ideally have a vars object created using `prepareCssVars`.
       */
      theme: defaultTheme7 = {},
      attribute: defaultAttribute = DEFAULT_ATTRIBUTE,
      modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      defaultMode: designSystemMode = "light",
      defaultColorScheme: designSystemColorScheme,
      disableTransitionOnChange: designSystemTransitionOnChange = false,
      resolveTheme: resolveTheme2,
      excludeVariablesFromRoot: excludeVariablesFromRoot2
    } = options;
    if (!defaultTheme7.colorSchemes || typeof designSystemColorScheme === "string" && !defaultTheme7.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === "object" && !defaultTheme7.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === "object" && !defaultTheme7.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
      console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
    }
    const ColorSchemeContext = /* @__PURE__ */ React16.createContext(void 0);
    if (true) {
      ColorSchemeContext.displayName = "ColorSchemeContext";
    }
    const useColorScheme2 = () => {
      const value = React16.useContext(ColorSchemeContext);
      if (!value) {
        throw new Error(true ? `MUI: \`useColorScheme\` must be called under <CssVarsProvider />` : (0, import_formatMuiErrorMessage.default)(19));
      }
      return value;
    };
    function CssVarsProvider2(props) {
      const {
        children,
        theme: themeProp = defaultTheme7,
        modeStorageKey = defaultModeStorageKey,
        colorSchemeStorageKey = defaultColorSchemeStorageKey,
        attribute = defaultAttribute,
        defaultMode = designSystemMode,
        defaultColorScheme = designSystemColorScheme,
        disableTransitionOnChange = designSystemTransitionOnChange,
        storageWindow = typeof window === "undefined" ? void 0 : window,
        documentNode = typeof document === "undefined" ? void 0 : document,
        colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
        colorSchemeSelector = ":root",
        disableNestedContext = false,
        disableStyleSheetGeneration = false
      } = props;
      const hasMounted = React16.useRef(false);
      const upperTheme = useTheme5();
      const ctx = React16.useContext(ColorSchemeContext);
      const nested = !!ctx && !disableNestedContext;
      const scopedTheme = themeProp[themeId];
      const _ref = scopedTheme || themeProp, {
        colorSchemes = {},
        components = {},
        generateCssVars = () => ({
          vars: {},
          css: {}
        }),
        cssVarPrefix
      } = _ref, restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded7);
      const allColorSchemes = Object.keys(colorSchemes);
      const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
      const {
        mode: stateMode,
        setMode,
        systemMode,
        lightColorScheme,
        darkColorScheme,
        colorScheme: stateColorScheme,
        setColorScheme
      } = useCurrentColorScheme({
        supportedColorSchemes: allColorSchemes,
        defaultLightColorScheme: defaultLightColorScheme2,
        defaultDarkColorScheme: defaultDarkColorScheme2,
        modeStorageKey,
        colorSchemeStorageKey,
        defaultMode,
        storageWindow
      });
      let mode = stateMode;
      let colorScheme = stateColorScheme;
      if (nested) {
        mode = ctx.mode;
        colorScheme = ctx.colorScheme;
      }
      const calculatedMode = (() => {
        if (mode) {
          return mode;
        }
        if (defaultMode === "system") {
          return designSystemMode;
        }
        return defaultMode;
      })();
      const calculatedColorScheme = (() => {
        if (!colorScheme) {
          if (calculatedMode === "dark") {
            return defaultDarkColorScheme2;
          }
          return defaultLightColorScheme2;
        }
        return colorScheme;
      })();
      const {
        css: rootCss,
        vars: rootVars
      } = generateCssVars();
      const theme = _extends({}, restThemeProp, {
        components,
        colorSchemes,
        cssVarPrefix,
        vars: rootVars,
        getColorSchemeSelector: (targetColorScheme) => `[${attribute}="${targetColorScheme}"] &`
      });
      const defaultColorSchemeStyleSheet = {};
      const otherColorSchemesStyleSheet = {};
      Object.entries(colorSchemes).forEach(([key, scheme]) => {
        const {
          css: css3,
          vars
        } = generateCssVars(key);
        theme.vars = (0, import_deepmerge6.default)(theme.vars, vars);
        if (key === calculatedColorScheme) {
          Object.keys(scheme).forEach((schemeKey) => {
            if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
              theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);
            } else {
              theme[schemeKey] = scheme[schemeKey];
            }
          });
          if (theme.palette) {
            theme.palette.colorScheme = key;
          }
        }
        const resolvedDefaultColorScheme = (() => {
          if (typeof defaultColorScheme === "string") {
            return defaultColorScheme;
          }
          if (defaultMode === "dark") {
            return defaultColorScheme.dark;
          }
          return defaultColorScheme.light;
        })();
        if (key === resolvedDefaultColorScheme) {
          if (excludeVariablesFromRoot2) {
            const excludedVariables = {};
            excludeVariablesFromRoot2(cssVarPrefix).forEach((cssVar) => {
              excludedVariables[cssVar] = css3[cssVar];
              delete css3[cssVar];
            });
            defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
          }
          defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css3;
        } else {
          otherColorSchemesStyleSheet[`${colorSchemeSelector === ":root" ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css3;
        }
      });
      theme.vars = (0, import_deepmerge6.default)(theme.vars, rootVars);
      React16.useEffect(() => {
        if (colorScheme && colorSchemeNode) {
          colorSchemeNode.setAttribute(attribute, colorScheme);
        }
      }, [colorScheme, attribute, colorSchemeNode]);
      React16.useEffect(() => {
        let timer;
        if (disableTransitionOnChange && hasMounted.current && documentNode) {
          const css3 = documentNode.createElement("style");
          css3.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
          documentNode.head.appendChild(css3);
          (() => window.getComputedStyle(documentNode.body))();
          timer = setTimeout(() => {
            documentNode.head.removeChild(css3);
          }, 1);
        }
        return () => {
          clearTimeout(timer);
        };
      }, [colorScheme, disableTransitionOnChange, documentNode]);
      React16.useEffect(() => {
        hasMounted.current = true;
        return () => {
          hasMounted.current = false;
        };
      }, []);
      const contextValue = React16.useMemo(() => ({
        allColorSchemes,
        colorScheme,
        darkColorScheme,
        lightColorScheme,
        mode,
        setColorScheme,
        setMode,
        systemMode
      }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
      let shouldGenerateStyleSheet = true;
      if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
        shouldGenerateStyleSheet = false;
      }
      const element = /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(React16.Fragment, {
        children: [shouldGenerateStyleSheet && /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(React16.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_styled_engine6.GlobalStyles, {
            styles: {
              [colorSchemeSelector]: rootCss
            }
          }), /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_styled_engine6.GlobalStyles, {
            styles: defaultColorSchemeStyleSheet
          }), /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_styled_engine6.GlobalStyles, {
            styles: otherColorSchemesStyleSheet
          })]
        }), /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ThemeProvider_default2, {
          themeId: scopedTheme ? themeId : void 0,
          theme: resolveTheme2 ? resolveTheme2(theme) : theme,
          children
        })]
      });
      if (nested) {
        return element;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ColorSchemeContext.Provider, {
        value: contextValue,
        children: element
      });
    }
    true ? CssVarsProvider2.propTypes = {
      /**
       * The body attribute name to attach colorScheme.
       */
      attribute: import_prop_types6.default.string,
      /**
       * The component tree.
       */
      children: import_prop_types6.default.node,
      /**
       * The node used to attach the color-scheme attribute
       */
      colorSchemeNode: import_prop_types6.default.any,
      /**
       * The CSS selector for attaching the generated custom properties
       */
      colorSchemeSelector: import_prop_types6.default.string,
      /**
       * localStorage key used to store `colorScheme`
       */
      colorSchemeStorageKey: import_prop_types6.default.string,
      /**
       * The initial color scheme used.
       */
      defaultColorScheme: import_prop_types6.default.oneOfType([import_prop_types6.default.string, import_prop_types6.default.object]),
      /**
       * The initial mode used.
       */
      defaultMode: import_prop_types6.default.string,
      /**
       * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
       */
      disableNestedContext: import_prop_types6.default.bool,
      /**
       * If `true`, the style sheet won't be generated.
       *
       * This is useful for controlling nested CssVarsProvider behavior.
       */
      disableStyleSheetGeneration: import_prop_types6.default.bool,
      /**
       * Disable CSS transitions when switching between modes or color schemes.
       */
      disableTransitionOnChange: import_prop_types6.default.bool,
      /**
       * The document to attach the attribute to.
       */
      documentNode: import_prop_types6.default.any,
      /**
       * The key in the local storage used to store current color scheme.
       */
      modeStorageKey: import_prop_types6.default.string,
      /**
       * The window that attaches the 'storage' event listener.
       * @default window
       */
      storageWindow: import_prop_types6.default.any,
      /**
       * The calculated theme object that will be passed through context.
       */
      theme: import_prop_types6.default.object
    } : void 0;
    const defaultLightColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.light;
    const defaultDarkColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.dark;
    const getInitColorSchemeScript3 = (params) => getInitColorSchemeScript(_extends({
      attribute: defaultAttribute,
      colorSchemeStorageKey: defaultColorSchemeStorageKey,
      defaultMode: designSystemMode,
      defaultLightColorScheme,
      defaultDarkColorScheme,
      modeStorageKey: defaultModeStorageKey
    }, params));
    return {
      CssVarsProvider: CssVarsProvider2,
      useColorScheme: useColorScheme2,
      getInitColorSchemeScript: getInitColorSchemeScript3
    };
  }

  // node_modules/@mui/system/esm/cssVars/createGetCssVar.js
  function createGetCssVar(prefix2 = "") {
    function appendVar(...vars) {
      if (!vars.length) {
        return "";
      }
      const value = vars[0];
      if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
        return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
      }
      return `, ${value}`;
    }
    const getCssVar = (field, ...fallbacks) => {
      return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
    };
    return getCssVar;
  }

  // node_modules/@mui/system/esm/cssVars/cssVarsParser.js
  var assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
    let temp = obj;
    keys.forEach((k, index) => {
      if (index === keys.length - 1) {
        if (Array.isArray(temp)) {
          temp[Number(k)] = value;
        } else if (temp && typeof temp === "object") {
          temp[k] = value;
        }
      } else if (temp && typeof temp === "object") {
        if (!temp[k]) {
          temp[k] = arrayKeys.includes(k) ? [] : {};
        }
        temp = temp[k];
      }
    });
  };
  var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
    function recurse(object, parentKeys = [], arrayKeys = []) {
      Object.entries(object).forEach(([key, value]) => {
        if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
          if (value !== void 0 && value !== null) {
            if (typeof value === "object" && Object.keys(value).length > 0) {
              recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
            } else {
              callback([...parentKeys, key], value, arrayKeys);
            }
          }
        }
      });
    }
    recurse(obj);
  };
  var getCssValue = (keys, value) => {
    if (typeof value === "number") {
      if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
        return value;
      }
      const lastKey = keys[keys.length - 1];
      if (lastKey.toLowerCase().indexOf("opacity") >= 0) {
        return value;
      }
      return `${value}px`;
    }
    return value;
  };
  function cssVarsParser(theme, options) {
    const {
      prefix: prefix2,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    } = options || {};
    const css3 = {};
    const vars = {};
    const varsWithDefaults = {};
    walkObjectDeep(
      theme,
      (keys, value, arrayKeys) => {
        if (typeof value === "string" || typeof value === "number") {
          if (!shouldSkipGeneratingVar2 || !shouldSkipGeneratingVar2(keys, value)) {
            const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
            Object.assign(css3, {
              [cssVar]: getCssValue(keys, value)
            });
            assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
            assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${value})`, arrayKeys);
          }
        }
      },
      (keys) => keys[0] === "vars"
      // skip 'vars/*' paths
    );
    return {
      css: css3,
      vars,
      varsWithDefaults
    };
  }

  // node_modules/@mui/system/esm/cssVars/prepareCssVars.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(o2) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
      return typeof o3;
    } : function(o3) {
      return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
    }, _typeof(o2);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function toPrimitive(t2, r3) {
    if ("object" != _typeof(t2) || !t2) return t2;
    var e2 = t2[Symbol.toPrimitive];
    if (void 0 !== e2) {
      var i2 = e2.call(t2, r3 || "default");
      if ("object" != _typeof(i2)) return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r3 ? String : Number)(t2);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function toPropertyKey(t2) {
    var i2 = toPrimitive(t2, "string");
    return "symbol" == _typeof(i2) ? i2 : i2 + "";
  }

  // node_modules/@mui/system/esm/cssVars/prepareCssVars.js
  var import_deepmerge7 = __toESM(require_deepmerge2());
  var _excluded8 = ["colorSchemes", "components", "defaultColorScheme"];
  function prepareCssVars(theme, parserConfig) {
    const {
      colorSchemes = {},
      defaultColorScheme = "light"
    } = theme, otherTheme = _objectWithoutPropertiesLoose(theme, _excluded8);
    const {
      vars: rootVars,
      css: rootCss,
      varsWithDefaults: rootVarsWithDefaults
    } = cssVarsParser(otherTheme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {};
    const {
      [defaultColorScheme]: light2
    } = colorSchemes, otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(toPropertyKey));
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
      const {
        vars,
        css: css3,
        varsWithDefaults
      } = cssVarsParser(scheme, parserConfig);
      themeVars = (0, import_deepmerge7.default)(themeVars, varsWithDefaults);
      colorSchemesMap[key] = {
        css: css3,
        vars
      };
    });
    if (light2) {
      const {
        css: css3,
        vars,
        varsWithDefaults
      } = cssVarsParser(light2, parserConfig);
      themeVars = (0, import_deepmerge7.default)(themeVars, varsWithDefaults);
      colorSchemesMap[defaultColorScheme] = {
        css: css3,
        vars
      };
    }
    const generateCssVars = (colorScheme) => {
      var _parserConfig$getSele2;
      if (!colorScheme) {
        var _parserConfig$getSele;
        const css4 = _extends({}, rootCss);
        return {
          css: css4,
          vars: rootVars,
          selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css4)) || ":root"
        };
      }
      const css3 = _extends({}, colorSchemesMap[colorScheme].css);
      return {
        css: css3,
        vars: colorSchemesMap[colorScheme].vars,
        selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css3)) || ":root"
      };
    };
    return {
      vars: themeVars,
      generateCssVars
    };
  }
  var prepareCssVars_default = prepareCssVars;

  // node_modules/@mui/system/esm/Container/createContainer.js
  init_extends();
  var React17 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_generateUtilityClass = __toESM(require_generateUtilityClass2());
  var import_composeClasses = __toESM(require_composeClasses2());
  var import_capitalize4 = __toESM(require_capitalize2());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var _excluded9 = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
  var defaultTheme = createTheme_default();
  var defaultCreateStyledComponent = styled_default("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`maxWidth${(0, import_capitalize4.default)(String(ownerState.maxWidth))}`], ownerState.fixed && styles8.fixed, ownerState.disableGutters && styles8.disableGutters];
    }
  });
  var useThemePropsDefault = (inProps) => useThemeProps({
    props: inProps,
    name: "MuiContainer",
    defaultTheme
  });
  var useUtilityClasses = (ownerState, componentName) => {
    const getContainerUtilityClass2 = (slot) => {
      return (0, import_generateUtilityClass.default)(componentName, slot);
    };
    const {
      classes: classes2,
      fixed,
      disableGutters,
      maxWidth: maxWidth2
    } = ownerState;
    const slots = {
      root: ["root", maxWidth2 && `maxWidth${(0, import_capitalize4.default)(String(maxWidth2))}`, fixed && "fixed", disableGutters && "disableGutters"]
    };
    return (0, import_composeClasses.default)(slots, getContainerUtilityClass2, classes2);
  };
  function createContainer(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps15 = useThemePropsDefault,
      componentName = "MuiContainer"
    } = options;
    const ContainerRoot = createStyledComponent(({
      theme,
      ownerState
    }) => _extends({
      width: "100%",
      marginLeft: "auto",
      boxSizing: "border-box",
      marginRight: "auto",
      display: "block"
    }, !ownerState.disableGutters && {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("sm")]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }
    }), ({
      theme,
      ownerState
    }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
      const breakpoint = breakpointValueKey;
      const value = theme.breakpoints.values[breakpoint];
      if (value !== 0) {
        acc[theme.breakpoints.up(breakpoint)] = {
          maxWidth: `${value}${theme.breakpoints.unit}`
        };
      }
      return acc;
    }, {}), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.maxWidth === "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up("xs")]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: Math.max(theme.breakpoints.values.xs, 444)
      }
    }, ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
    ownerState.maxWidth !== "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [theme.breakpoints.up(ownerState.maxWidth)]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
      }
    }));
    const Container2 = /* @__PURE__ */ React17.forwardRef(function Container3(inProps, ref) {
      const props = useThemeProps15(inProps);
      const {
        className,
        component = "div",
        disableGutters = false,
        fixed = false,
        maxWidth: maxWidth2 = "lg"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
      const ownerState = _extends({}, props, {
        component,
        disableGutters,
        fixed,
        maxWidth: maxWidth2
      });
      const classes2 = useUtilityClasses(ownerState, componentName);
      return (
        // @ts-ignore theme is injected by the styled util
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ContainerRoot, _extends({
          as: component,
          ownerState,
          className: clsx_default(classes2.root, className),
          ref
        }, other))
      );
    });
    true ? Container2.propTypes = {
      children: import_prop_types7.default.node,
      classes: import_prop_types7.default.object,
      className: import_prop_types7.default.string,
      component: import_prop_types7.default.elementType,
      disableGutters: import_prop_types7.default.bool,
      fixed: import_prop_types7.default.bool,
      maxWidth: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types7.default.string]),
      sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object])
    } : void 0;
    return Container2;
  }

  // node_modules/@mui/system/esm/Unstable_Grid/createGrid.js
  init_extends();
  var React18 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_isMuiElement = __toESM(require_isMuiElement2());
  var import_generateUtilityClass2 = __toESM(require_generateUtilityClass2());
  var import_composeClasses2 = __toESM(require_composeClasses2());

  // node_modules/@mui/system/esm/Unstable_Grid/gridGenerator.js
  init_extends();

  // node_modules/@mui/system/esm/Unstable_Grid/traverseBreakpoints.js
  var filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
  var traverseBreakpoints = (breakpoints2, responsive, iterator) => {
    const smallestBreakpoint = breakpoints2.keys[0];
    if (Array.isArray(responsive)) {
      responsive.forEach((breakpointValue, index) => {
        iterator((responsiveStyles, style4) => {
          if (index <= breakpoints2.keys.length - 1) {
            if (index === 0) {
              Object.assign(responsiveStyles, style4);
            } else {
              responsiveStyles[breakpoints2.up(breakpoints2.keys[index])] = style4;
            }
          }
        }, breakpointValue);
      });
    } else if (responsive && typeof responsive === "object") {
      const keys = Object.keys(responsive).length > breakpoints2.keys.length ? breakpoints2.keys : filterBreakpointKeys(breakpoints2.keys, Object.keys(responsive));
      keys.forEach((key) => {
        if (breakpoints2.keys.indexOf(key) !== -1) {
          const breakpointValue = responsive[key];
          if (breakpointValue !== void 0) {
            iterator((responsiveStyles, style4) => {
              if (smallestBreakpoint === key) {
                Object.assign(responsiveStyles, style4);
              } else {
                responsiveStyles[breakpoints2.up(key)] = style4;
              }
            }, breakpointValue);
          }
        }
      });
    } else if (typeof responsive === "number" || typeof responsive === "string") {
      iterator((responsiveStyles, style4) => {
        Object.assign(responsiveStyles, style4);
      }, responsive);
    }
  };

  // node_modules/@mui/system/esm/Unstable_Grid/gridGenerator.js
  function appendLevel(level) {
    if (!level) {
      return "";
    }
    return `Level${level}`;
  }
  function isNestedContainer(ownerState) {
    return ownerState.unstable_level > 0 && ownerState.container;
  }
  function createGetSelfSpacing(ownerState) {
    return function getSelfSpacing(axis) {
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level)})`;
    };
  }
  function createGetParentSpacing(ownerState) {
    return function getParentSpacing(axis) {
      if (ownerState.unstable_level === 0) {
        return `var(--Grid-${axis}Spacing)`;
      }
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level - 1)})`;
    };
  }
  function getParentColumns(ownerState) {
    if (ownerState.unstable_level === 0) {
      return `var(--Grid-columns)`;
    }
    return `var(--Grid-columns${appendLevel(ownerState.unstable_level - 1)})`;
  }
  var generateGridSizeStyles = ({
    theme,
    ownerState
  }) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState);
    const styles8 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
      let style4 = {};
      if (value === true) {
        style4 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      }
      if (value === "auto") {
        style4 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      }
      if (typeof value === "number") {
        style4 = {
          flexGrow: 0,
          flexBasis: "auto",
          width: `calc(100% * ${value} / ${getParentColumns(ownerState)}${isNestedContainer(ownerState) ? ` + ${getSelfSpacing("column")}` : ""})`
        };
      }
      appendStyle(styles8, style4);
    });
    return styles8;
  };
  var generateGridOffsetStyles = ({
    theme,
    ownerState
  }) => {
    const styles8 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
      let style4 = {};
      if (value === "auto") {
        style4 = {
          marginLeft: "auto"
        };
      }
      if (typeof value === "number") {
        style4 = {
          marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / ${getParentColumns(ownerState)})`
        };
      }
      appendStyle(styles8, style4);
    });
    return styles8;
  };
  var generateGridColumnsStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const styles8 = isNestedContainer(ownerState) ? {
      [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: getParentColumns(ownerState)
    } : {
      "--Grid-columns": 12
    };
    traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
      appendStyle(styles8, {
        [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: value
      });
    });
    return styles8;
  };
  var generateGridRowSpacingStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState);
    const styles8 = isNestedContainer(ownerState) ? {
      // Set the default spacing as its parent spacing.
      // It will be overridden if spacing props are provided
      [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("row")
    } : {};
    traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
      var _theme$spacing;
      appendStyle(styles8, {
        [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
      });
    });
    return styles8;
  };
  var generateGridColumnSpacingStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState);
    const styles8 = isNestedContainer(ownerState) ? {
      // Set the default spacing as its parent spacing.
      // It will be overridden if spacing props are provided
      [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("column")
    } : {};
    traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
      var _theme$spacing2;
      appendStyle(styles8, {
        [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
      });
    });
    return styles8;
  };
  var generateGridDirectionStyles = ({
    theme,
    ownerState
  }) => {
    if (!ownerState.container) {
      return {};
    }
    const styles8 = {};
    traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
      appendStyle(styles8, {
        flexDirection: value
      });
    });
    return styles8;
  };
  var generateGridStyles = ({
    ownerState
  }) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState);
    const getParentSpacing = createGetParentSpacing(ownerState);
    return _extends({
      minWidth: 0,
      boxSizing: "border-box"
    }, ownerState.container && _extends({
      display: "flex",
      flexWrap: "wrap"
    }, ownerState.wrap && ownerState.wrap !== "wrap" && {
      flexWrap: ownerState.wrap
    }, {
      margin: `calc(${getSelfSpacing("row")} / -2) calc(${getSelfSpacing("column")} / -2)`
    }, ownerState.disableEqualOverflow && {
      margin: `calc(${getSelfSpacing("row")} * -1) 0px 0px calc(${getSelfSpacing("column")} * -1)`
    }), (!ownerState.container || isNestedContainer(ownerState)) && _extends({
      padding: `calc(${getParentSpacing("row")} / 2) calc(${getParentSpacing("column")} / 2)`
    }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
      padding: `${getParentSpacing("row")} 0px 0px ${getParentSpacing("column")}`
    }));
  };
  var generateSizeClassNames = (gridSize) => {
    const classNames = [];
    Object.entries(gridSize).forEach(([key, value]) => {
      if (value !== false && value !== void 0) {
        classNames.push(`grid-${key}-${String(value)}`);
      }
    });
    return classNames;
  };
  var generateSpacingClassNames = (spacing2, smallestBreakpoint = "xs") => {
    function isValidSpacing(val) {
      if (val === void 0) {
        return false;
      }
      return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
    }
    if (isValidSpacing(spacing2)) {
      return [`spacing-${smallestBreakpoint}-${String(spacing2)}`];
    }
    if (typeof spacing2 === "object" && !Array.isArray(spacing2)) {
      const classNames = [];
      Object.entries(spacing2).forEach(([key, value]) => {
        if (isValidSpacing(value)) {
          classNames.push(`spacing-${key}-${String(value)}`);
        }
      });
      return classNames;
    }
    return [];
  };
  var generateDirectionClasses = (direction2) => {
    if (direction2 === void 0) {
      return [];
    }
    if (typeof direction2 === "object") {
      return Object.entries(direction2).map(([key, value]) => `direction-${key}-${value}`);
    }
    return [`direction-xs-${String(direction2)}`];
  };

  // node_modules/@mui/system/esm/Unstable_Grid/createGrid.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var _excluded10 = ["className", "children", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow", "unstable_level"];
  var defaultTheme2 = createTheme_default();
  var defaultCreateStyledComponent2 = styled_default("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  });
  function useThemePropsDefault2(props) {
    return useThemeProps({
      props,
      name: "MuiGrid",
      defaultTheme: defaultTheme2
    });
  }
  function createGrid(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent2,
      useThemeProps: useThemeProps15 = useThemePropsDefault2,
      componentName = "MuiGrid"
    } = options;
    const GridOverflowContext = /* @__PURE__ */ React18.createContext(void 0);
    if (true) {
      GridOverflowContext.displayName = "GridOverflowContext";
    }
    const useUtilityClasses117 = (ownerState, theme) => {
      const {
        container,
        direction: direction2,
        spacing: spacing2,
        wrap,
        gridSize
      } = ownerState;
      const slots = {
        root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...generateDirectionClasses(direction2), ...generateSizeClassNames(gridSize), ...container ? generateSpacingClassNames(spacing2, theme.breakpoints.keys[0]) : []]
      };
      return (0, import_composeClasses2.default)(slots, (slot) => (0, import_generateUtilityClass2.default)(componentName, slot), {});
    };
    const GridRoot2 = createStyledComponent(generateGridColumnsStyles, generateGridColumnSpacingStyles, generateGridRowSpacingStyles, generateGridSizeStyles, generateGridDirectionStyles, generateGridStyles, generateGridOffsetStyles);
    const Grid3 = /* @__PURE__ */ React18.forwardRef(function Grid4(inProps, ref) {
      var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
      const theme = useTheme_default();
      const themeProps = useThemeProps15(inProps);
      const props = extendSxProp(themeProps);
      const overflow = React18.useContext(GridOverflowContext);
      const {
        className,
        children,
        columns: columnsProp = 12,
        container = false,
        component = "div",
        direction: direction2 = "row",
        wrap = "wrap",
        spacing: spacingProp = 0,
        rowSpacing: rowSpacingProp = spacingProp,
        columnSpacing: columnSpacingProp = spacingProp,
        disableEqualOverflow: themeDisableEqualOverflow,
        unstable_level: level = 0
      } = props, rest = _objectWithoutPropertiesLoose(props, _excluded10);
      let disableEqualOverflow = themeDisableEqualOverflow;
      if (level && themeDisableEqualOverflow !== void 0) {
        disableEqualOverflow = inProps.disableEqualOverflow;
      }
      const gridSize = {};
      const gridOffset = {};
      const other = {};
      Object.entries(rest).forEach(([key, val]) => {
        if (theme.breakpoints.values[key] !== void 0) {
          gridSize[key] = val;
        } else if (theme.breakpoints.values[key.replace("Offset", "")] !== void 0) {
          gridOffset[key.replace("Offset", "")] = val;
        } else {
          other[key] = val;
        }
      });
      const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : level ? void 0 : columnsProp;
      const spacing2 = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : level ? void 0 : spacingProp;
      const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : level ? void 0 : rowSpacingProp;
      const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : level ? void 0 : columnSpacingProp;
      const ownerState = _extends({}, props, {
        level,
        columns,
        container,
        direction: direction2,
        wrap,
        spacing: spacing2,
        rowSpacing,
        columnSpacing,
        gridSize,
        gridOffset,
        disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
        // use context value if exists.
        parentDisableEqualOverflow: overflow
        // for nested grid
      });
      const classes2 = useUtilityClasses117(ownerState, theme);
      let result = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GridRoot2, _extends({
        ref,
        as: component,
        ownerState,
        className: clsx_default(classes2.root, className)
      }, other, {
        children: React18.Children.map(children, (child) => {
          if (/* @__PURE__ */ React18.isValidElement(child) && (0, import_isMuiElement.default)(child, ["Grid"])) {
            var _child$props$unstable;
            return /* @__PURE__ */ React18.cloneElement(child, {
              unstable_level: (_child$props$unstable = child.props.unstable_level) != null ? _child$props$unstable : level + 1
            });
          }
          return child;
        })
      }));
      if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow != null ? overflow : false)) {
        result = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GridOverflowContext.Provider, {
          value: disableEqualOverflow,
          children: result
        });
      }
      return result;
    });
    true ? Grid3.propTypes = {
      children: import_prop_types8.default.node,
      className: import_prop_types8.default.string,
      columns: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.number), import_prop_types8.default.number, import_prop_types8.default.object]),
      columnSpacing: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string])), import_prop_types8.default.number, import_prop_types8.default.object, import_prop_types8.default.string]),
      component: import_prop_types8.default.elementType,
      container: import_prop_types8.default.bool,
      direction: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types8.default.arrayOf(import_prop_types8.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types8.default.object]),
      disableEqualOverflow: import_prop_types8.default.bool,
      lg: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number, import_prop_types8.default.bool]),
      lgOffset: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number]),
      md: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number, import_prop_types8.default.bool]),
      mdOffset: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number]),
      rowSpacing: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string])), import_prop_types8.default.number, import_prop_types8.default.object, import_prop_types8.default.string]),
      sm: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number, import_prop_types8.default.bool]),
      smOffset: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number]),
      spacing: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string])), import_prop_types8.default.number, import_prop_types8.default.object, import_prop_types8.default.string]),
      sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
      wrap: import_prop_types8.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
      xl: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number, import_prop_types8.default.bool]),
      xlOffset: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number]),
      xs: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number, import_prop_types8.default.bool]),
      xsOffset: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.number])
    } : void 0;
    Grid3.muiName = "Grid";
    return Grid3;
  }

  // node_modules/@mui/system/esm/Stack/createStack.js
  init_extends();
  var React19 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_deepmerge8 = __toESM(require_deepmerge2());
  var import_generateUtilityClass3 = __toESM(require_generateUtilityClass2());
  var import_composeClasses3 = __toESM(require_composeClasses2());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var _excluded11 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
  var defaultTheme3 = createTheme_default();
  var defaultCreateStyledComponent3 = styled_default("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  });
  function useThemePropsDefault3(props) {
    return useThemeProps({
      props,
      name: "MuiStack",
      defaultTheme: defaultTheme3
    });
  }
  function joinChildren(children, separator) {
    const childrenArray = React19.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index) => {
      output.push(child);
      if (index < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React19.cloneElement(separator, {
          key: `separator-${index}`
        }));
      }
      return output;
    }, []);
  }
  var getSideFromDirection = (direction2) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction2];
  };
  var style3 = ({
    ownerState,
    theme
  }) => {
    let styles8 = _extends({
      display: "flex",
      flexDirection: "column"
    }, handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme);
      const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index, breakpoints2) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index > 0 ? directionValues[breakpoints2[index - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        if (ownerState.useFlexGap) {
          return {
            gap: getValue(transformer, propValue)
          };
        }
        return {
          // The useFlexGap={false} implement relies on each child to give up control of the margin.
          // We need to reset the margin to avoid double spacing.
          "& > :not(style):not(style)": {
            margin: 0
          },
          "& > :not(style) ~ :not(style)": {
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles8 = (0, import_deepmerge8.default)(styles8, handleBreakpoints({
        theme
      }, spacingValues, styleFromPropValue));
    }
    styles8 = mergeBreakpointsInOrder(theme.breakpoints, styles8);
    return styles8;
  };
  function createStack(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent3,
      useThemeProps: useThemeProps15 = useThemePropsDefault3,
      componentName = "MuiStack"
    } = options;
    const useUtilityClasses117 = () => {
      const slots = {
        root: ["root"]
      };
      return (0, import_composeClasses3.default)(slots, (slot) => (0, import_generateUtilityClass3.default)(componentName, slot), {});
    };
    const StackRoot = createStyledComponent(style3);
    const Stack2 = /* @__PURE__ */ React19.forwardRef(function Grid3(inProps, ref) {
      const themeProps = useThemeProps15(inProps);
      const props = extendSxProp(themeProps);
      const {
        component = "div",
        direction: direction2 = "column",
        spacing: spacing2 = 0,
        divider,
        children,
        className,
        useFlexGap = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
      const ownerState = {
        direction: direction2,
        spacing: spacing2,
        useFlexGap
      };
      const classes2 = useUtilityClasses117();
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(StackRoot, _extends({
        as: component,
        ownerState,
        ref,
        className: clsx_default(classes2.root, className)
      }, other, {
        children: divider ? joinChildren(children, divider) : children
      }));
    });
    true ? Stack2.propTypes = {
      children: import_prop_types9.default.node,
      direction: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types9.default.arrayOf(import_prop_types9.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types9.default.object]),
      divider: import_prop_types9.default.node,
      spacing: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string])), import_prop_types9.default.number, import_prop_types9.default.object, import_prop_types9.default.string]),
      sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object])
    } : void 0;
    return Stack2;
  }

  // node_modules/@mui/material/styles/adaptV4Theme.js
  var _excluded12 = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"];
  var _excluded23 = ["type", "mode"];
  function adaptV4Theme(inputTheme) {
    if (true) {
      console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
    }
    const {
      defaultProps: defaultProps2 = {},
      mixins = {},
      overrides = {},
      palette: palette2 = {},
      props = {},
      styleOverrides = {}
    } = inputTheme, other = _objectWithoutPropertiesLoose(inputTheme, _excluded12);
    const theme = _extends({}, other, {
      components: {}
    });
    Object.keys(defaultProps2).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = defaultProps2[component];
      theme.components[component] = componentValue;
    });
    Object.keys(props).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = props[component];
      theme.components[component] = componentValue;
    });
    Object.keys(styleOverrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = styleOverrides[component];
      theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = overrides[component];
      theme.components[component] = componentValue;
    });
    theme.spacing = createSpacing(inputTheme.spacing);
    const breakpoints2 = createBreakpoints(inputTheme.breakpoints || {});
    const spacing2 = theme.spacing;
    theme.mixins = _extends({
      gutters: (styles8 = {}) => {
        return _extends({
          paddingLeft: spacing2(2),
          paddingRight: spacing2(2)
        }, styles8, {
          [breakpoints2.up("sm")]: _extends({
            paddingLeft: spacing2(3),
            paddingRight: spacing2(3)
          }, styles8[breakpoints2.up("sm")])
        });
      }
    }, mixins);
    const {
      type: typeInput,
      mode: modeInput
    } = palette2, paletteRest = _objectWithoutPropertiesLoose(palette2, _excluded23);
    const finalMode = modeInput || typeInput || "light";
    theme.palette = _extends({
      // theme.palette.text.hint
      text: {
        hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
      },
      mode: finalMode,
      type: finalMode
    }, paletteRest);
    return theme;
  }

  // node_modules/@mui/material/styles/createTheme.js
  init_extends();
  var import_deepmerge11 = __toESM(require_deepmerge2());
  var import_styleFunctionSx7 = __toESM(require_styleFunctionSx2());
  var import_createTheme7 = __toESM(require_createTheme2());
  var import_generateUtilityClass4 = __toESM(require_generateUtilityClass2());

  // node_modules/@mui/material/styles/createMixins.js
  init_extends();
  function createMixins(breakpoints2, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints2.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints2.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  init_extends();
  var import_deepmerge9 = __toESM(require_deepmerge2());
  var import_colorManipulator = __toESM(require_colorManipulator());
  var _excluded13 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction2, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction2]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction2] = intent[shade];
      } else if (direction2 === "light") {
        intent.light = (0, import_colorManipulator.lighten)(intent.main, tonalOffsetLight);
      } else if (direction2 === "dark") {
        intent.dark = (0, import_colorManipulator.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded13);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning2 = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_colorManipulator.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_formatMuiErrorMessage.default)(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_formatMuiErrorMessage.default)(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_deepmerge9.default)(_extends({
      // A collection of common colors.
      common: _extends({}, common_default),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning2,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  init_extends();
  var import_deepmerge10 = __toESM(require_deepmerge2());
  var _excluded14 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography) {
    const _ref = typeof typography === "function" ? typography(palette2) : typography, {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded14);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return (0, import_deepmerge10.default)(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  init_extends();
  var _excluded15 = ["duration", "easing", "delay"];
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded15);
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded16 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded16);
    if (options.vars) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_formatMuiErrorMessage.default)(18));
    }
    const palette2 = createPalette(paletteInput);
    const systemTheme = (0, import_createTheme7.default)(options);
    let muiTheme = (0, import_deepmerge11.default)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette2,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = (0, import_deepmerge11.default)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge11.default)(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = (0, import_generateUtilityClass4.default)("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, import_styleFunctionSx7.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return (0, import_styleFunctionSx7.default)({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var warnedOnce = false;
  function createMuiTheme(...args) {
    if (true) {
      if (!warnedOnce) {
        warnedOnce = true;
        console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
      }
    }
    return createTheme2(...args);
  }
  var createTheme_default2 = createTheme2;

  // node_modules/@mui/material/styles/createMuiStrictModeTheme.js
  var import_deepmerge12 = __toESM(require_deepmerge2());
  function createMuiStrictModeTheme(options, ...args) {
    return createTheme_default2((0, import_deepmerge12.default)({
      unstable_strictMode: true
    }, options), ...args);
  }

  // node_modules/@mui/material/styles/createStyles.js
  var warnedOnce2 = false;
  function createStyles(styles8) {
    if (!warnedOnce2) {
      console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
      warnedOnce2 = true;
    }
    return styles8;
  }

  // node_modules/@mui/material/styles/cssUtils.js
  function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
  }
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length2) {
    return parseFloat(length2);
  }
  function convertLength(baseFontSize) {
    return (length2, toUnit) => {
      const fromUnit = getUnit(length2);
      if (fromUnit === toUnit) {
        return length2;
      }
      let pxLength = toUnitless(length2);
      if (fromUnit !== "px") {
        if (fromUnit === "em") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        } else if (fromUnit === "rem") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        }
      }
      let outputLength = pxLength;
      if (toUnit !== "px") {
        if (toUnit === "em") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else if (toUnit === "rem") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else {
          return length2;
        }
      }
      return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
  }
  function alignProperty({
    size,
    grid: grid2
  }) {
    const sizeBelow = size - size % grid2;
    const sizeAbove = sizeBelow + grid2;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
  }
  function fontGrid({
    lineHeight,
    pixels,
    htmlFontSize
  }) {
    return pixels / (lineHeight * htmlFontSize);
  }
  function responsiveProperty({
    cssProperty,
    min: min2,
    max: max2,
    unit = "rem",
    breakpoints: breakpoints2 = [600, 900, 1200],
    transform = null
  }) {
    const output = {
      [cssProperty]: `${min2}${unit}`
    };
    const factor = (max2 - min2) / breakpoints2[breakpoints2.length - 1];
    breakpoints2.forEach((breakpoint) => {
      let value = min2 + factor * breakpoint;
      if (transform !== null) {
        value = transform(value);
      }
      output[`@media (min-width:${breakpoint}px)`] = {
        [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`
      };
    });
    return output;
  }

  // node_modules/@mui/material/styles/responsiveFontSizes.js
  init_extends();
  function responsiveFontSizes(themeInput, options = {}) {
    const {
      breakpoints: breakpoints2 = ["sm", "md", "lg"],
      disableAlign = false,
      factor = 2,
      variants = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
    } = options;
    const theme = _extends({}, themeInput);
    theme.typography = _extends({}, theme.typography);
    const typography = theme.typography;
    const convert = convertLength(typography.htmlFontSize);
    const breakpointValues = breakpoints2.map((x) => theme.breakpoints.values[x]);
    variants.forEach((variant) => {
      const style4 = typography[variant];
      if (!style4) {
        return;
      }
      const remFontSize = parseFloat(convert(style4.fontSize, "rem"));
      if (remFontSize <= 1) {
        return;
      }
      const maxFontSize = remFontSize;
      const minFontSize = 1 + (maxFontSize - 1) / factor;
      let {
        lineHeight
      } = style4;
      if (!isUnitless(lineHeight) && !disableAlign) {
        throw new Error(true ? `MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` : (0, import_formatMuiErrorMessage.default)(6));
      }
      if (!isUnitless(lineHeight)) {
        lineHeight = parseFloat(convert(lineHeight, "rem")) / parseFloat(remFontSize);
      }
      let transform = null;
      if (!disableAlign) {
        transform = (value) => alignProperty({
          size: value,
          grid: fontGrid({
            pixels: 4,
            lineHeight,
            htmlFontSize: typography.htmlFontSize
          })
        });
      }
      typography[variant] = _extends({}, style4, responsiveProperty({
        cssProperty: "fontSize",
        min: minFontSize,
        max: maxFontSize,
        unit: "rem",
        breakpoints: breakpointValues,
        transform
      }));
    });
    return theme;
  }

  // node_modules/@mui/material/styles/useTheme.js
  var React20 = __toESM(require_react());

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme4 = createTheme_default2();
  var defaultTheme_default = defaultTheme4;

  // node_modules/@mui/material/styles/useTheme.js
  function useTheme6() {
    const theme = useTheme_default(defaultTheme_default);
    if (true) {
      React20.useDebugValue(theme);
    }
    return theme[identifier_default] || theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  var import_useThemeProps6 = __toESM(require_useThemeProps2());
  function useThemeProps2({
    props,
    name
  }) {
    return (0, import_useThemeProps6.default)({
      props,
      name,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  var import_createStyled2 = __toESM(require_createStyled());

  // node_modules/@mui/material/styles/slotShouldForwardProp.js
  function slotShouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var slotShouldForwardProp_default = slotShouldForwardProp;

  // node_modules/@mui/material/styles/rootShouldForwardProp.js
  var rootShouldForwardProp = (prop) => slotShouldForwardProp_default(prop) && prop !== "classes";
  var rootShouldForwardProp_default = rootShouldForwardProp;

  // node_modules/@mui/material/styles/styled.js
  var styled3 = (0, import_createStyled2.default)({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp: rootShouldForwardProp_default
  });
  var styled_default2 = styled3;

  // node_modules/@mui/material/styles/ThemeProvider.js
  init_extends();
  var React21 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var _excluded17 = ["theme"];
  function ThemeProvider5(_ref) {
    let {
      theme: themeInput
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded17);
    const scopedTheme = themeInput[identifier_default];
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ThemeProvider_default2, _extends({}, props, {
      themeId: scopedTheme ? identifier_default : void 0,
      theme: scopedTheme || themeInput
    }));
  }
  true ? ThemeProvider5.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types10.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types10.default.oneOfType([import_prop_types10.default.object, import_prop_types10.default.func]).isRequired
  } : void 0;

  // node_modules/@mui/material/styles/makeStyles.js
  function makeStyles() {
    throw new Error(true ? `MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : (0, import_formatMuiErrorMessage.default)(14));
  }

  // node_modules/@mui/material/styles/withStyles.js
  function withStyles() {
    throw new Error(true ? `MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : (0, import_formatMuiErrorMessage.default)(15));
  }

  // node_modules/@mui/material/styles/withTheme.js
  function withTheme2() {
    throw new Error(true ? `MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : (0, import_formatMuiErrorMessage.default)(16));
  }

  // node_modules/@mui/material/styles/CssVarsProvider.js
  init_extends();
  var import_styleFunctionSx9 = __toESM(require_styleFunctionSx2());

  // node_modules/@mui/material/styles/experimental_extendTheme.js
  init_extends();
  var import_deepmerge13 = __toESM(require_deepmerge2());
  var import_styleFunctionSx8 = __toESM(require_styleFunctionSx2());
  var import_colorManipulator2 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/styles/shouldSkipGeneratingVar.js
  function shouldSkipGeneratingVar(keys) {
    var _keys$;
    return !!keys[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
    keys[0] === "palette" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
  }

  // node_modules/@mui/material/styles/getOverlayAlpha.js
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var getOverlayAlpha_default = getOverlayAlpha;

  // node_modules/@mui/material/styles/experimental_extendTheme.js
  var _excluded18 = ["colorSchemes", "cssVarPrefix", "shouldSkipGeneratingVar"];
  var _excluded24 = ["palette"];
  var defaultDarkOverlays = [...Array(25)].map((_5, index) => {
    if (index === 0) {
      return void 0;
    }
    const overlay = getOverlayAlpha_default(index);
    return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
  });
  function assignNode(obj, keys) {
    keys.forEach((k) => {
      if (!obj[k]) {
        obj[k] = {};
      }
    });
  }
  function setColor(obj, key, defaultValue) {
    if (!obj[key] && defaultValue) {
      obj[key] = defaultValue;
    }
  }
  function toRgb(color2) {
    if (!color2 || !color2.startsWith("hsl")) {
      return color2;
    }
    return (0, import_colorManipulator2.hslToRgb)(color2);
  }
  function setColorChannel(obj, key) {
    if (!(`${key}Channel` in obj)) {
      obj[`${key}Channel`] = (0, import_colorManipulator2.private_safeColorChannel)(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
    }
  }
  var silent = (fn2) => {
    try {
      return fn2();
    } catch (error) {
    }
    return void 0;
  };
  var createGetCssVar2 = (cssVarPrefix = "mui") => createGetCssVar(cssVarPrefix);
  function extendTheme(options = {}, ...args) {
    var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
    const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = "mui",
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2 = shouldSkipGeneratingVar
    } = options, input = _objectWithoutPropertiesLoose(options, _excluded18);
    const getCssVar = createGetCssVar2(cssVarPrefix);
    const _createThemeWithoutVa = createTheme_default2(_extends({}, input, colorSchemesInput.light && {
      palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
    })), {
      palette: lightPalette
    } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded24);
    const {
      palette: darkPalette
    } = createTheme_default2({
      palette: _extends({
        mode: "dark"
      }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
    });
    let theme = _extends({}, muiTheme, {
      cssVarPrefix,
      getCssVar,
      colorSchemes: _extends({}, colorSchemesInput, {
        light: _extends({}, colorSchemesInput.light, {
          palette: lightPalette,
          opacity: _extends({
            inputPlaceholder: 0.42,
            inputUnderline: 0.42,
            switchTrackDisabled: 0.12,
            switchTrack: 0.38
          }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
          overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
        }),
        dark: _extends({}, colorSchemesInput.dark, {
          palette: darkPalette,
          opacity: _extends({
            inputPlaceholder: 0.5,
            inputUnderline: 0.7,
            switchTrackDisabled: 0.2,
            switchTrack: 0.3
          }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
          overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
        })
      })
    });
    Object.keys(theme.colorSchemes).forEach((key) => {
      const palette2 = theme.colorSchemes[key].palette;
      const setCssVarColor = (cssVar) => {
        const tokens = cssVar.split("-");
        const color2 = tokens[1];
        const colorToken = tokens[2];
        return getCssVar(cssVar, palette2[color2][colorToken]);
      };
      if (key === "light") {
        setColor(palette2.common, "background", "#fff");
        setColor(palette2.common, "onBackground", "#000");
      } else {
        setColor(palette2.common, "background", "#000");
        setColor(palette2.common, "onBackground", "#fff");
      }
      assignNode(palette2, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
      if (key === "light") {
        setColor(palette2.Alert, "errorColor", (0, import_colorManipulator2.private_safeDarken)(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", (0, import_colorManipulator2.private_safeDarken)(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", (0, import_colorManipulator2.private_safeDarken)(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", (0, import_colorManipulator2.private_safeDarken)(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => lightPalette.getContrastText(palette2.error.main)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => lightPalette.getContrastText(palette2.info.main)));
        setColor(palette2.Alert, "successFilledColor", silent(() => lightPalette.getContrastText(palette2.success.main)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => lightPalette.getContrastText(palette2.warning.main)));
        setColor(palette2.Alert, "errorStandardBg", (0, import_colorManipulator2.private_safeLighten)(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", (0, import_colorManipulator2.private_safeLighten)(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", (0, import_colorManipulator2.private_safeLighten)(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", (0, import_colorManipulator2.private_safeLighten)(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
        setColor(palette2.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
        setColor(palette2.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
        setColor(palette2.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
        setColor(palette2.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
        setColor(palette2.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
        setColor(palette2.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", (0, import_colorManipulator2.private_safeLighten)(palette2.primary.main, 0.62));
        setColor(palette2.LinearProgress, "secondaryBg", (0, import_colorManipulator2.private_safeLighten)(palette2.secondary.main, 0.62));
        setColor(palette2.LinearProgress, "errorBg", (0, import_colorManipulator2.private_safeLighten)(palette2.error.main, 0.62));
        setColor(palette2.LinearProgress, "infoBg", (0, import_colorManipulator2.private_safeLighten)(palette2.info.main, 0.62));
        setColor(palette2.LinearProgress, "successBg", (0, import_colorManipulator2.private_safeLighten)(palette2.success.main, 0.62));
        setColor(palette2.LinearProgress, "warningBg", (0, import_colorManipulator2.private_safeLighten)(palette2.warning.main, 0.62));
        setColor(palette2.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
        setColor(palette2.Slider, "primaryTrack", (0, import_colorManipulator2.private_safeLighten)(palette2.primary.main, 0.62));
        setColor(palette2.Slider, "secondaryTrack", (0, import_colorManipulator2.private_safeLighten)(palette2.secondary.main, 0.62));
        setColor(palette2.Slider, "errorTrack", (0, import_colorManipulator2.private_safeLighten)(palette2.error.main, 0.62));
        setColor(palette2.Slider, "infoTrack", (0, import_colorManipulator2.private_safeLighten)(palette2.info.main, 0.62));
        setColor(palette2.Slider, "successTrack", (0, import_colorManipulator2.private_safeLighten)(palette2.success.main, 0.62));
        setColor(palette2.Slider, "warningTrack", (0, import_colorManipulator2.private_safeLighten)(palette2.warning.main, 0.62));
        const snackbarContentBackground = (0, import_colorManipulator2.private_safeEmphasize)(palette2.background.default, 0.8);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => lightPalette.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", (0, import_colorManipulator2.private_safeEmphasize)(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", setCssVarColor("palette-grey-400"));
        setColor(palette2.StepContent, "border", setCssVarColor("palette-grey-400"));
        setColor(palette2.Switch, "defaultColor", setCssVarColor("palette-common-white"));
        setColor(palette2.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
        setColor(palette2.Switch, "primaryDisabledColor", (0, import_colorManipulator2.private_safeLighten)(palette2.primary.main, 0.62));
        setColor(palette2.Switch, "secondaryDisabledColor", (0, import_colorManipulator2.private_safeLighten)(palette2.secondary.main, 0.62));
        setColor(palette2.Switch, "errorDisabledColor", (0, import_colorManipulator2.private_safeLighten)(palette2.error.main, 0.62));
        setColor(palette2.Switch, "infoDisabledColor", (0, import_colorManipulator2.private_safeLighten)(palette2.info.main, 0.62));
        setColor(palette2.Switch, "successDisabledColor", (0, import_colorManipulator2.private_safeLighten)(palette2.success.main, 0.62));
        setColor(palette2.Switch, "warningDisabledColor", (0, import_colorManipulator2.private_safeLighten)(palette2.warning.main, 0.62));
        setColor(palette2.TableCell, "border", (0, import_colorManipulator2.private_safeLighten)((0, import_colorManipulator2.private_safeAlpha)(palette2.divider, 1), 0.88));
        setColor(palette2.Tooltip, "bg", (0, import_colorManipulator2.private_safeAlpha)(palette2.grey[700], 0.92));
      } else {
        setColor(palette2.Alert, "errorColor", (0, import_colorManipulator2.private_safeLighten)(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", (0, import_colorManipulator2.private_safeLighten)(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", (0, import_colorManipulator2.private_safeLighten)(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", (0, import_colorManipulator2.private_safeLighten)(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
        setColor(palette2.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
        setColor(palette2.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
        setColor(palette2.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => darkPalette.getContrastText(palette2.error.dark)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => darkPalette.getContrastText(palette2.info.dark)));
        setColor(palette2.Alert, "successFilledColor", silent(() => darkPalette.getContrastText(palette2.success.dark)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => darkPalette.getContrastText(palette2.warning.dark)));
        setColor(palette2.Alert, "errorStandardBg", (0, import_colorManipulator2.private_safeDarken)(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", (0, import_colorManipulator2.private_safeDarken)(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", (0, import_colorManipulator2.private_safeDarken)(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", (0, import_colorManipulator2.private_safeDarken)(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
        setColor(palette2.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
        setColor(palette2.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
        setColor(palette2.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
        setColor(palette2.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
        setColor(palette2.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", (0, import_colorManipulator2.private_safeDarken)(palette2.primary.main, 0.5));
        setColor(palette2.LinearProgress, "secondaryBg", (0, import_colorManipulator2.private_safeDarken)(palette2.secondary.main, 0.5));
        setColor(palette2.LinearProgress, "errorBg", (0, import_colorManipulator2.private_safeDarken)(palette2.error.main, 0.5));
        setColor(palette2.LinearProgress, "infoBg", (0, import_colorManipulator2.private_safeDarken)(palette2.info.main, 0.5));
        setColor(palette2.LinearProgress, "successBg", (0, import_colorManipulator2.private_safeDarken)(palette2.success.main, 0.5));
        setColor(palette2.LinearProgress, "warningBg", (0, import_colorManipulator2.private_safeDarken)(palette2.warning.main, 0.5));
        setColor(palette2.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
        setColor(palette2.Slider, "primaryTrack", (0, import_colorManipulator2.private_safeDarken)(palette2.primary.main, 0.5));
        setColor(palette2.Slider, "secondaryTrack", (0, import_colorManipulator2.private_safeDarken)(palette2.secondary.main, 0.5));
        setColor(palette2.Slider, "errorTrack", (0, import_colorManipulator2.private_safeDarken)(palette2.error.main, 0.5));
        setColor(palette2.Slider, "infoTrack", (0, import_colorManipulator2.private_safeDarken)(palette2.info.main, 0.5));
        setColor(palette2.Slider, "successTrack", (0, import_colorManipulator2.private_safeDarken)(palette2.success.main, 0.5));
        setColor(palette2.Slider, "warningTrack", (0, import_colorManipulator2.private_safeDarken)(palette2.warning.main, 0.5));
        const snackbarContentBackground = (0, import_colorManipulator2.private_safeEmphasize)(palette2.background.default, 0.98);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => darkPalette.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", (0, import_colorManipulator2.private_safeEmphasize)(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", setCssVarColor("palette-grey-600"));
        setColor(palette2.StepContent, "border", setCssVarColor("palette-grey-600"));
        setColor(palette2.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
        setColor(palette2.Switch, "primaryDisabledColor", (0, import_colorManipulator2.private_safeDarken)(palette2.primary.main, 0.55));
        setColor(palette2.Switch, "secondaryDisabledColor", (0, import_colorManipulator2.private_safeDarken)(palette2.secondary.main, 0.55));
        setColor(palette2.Switch, "errorDisabledColor", (0, import_colorManipulator2.private_safeDarken)(palette2.error.main, 0.55));
        setColor(palette2.Switch, "infoDisabledColor", (0, import_colorManipulator2.private_safeDarken)(palette2.info.main, 0.55));
        setColor(palette2.Switch, "successDisabledColor", (0, import_colorManipulator2.private_safeDarken)(palette2.success.main, 0.55));
        setColor(palette2.Switch, "warningDisabledColor", (0, import_colorManipulator2.private_safeDarken)(palette2.warning.main, 0.55));
        setColor(palette2.TableCell, "border", (0, import_colorManipulator2.private_safeDarken)((0, import_colorManipulator2.private_safeAlpha)(palette2.divider, 1), 0.68));
        setColor(palette2.Tooltip, "bg", (0, import_colorManipulator2.private_safeAlpha)(palette2.grey[700], 0.92));
      }
      setColorChannel(palette2.background, "default");
      setColorChannel(palette2.background, "paper");
      setColorChannel(palette2.common, "background");
      setColorChannel(palette2.common, "onBackground");
      setColorChannel(palette2, "divider");
      Object.keys(palette2).forEach((color2) => {
        const colors = palette2[color2];
        if (colors && typeof colors === "object") {
          if (colors.main) {
            setColor(palette2[color2], "mainChannel", (0, import_colorManipulator2.private_safeColorChannel)(toRgb(colors.main)));
          }
          if (colors.light) {
            setColor(palette2[color2], "lightChannel", (0, import_colorManipulator2.private_safeColorChannel)(toRgb(colors.light)));
          }
          if (colors.dark) {
            setColor(palette2[color2], "darkChannel", (0, import_colorManipulator2.private_safeColorChannel)(toRgb(colors.dark)));
          }
          if (colors.contrastText) {
            setColor(palette2[color2], "contrastTextChannel", (0, import_colorManipulator2.private_safeColorChannel)(toRgb(colors.contrastText)));
          }
          if (color2 === "text") {
            setColorChannel(palette2[color2], "primary");
            setColorChannel(palette2[color2], "secondary");
          }
          if (color2 === "action") {
            if (colors.active) {
              setColorChannel(palette2[color2], "active");
            }
            if (colors.selected) {
              setColorChannel(palette2[color2], "selected");
            }
          }
        }
      });
    });
    theme = args.reduce((acc, argument) => (0, import_deepmerge13.default)(acc, argument), theme);
    const parserConfig = {
      prefix: cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    };
    const {
      vars: themeVars,
      generateCssVars
    } = prepareCssVars_default(theme, parserConfig);
    theme.vars = themeVars;
    theme.generateCssVars = generateCssVars;
    theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar2;
    theme.unstable_sxConfig = _extends({}, import_styleFunctionSx8.unstable_defaultSxConfig, input == null ? void 0 : input.unstable_sxConfig);
    theme.unstable_sx = function sx(props) {
      return (0, import_styleFunctionSx8.default)({
        sx: props,
        theme: this
      });
    };
    return theme;
  }

  // node_modules/@mui/material/styles/excludeVariablesFromRoot.js
  var excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_5, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
  var excludeVariablesFromRoot_default = excludeVariablesFromRoot;

  // node_modules/@mui/material/styles/CssVarsProvider.js
  var defaultTheme5 = extendTheme();
  var {
    CssVarsProvider,
    useColorScheme,
    getInitColorSchemeScript: getInitColorSchemeScript2
  } = createCssVarsProvider({
    themeId: identifier_default,
    theme: defaultTheme5,
    attribute: "data-mui-color-scheme",
    modeStorageKey: "mui-mode",
    colorSchemeStorageKey: "mui-color-scheme",
    defaultColorScheme: {
      light: "light",
      dark: "dark"
    },
    resolveTheme: (theme) => {
      const newTheme = _extends({}, theme, {
        typography: createTypography(theme.palette, theme.typography)
      });
      newTheme.unstable_sx = function sx(props) {
        return (0, import_styleFunctionSx9.default)({
          sx: props,
          theme: this
        });
      };
      return newTheme;
    },
    excludeVariablesFromRoot: excludeVariablesFromRoot_default
  });

  // node_modules/@mui/material/styles/index.js
  function experimental_sx() {
    throw new Error(true ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : (0, import_formatMuiErrorMessage.default)(20));
  }

  // node_modules/@mui/material/index.js
  __reExport(material_exports, __toESM(require_utils()));

  // node_modules/@mui/material/Accordion/Accordion.js
  init_extends();
  var React29 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is3());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_chainPropTypes2 = __toESM(require_chainPropTypes2());
  var import_composeClasses6 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/zero-styled/index.js
  function createUseThemeProps(name) {
    return useThemeProps2;
  }

  // node_modules/@mui/material/Collapse/Collapse.js
  init_extends();
  var React25 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t2, e2) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
      return t3.__proto__ = e3, t3;
    }, _setPrototypeOf(t2, e2);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t2, o2) {
    t2.prototype = Object.create(o2.prototype), t2.prototype.constructor = t2, _setPrototypeOf(t2, o2);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types12 = __toESM(require_prop_types());
  var import_react5 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types11 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.shape({
    enter: import_prop_types11.default.number,
    exit: import_prop_types11.default.number,
    appear: import_prop_types11.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types11.default.oneOfType([import_prop_types11.default.string, import_prop_types11.default.shape({
    enter: import_prop_types11.default.string,
    exit: import_prop_types11.default.string,
    active: import_prop_types11.default.string
  }), import_prop_types11.default.shape({
    enter: import_prop_types11.default.string,
    enterDone: import_prop_types11.default.string,
    enterActive: import_prop_types11.default.string,
    exit: import_prop_types11.default.string,
    exitDone: import_prop_types11.default.string,
    exitActive: import_prop_types11.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react4 = __toESM(require_react());
  var TransitionGroupContext_default = import_react4.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition3, _React$Component);
    function Transition3(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition3.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout3 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout3;
      if (timeout3 != null && typeof timeout3 !== "number") {
        exit = timeout3.exit;
        enter = timeout3.enter;
        appear = timeout3.appear !== void 0 ? timeout3.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2) forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout3, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout3 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout3 != null) {
        setTimeout(this.nextCallback, timeout3);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react5.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react5.default.cloneElement(import_react5.default.Children.only(children), childProps))
      );
    };
    return Transition3;
  }(import_react5.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types12.default.shape({
      current: typeof Element === "undefined" ? import_prop_types12.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types12.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types12.default.oneOfType([import_prop_types12.default.func.isRequired, import_prop_types12.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types12.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types12.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types12.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types12.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types12.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types12.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types12.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types12.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types12.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types12.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types12.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types12.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types12.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/react-transition-group/esm/TransitionGroup.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e2) {
    if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e2;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types13 = __toESM(require_prop_types());
  var import_react7 = __toESM(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react6 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react6.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children) import_react6.Children.map(children, function(c2) {
      return c2;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i2;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i2 = 0; i2 < nextKeysPending[nextKey].length; i2++) {
          var pendingNextKey = nextKeysPending[nextKey][i2];
          childMapping[nextKeysPending[nextKey][i2]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i2 = 0; i2 < pendingKeys.length; i2++) {
      childMapping[pendingKeys[i2]] = getValueForKey(pendingKeys[i2]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react6.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react6.isValidElement)(child)) return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react6.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react6.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react6.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react6.isValidElement)(prevChild)) {
        children[key] = (0, import_react6.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component2 === null) {
        return /* @__PURE__ */ import_react7.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react7.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react7.default.createElement(Component2, props, children));
    };
    return TransitionGroup2;
  }(import_react7.default.Component);
  TransitionGroup.propTypes = true ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: import_prop_types13.default.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: import_prop_types13.default.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: import_prop_types13.default.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: import_prop_types13.default.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: import_prop_types13.default.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: import_prop_types13.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_useTimeout = __toESM(require_useTimeout2());
  var import_elementTypeAcceptingRef = __toESM(require_elementTypeAcceptingRef2());
  var import_composeClasses4 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout3,
      easing: easing2,
      style: style4 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style4.transitionDuration) != null ? _style$transitionDura : typeof timeout3 === "number" ? timeout3 : timeout3[options.mode] || 0,
      easing: (_style$transitionTimi = style4.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style4.transitionDelay
    };
  }

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_utils7 = __toESM(require_utils());

  // node_modules/@mui/material/Collapse/collapseClasses.js
  var import_generateUtilityClasses = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass5 = __toESM(require_generateUtilityClass2());
  function getCollapseUtilityClass(slot) {
    return (0, import_generateUtilityClass5.default)("MuiCollapse", slot);
  }
  var collapseClasses = (0, import_generateUtilityClasses.default)("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);
  var collapseClasses_default = collapseClasses;

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var _excluded19 = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      orientation,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", `${orientation}`],
      entered: ["entered"],
      hidden: ["hidden"],
      wrapper: ["wrapper", `${orientation}`],
      wrapperInner: ["wrapperInner", `${orientation}`]
    };
    return (0, import_composeClasses4.default)(slots, getCollapseUtilityClass, classes2);
  };
  var CollapseRoot = styled_default2("div", {
    name: "MuiCollapse",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.orientation], ownerState.state === "entered" && styles8.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles8.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    height: 0,
    overflow: "hidden",
    transition: theme.transitions.create("height")
  }, ownerState.orientation === "horizontal" && {
    height: "auto",
    width: 0,
    transition: theme.transitions.create("width")
  }, ownerState.state === "entered" && _extends({
    height: "auto",
    overflow: "visible"
  }, ownerState.orientation === "horizontal" && {
    width: "auto"
  }), ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && {
    visibility: "hidden"
  }));
  var CollapseWrapper = styled_default2("div", {
    name: "MuiCollapse",
    slot: "Wrapper",
    overridesResolver: (props, styles8) => styles8.wrapper
  })(({
    ownerState
  }) => _extends({
    // Hack to get children with a negative margin to not falsify the height computation.
    display: "flex",
    width: "100%"
  }, ownerState.orientation === "horizontal" && {
    width: "auto",
    height: "100%"
  }));
  var CollapseWrapperInner = styled_default2("div", {
    name: "MuiCollapse",
    slot: "WrapperInner",
    overridesResolver: (props, styles8) => styles8.wrapperInner
  })(({
    ownerState
  }) => _extends({
    width: "100%"
  }, ownerState.orientation === "horizontal" && {
    width: "auto",
    height: "100%"
  }));
  var Collapse = /* @__PURE__ */ React25.forwardRef(function Collapse2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCollapse"
    });
    const {
      addEndListener,
      children,
      className,
      collapsedSize: collapsedSizeProp = "0px",
      component,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      orientation = "vertical",
      style: style4,
      timeout: timeout3 = duration.standard,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
    const ownerState = _extends({}, props, {
      orientation,
      collapsedSize: collapsedSizeProp
    });
    const classes2 = useUtilityClasses2(ownerState);
    const theme = useTheme6();
    const timer = (0, import_useTimeout.default)();
    const wrapperRef = React25.useRef(null);
    const autoTransitionDuration = React25.useRef();
    const collapsedSize2 = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
    const isHorizontal2 = orientation === "horizontal";
    const size = isHorizontal2 ? "width" : "height";
    const nodeRef = React25.useRef(null);
    const handleRef = (0, import_utils7.useForkRef)(ref, nodeRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal2 ? "clientWidth" : "clientHeight"] : 0;
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      if (wrapperRef.current && isHorizontal2) {
        wrapperRef.current.style.position = "absolute";
      }
      node2.style[size] = collapsedSize2;
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const wrapperSize = getWrapperSize();
      if (wrapperRef.current && isHorizontal2) {
        wrapperRef.current.style.position = "";
      }
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "enter"
      });
      if (timeout3 === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = `${wrapperSize}px`;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback((node2, isAppearing) => {
      node2.style[size] = "auto";
      if (onEntered) {
        onEntered(node2, isAppearing);
      }
    });
    const handleExit = normalizedTransitionCallback((node2) => {
      node2.style[size] = `${getWrapperSize()}px`;
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleExiting = normalizedTransitionCallback((node2) => {
      const wrapperSize = getWrapperSize();
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "exit"
      });
      if (timeout3 === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = collapsedSize2;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onExiting) {
        onExiting(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (timeout3 === "auto") {
        timer.start(autoTransitionDuration.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(TransitionComponent, _extends({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      timeout: timeout3 === "auto" ? null : timeout3
    }, other, {
      children: (state, childProps) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CollapseRoot, _extends({
        as: component,
        className: clsx_default(classes2.root, className, {
          "entered": classes2.entered,
          "exited": !inProp && collapsedSize2 === "0px" && classes2.hidden
        }[state]),
        style: _extends({
          [isHorizontal2 ? "minWidth" : "minHeight"]: collapsedSize2
        }, style4),
        ref: handleRef
      }, childProps, {
        // `ownerState` is set after `childProps` to override any existing `ownerState` property in `childProps`
        // that might have been forwarded from the Transition component.
        ownerState: _extends({}, ownerState, {
          state
        }),
        children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CollapseWrapper, {
          ownerState: _extends({}, ownerState, {
            state
          }),
          className: classes2.wrapper,
          ref: wrapperRef,
          children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CollapseWrapperInner, {
            ownerState: _extends({}, ownerState, {
              state
            }),
            className: classes2.wrapperInner,
            children
          })
        })
      }))
    }));
  });
  true ? Collapse.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types14.default.func,
    /**
     * The content node to be collapsed.
     */
    children: import_prop_types14.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types14.default.object,
    /**
     * @ignore
     */
    className: import_prop_types14.default.string,
    /**
     * The width (horizontal) or height (vertical) of the container when collapsed.
     * @default '0px'
     */
    collapsedSize: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_elementTypeAcceptingRef.default,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types14.default.oneOfType([import_prop_types14.default.shape({
      enter: import_prop_types14.default.string,
      exit: import_prop_types14.default.string
    }), import_prop_types14.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types14.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types14.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types14.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types14.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types14.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types14.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types14.default.func,
    /**
     * The transition orientation.
     * @default 'vertical'
     */
    orientation: import_prop_types14.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    style: import_prop_types14.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default duration.standard
     */
    timeout: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["auto"]), import_prop_types14.default.number, import_prop_types14.default.shape({
      appear: import_prop_types14.default.number,
      enter: import_prop_types14.default.number,
      exit: import_prop_types14.default.number
    })])
  } : void 0;
  Collapse.muiSupportAuto = true;
  var Collapse_default = Collapse;

  // node_modules/@mui/material/Paper/Paper.js
  init_extends();
  var React26 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_integerPropType = __toESM(require_integerPropType2());
  var import_chainPropTypes = __toESM(require_chainPropTypes2());
  var import_composeClasses5 = __toESM(require_composeClasses2());
  var import_colorManipulator3 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Paper/paperClasses.js
  var import_generateUtilityClasses2 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass6 = __toESM(require_generateUtilityClass2());
  function getPaperUtilityClass(slot) {
    return (0, import_generateUtilityClass6.default)("MuiPaper", slot);
  }
  var paperClasses = (0, import_generateUtilityClasses2.default)("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
  var paperClasses_default = paperClasses;

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var _excluded20 = ["className", "component", "elevation", "square", "variant"];
  var useUtilityClasses3 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return (0, import_composeClasses5.default)(slots, getPaperUtilityClass, classes2);
  };
  var PaperRoot = styled_default2("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], !ownerState.square && styles8.rounded, ownerState.variant === "elevation" && styles8[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${(0, import_colorManipulator3.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${(0, import_colorManipulator3.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  var Paper = /* @__PURE__ */ React26.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes2 = useUtilityClasses3(ownerState);
    if (true) {
      const theme = useTheme6();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types15.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types15.default.object,
    /**
     * @ignore
     */
    className: import_prop_types15.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types15.default.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: (0, import_chainPropTypes.default)(import_integerPropType.default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types15.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["elevation", "outlined"]), import_prop_types15.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/Accordion/AccordionContext.js
  var React27 = __toESM(require_react());
  var AccordionContext = /* @__PURE__ */ React27.createContext({});
  if (true) {
    AccordionContext.displayName = "AccordionContext";
  }
  var AccordionContext_default = AccordionContext;

  // node_modules/@mui/material/utils/useControlled.js
  var import_useControlled = __toESM(require_useControlled2());
  var useControlled_default = import_useControlled.default;

  // node_modules/@mui/material/utils/useSlot.js
  init_extends();
  var import_useForkRef = __toESM(require_useForkRef2());

  // node_modules/@mui/base/utils/appendOwnerState.js
  init_extends();

  // node_modules/@mui/base/utils/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }

  // node_modules/@mui/base/utils/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent(elementType)) {
      return otherProps;
    }
    return _extends({}, otherProps, {
      ownerState: _extends({}, otherProps.ownerState, ownerState)
    });
  }

  // node_modules/@mui/base/utils/areArraysEqual.js
  function areArraysEqual(array1, array2, itemComparer = (a2, b2) => a2 === b2) {
    return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
  }

  // node_modules/@mui/base/utils/ClassNameConfigurator.js
  var React28 = __toESM(require_react());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var defaultContextValue = {
    disableDefaultClasses: false
  };
  var ClassNameConfiguratorContext = /* @__PURE__ */ React28.createContext(defaultContextValue);
  if (true) {
    ClassNameConfiguratorContext.displayName = "ClassNameConfiguratorContext";
  }
  function useClassNamesOverride(generateUtilityClass121) {
    const {
      disableDefaultClasses
    } = React28.useContext(ClassNameConfiguratorContext);
    return (slot) => {
      if (disableDefaultClasses) {
        return "";
      }
      return generateUtilityClass121(slot);
    };
  }

  // node_modules/@mui/base/utils/extractEventHandlers.js
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/resolveComponentProps.js
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  init_extends();
  var import_utils8 = __toESM(require_node2());

  // node_modules/@mui/base/utils/mergeSlotProps.js
  init_extends();

  // node_modules/@mui/base/utils/omitEventHandlers.js
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/mergeSlotProps.js
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  var _excluded21 = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded21);
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps(_extends({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = (0, import_utils8.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState(elementType, _extends({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }

  // node_modules/@mui/material/utils/useSlot.js
  var _excluded25 = ["className", "elementType", "ownerState", "externalForwardedProps", "getSlotOwnerState", "internalForwardedProps"];
  var _excluded26 = ["component", "slots", "slotProps"];
  var _excluded33 = ["component"];
  function useSlot(name, parameters) {
    const {
      className,
      elementType: initialElementType,
      ownerState,
      externalForwardedProps,
      getSlotOwnerState,
      internalForwardedProps
    } = parameters, useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded25);
    const {
      component: rootComponent,
      slots = {
        [name]: void 0
      },
      slotProps = {
        [name]: void 0
      }
    } = externalForwardedProps, other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded26);
    const elementType = slots[name] || initialElementType;
    const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);
    const _mergeSlotProps = mergeSlotProps(_extends({
      className
    }, useSlotPropsParams, {
      externalForwardedProps: name === "root" ? other : void 0,
      externalSlotProps: resolvedComponentsProps
    })), {
      props: {
        component: slotComponent
      },
      internalRef
    } = _mergeSlotProps, mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded33);
    const ref = (0, import_useForkRef.default)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);
    const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};
    const finalOwnerState = _extends({}, ownerState, slotOwnerState);
    const LeafComponent = name === "root" ? slotComponent || rootComponent : slotComponent;
    const props = appendOwnerState(elementType, _extends({}, name === "root" && !rootComponent && !slots[name] && internalForwardedProps, name !== "root" && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {
      as: LeafComponent
    }, {
      ref
    }), finalOwnerState);
    Object.keys(slotOwnerState).forEach((propName) => {
      delete props[propName];
    });
    return [elementType, props];
  }

  // node_modules/@mui/material/Accordion/accordionClasses.js
  var import_generateUtilityClasses3 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass7 = __toESM(require_generateUtilityClass2());
  function getAccordionUtilityClass(slot) {
    return (0, import_generateUtilityClass7.default)("MuiAccordion", slot);
  }
  var accordionClasses = (0, import_generateUtilityClasses3.default)("MuiAccordion", ["root", "rounded", "expanded", "disabled", "gutters", "region"]);
  var accordionClasses_default = accordionClasses;

  // node_modules/@mui/material/Accordion/Accordion.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var _excluded27 = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "slots", "slotProps", "TransitionComponent", "TransitionProps"];
  var useThemeProps3 = createUseThemeProps("MuiAccordion");
  var useUtilityClasses4 = (ownerState) => {
    const {
      classes: classes2,
      square,
      expanded,
      disabled,
      disableGutters
    } = ownerState;
    const slots = {
      root: ["root", !square && "rounded", expanded && "expanded", disabled && "disabled", !disableGutters && "gutters"],
      region: ["region"]
    };
    return (0, import_composeClasses6.default)(slots, getAccordionUtilityClass, classes2);
  };
  var AccordionRoot = styled_default2(Paper_default, {
    name: "MuiAccordion",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${accordionClasses_default.region}`]: styles8.region
      }, styles8.root, !ownerState.square && styles8.rounded, !ownerState.disableGutters && styles8.gutters];
    }
  })(({
    theme
  }) => {
    const transition = {
      duration: theme.transitions.duration.shortest
    };
    return {
      position: "relative",
      transition: theme.transitions.create(["margin"], transition),
      overflowAnchor: "none",
      // Keep the same scrolling position
      "&::before": {
        position: "absolute",
        left: 0,
        top: -1,
        right: 0,
        height: 1,
        content: '""',
        opacity: 1,
        backgroundColor: (theme.vars || theme).palette.divider,
        transition: theme.transitions.create(["opacity", "background-color"], transition)
      },
      "&:first-of-type": {
        "&::before": {
          display: "none"
        }
      },
      [`&.${accordionClasses_default.expanded}`]: {
        "&::before": {
          opacity: 0
        },
        "&:first-of-type": {
          marginTop: 0
        },
        "&:last-of-type": {
          marginBottom: 0
        },
        "& + &": {
          "&::before": {
            display: "none"
          }
        }
      },
      [`&.${accordionClasses_default.disabled}`]: {
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      }
    };
  }, ({
    theme
  }) => ({
    variants: [{
      props: (props) => !props.square,
      style: {
        borderRadius: 0,
        "&:first-of-type": {
          borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
          borderTopRightRadius: (theme.vars || theme).shape.borderRadius
        },
        "&:last-of-type": {
          borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
          borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
          // Fix a rendering issue on Edge
          "@supports (-ms-ime-align: auto)": {
            borderBottomLeftRadius: 0,
            borderBottomRightRadius: 0
          }
        }
      }
    }, {
      props: (props) => !props.disableGutters,
      style: {
        [`&.${accordionClasses_default.expanded}`]: {
          margin: "16px 0"
        }
      }
    }]
  }));
  var Accordion = /* @__PURE__ */ React29.forwardRef(function Accordion2(inProps, ref) {
    const props = useThemeProps3({
      props: inProps,
      name: "MuiAccordion"
    });
    const {
      children: childrenProp,
      className,
      defaultExpanded = false,
      disabled = false,
      disableGutters = false,
      expanded: expandedProp,
      onChange,
      square = false,
      slots = {},
      slotProps = {},
      TransitionComponent: TransitionComponentProp,
      TransitionProps: TransitionPropsProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
    const [expanded, setExpandedState] = useControlled_default({
      controlled: expandedProp,
      default: defaultExpanded,
      name: "Accordion",
      state: "expanded"
    });
    const handleChange = React29.useCallback((event) => {
      setExpandedState(!expanded);
      if (onChange) {
        onChange(event, !expanded);
      }
    }, [expanded, onChange, setExpandedState]);
    const [summary, ...children] = React29.Children.toArray(childrenProp);
    const contextValue = React29.useMemo(() => ({
      expanded,
      disabled,
      disableGutters,
      toggle: handleChange
    }), [expanded, disabled, disableGutters, handleChange]);
    const ownerState = _extends({}, props, {
      square,
      disabled,
      disableGutters,
      expanded
    });
    const classes2 = useUtilityClasses4(ownerState);
    const backwardCompatibleSlots = _extends({
      transition: TransitionComponentProp
    }, slots);
    const backwardCompatibleSlotProps = _extends({
      transition: TransitionPropsProp
    }, slotProps);
    const [TransitionSlot, transitionProps] = useSlot("transition", {
      elementType: Collapse_default,
      externalForwardedProps: {
        slots: backwardCompatibleSlots,
        slotProps: backwardCompatibleSlotProps
      },
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(AccordionRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState,
      square
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime16.jsx)(AccordionContext_default.Provider, {
        value: contextValue,
        children: summary
      }), /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(TransitionSlot, _extends({
        in: expanded,
        timeout: "auto"
      }, transitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", {
          "aria-labelledby": summary.props.id,
          id: summary.props["aria-controls"],
          role: "region",
          className: classes2.region,
          children
        })
      }))]
    }));
  });
  true ? Accordion.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: (0, import_chainPropTypes2.default)(import_prop_types16.default.node.isRequired, (props) => {
      const summary = React29.Children.toArray(props.children)[0];
      if ((0, import_react_is.isFragment)(summary)) {
        return new Error("MUI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.");
      }
      if (!/* @__PURE__ */ React29.isValidElement(summary)) {
        return new Error("MUI: Expected the first child of Accordion to be a valid element.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types16.default.object,
    /**
     * @ignore
     */
    className: import_prop_types16.default.string,
    /**
     * If `true`, expands the accordion by default.
     * @default false
     */
    defaultExpanded: import_prop_types16.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types16.default.bool,
    /**
     * If `true`, it removes the margin between two expanded accordion items and the increase of height.
     * @default false
     */
    disableGutters: import_prop_types16.default.bool,
    /**
     * If `true`, expands the accordion, otherwise collapse it.
     * Setting this prop enables control over the accordion.
     */
    expanded: import_prop_types16.default.bool,
    /**
     * Callback fired when the expand/collapse state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {boolean} expanded The `expanded` state of the accordion.
     */
    onChange: import_prop_types16.default.func,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types16.default.shape({
      transition: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types16.default.shape({
      transition: import_prop_types16.default.elementType
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types16.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @deprecated Use `slots.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     */
    TransitionComponent: import_prop_types16.default.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     */
    TransitionProps: import_prop_types16.default.object
  } : void 0;
  var Accordion_default = Accordion;

  // node_modules/@mui/material/AccordionActions/AccordionActions.js
  init_extends();
  var React30 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());
  var import_composeClasses7 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/AccordionActions/accordionActionsClasses.js
  var import_generateUtilityClasses4 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass8 = __toESM(require_generateUtilityClass2());
  function getAccordionActionsUtilityClass(slot) {
    return (0, import_generateUtilityClass8.default)("MuiAccordionActions", slot);
  }
  var accordionActionsClasses = (0, import_generateUtilityClasses4.default)("MuiAccordionActions", ["root", "spacing"]);
  var accordionActionsClasses_default = accordionActionsClasses;

  // node_modules/@mui/material/AccordionActions/AccordionActions.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var _excluded28 = ["className", "disableSpacing"];
  var useThemeProps4 = createUseThemeProps("MuiAccordionActions");
  var useUtilityClasses5 = (ownerState) => {
    const {
      classes: classes2,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return (0, import_composeClasses7.default)(slots, getAccordionActionsUtilityClass, classes2);
  };
  var AccordionActionsRoot = styled_default2("div", {
    name: "MuiAccordionActions",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.disableSpacing && styles8.spacing];
    }
  })({
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end",
    variants: [{
      props: (props) => !props.disableSpacing,
      style: {
        "& > :not(style) ~ :not(style)": {
          marginLeft: 8
        }
      }
    }]
  });
  var AccordionActions = /* @__PURE__ */ React30.forwardRef(function AccordionActions2(inProps, ref) {
    const props = useThemeProps4({
      props: inProps,
      name: "MuiAccordionActions"
    });
    const {
      className,
      disableSpacing = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes2 = useUtilityClasses5(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AccordionActionsRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? AccordionActions.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types17.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types17.default.object,
    /**
     * @ignore
     */
    className: import_prop_types17.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types17.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
  } : void 0;
  var AccordionActions_default = AccordionActions;

  // node_modules/@mui/material/AccordionDetails/AccordionDetails.js
  init_extends();
  var React31 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());
  var import_composeClasses8 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/AccordionDetails/accordionDetailsClasses.js
  var import_generateUtilityClasses5 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass9 = __toESM(require_generateUtilityClass2());
  function getAccordionDetailsUtilityClass(slot) {
    return (0, import_generateUtilityClass9.default)("MuiAccordionDetails", slot);
  }
  var accordionDetailsClasses = (0, import_generateUtilityClasses5.default)("MuiAccordionDetails", ["root"]);
  var accordionDetailsClasses_default = accordionDetailsClasses;

  // node_modules/@mui/material/AccordionDetails/AccordionDetails.js
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var _excluded29 = ["className"];
  var useThemeProps5 = createUseThemeProps("MuiAccordionDetails");
  var useUtilityClasses6 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses8.default)(slots, getAccordionDetailsUtilityClass, classes2);
  };
  var AccordionDetailsRoot = styled_default2("div", {
    name: "MuiAccordionDetails",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => ({
    padding: theme.spacing(1, 2, 2)
  }));
  var AccordionDetails = /* @__PURE__ */ React31.forwardRef(function AccordionDetails2(inProps, ref) {
    const props = useThemeProps5({
      props: inProps,
      name: "MuiAccordionDetails"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
    const ownerState = props;
    const classes2 = useUtilityClasses6(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AccordionDetailsRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? AccordionDetails.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types18.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types18.default.object,
    /**
     * @ignore
     */
    className: import_prop_types18.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
  } : void 0;
  var AccordionDetails_default = AccordionDetails;

  // node_modules/@mui/material/AccordionSummary/AccordionSummary.js
  init_extends();
  var React35 = __toESM(require_react());
  var import_prop_types22 = __toESM(require_prop_types());
  var import_composeClasses10 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  init_extends();
  var React34 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());
  var import_refType = __toESM(require_refType2());
  var import_elementTypeAcceptingRef2 = __toESM(require_elementTypeAcceptingRef2());
  var import_composeClasses9 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/utils/useForkRef.js
  var import_useForkRef2 = __toESM(require_useForkRef2());
  var useForkRef_default = import_useForkRef2.default;

  // node_modules/@mui/material/utils/useEventCallback.js
  var import_useEventCallback = __toESM(require_useEventCallback2());
  var useEventCallback_default = import_useEventCallback.default;

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  var import_useIsFocusVisible = __toESM(require_useIsFocusVisible2());
  var useIsFocusVisible_default = import_useIsFocusVisible.default;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  init_extends();
  var React33 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());
  var import_useTimeout2 = __toESM(require_useTimeout2());

  // node_modules/@mui/material/ButtonBase/Ripple.js
  var React32 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  function Ripple(props) {
    const {
      className,
      classes: classes2,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout3
    } = props;
    const [leaving, setLeaving] = React32.useState(false);
    const rippleClassName = clsx_default(className, classes2.ripple, classes2.rippleVisible, pulsate && classes2.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_default(classes2.child, leaving && classes2.childLeaving, pulsate && classes2.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React32.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout3);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout3]);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types19.default.object.isRequired,
    className: import_prop_types19.default.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: import_prop_types19.default.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: import_prop_types19.default.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: import_prop_types19.default.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: import_prop_types19.default.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: import_prop_types19.default.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: import_prop_types19.default.number,
    /**
     * exit delay
     */
    timeout: import_prop_types19.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  var import_generateUtilityClasses6 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass10 = __toESM(require_generateUtilityClass2());
  function getTouchRippleUtilityClass(slot) {
    return (0, import_generateUtilityClass10.default)("MuiTouchRipple", slot);
  }
  var touchRippleClasses = (0, import_generateUtilityClasses6.default)("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var _excluded30 = ["center", "classes", "className"];
  var _ = (t2) => t2;
  var _t;
  var _t2;
  var _t3;
  var _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = (0, import_styled_engine7.keyframes)(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  var exitKeyframe = (0, import_styled_engine7.keyframes)(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  var pulsateKeyframe = (0, import_styled_engine7.keyframes)(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  var TouchRippleRoot = styled_default2("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default2(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  var TouchRipple = /* @__PURE__ */ React33.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes: classes2 = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
    const [ripples, setRipples] = React33.useState([]);
    const nextKey = React33.useRef(0);
    const rippleCallback = React33.useRef(null);
    React33.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React33.useRef(false);
    const startTimer = (0, import_useTimeout2.default)();
    const startTimerCommit = React33.useRef(null);
    const container = React33.useRef(null);
    const startCommit = React33.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(TouchRippleRipple, {
        classes: {
          ripple: clsx_default(classes2.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_default(classes2.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_default(classes2.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_default(classes2.child, touchRippleClasses_default.child),
          childLeaving: clsx_default(classes2.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_default(classes2.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes2]);
    const start2 = React33.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.start(DELAY_RIPPLE, () => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          });
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit, startTimer]);
    const pulsate = React33.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React33.useCallback((event, cb) => {
      startTimer.clear();
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.start(0, () => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, [startTimer]);
    React33.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(TouchRippleRoot, _extends({
      className: clsx_default(touchRippleClasses_default.root, classes2.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  true ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: import_prop_types20.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types20.default.object,
    /**
     * @ignore
     */
    className: import_prop_types20.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  var import_generateUtilityClasses7 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass11 = __toESM(require_generateUtilityClass2());
  function getButtonBaseUtilityClass(slot) {
    return (0, import_generateUtilityClass11.default)("MuiButtonBase", slot);
  }
  var buttonBaseClasses = (0, import_generateUtilityClasses7.default)("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var _excluded31 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = (0, import_composeClasses9.default)(slots, getButtonBaseUtilityClass, classes2);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default2("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React34.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const buttonRef = React34.useRef(null);
    const rippleRef = React34.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React34.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React34.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React34.useState(false);
    React34.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React34.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React34.useRef(false);
    const handleKeyDown = useEventCallback_default((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, focusVisibleRef, buttonRef);
    if (true) {
      React34.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes2 = useUtilityClasses7(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx_default(classes2.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(TouchRipple_default, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  true ? ButtonBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: import_refType.default,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: import_prop_types21.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types21.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types21.default.object,
    /**
     * @ignore
     */
    className: import_prop_types21.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_elementTypeAcceptingRef2.default,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types21.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types21.default.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: import_prop_types21.default.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: import_prop_types21.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types21.default.string,
    /**
     * @ignore
     */
    href: import_prop_types21.default.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: import_prop_types21.default.elementType,
    /**
     * @ignore
     */
    onBlur: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onContextMenu: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onDragLeave: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types21.default.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onMouseUp: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onTouchEnd: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onTouchMove: import_prop_types21.default.func,
    /**
     * @ignore
     */
    onTouchStart: import_prop_types21.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types21.default.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: import_prop_types21.default.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.shape({
      current: import_prop_types21.default.shape({
        pulsate: import_prop_types21.default.func.isRequired,
        start: import_prop_types21.default.func.isRequired,
        stop: import_prop_types21.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["button", "reset", "submit"]), import_prop_types21.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // node_modules/@mui/material/AccordionSummary/accordionSummaryClasses.js
  var import_generateUtilityClasses8 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass12 = __toESM(require_generateUtilityClass2());
  function getAccordionSummaryUtilityClass(slot) {
    return (0, import_generateUtilityClass12.default)("MuiAccordionSummary", slot);
  }
  var accordionSummaryClasses = (0, import_generateUtilityClasses8.default)("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]);
  var accordionSummaryClasses_default = accordionSummaryClasses;

  // node_modules/@mui/material/AccordionSummary/AccordionSummary.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _excluded34 = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];
  var useThemeProps6 = createUseThemeProps("MuiAccordionSummary");
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes: classes2,
      expanded,
      disabled,
      disableGutters
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", disabled && "disabled", !disableGutters && "gutters"],
      focusVisible: ["focusVisible"],
      content: ["content", expanded && "expanded", !disableGutters && "contentGutters"],
      expandIconWrapper: ["expandIconWrapper", expanded && "expanded"]
    };
    return (0, import_composeClasses10.default)(slots, getAccordionSummaryUtilityClass, classes2);
  };
  var AccordionSummaryRoot = styled_default2(ButtonBase_default, {
    name: "MuiAccordionSummary",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => {
    const transition = {
      duration: theme.transitions.duration.shortest
    };
    return {
      display: "flex",
      minHeight: 48,
      padding: theme.spacing(0, 2),
      transition: theme.transitions.create(["min-height", "background-color"], transition),
      [`&.${accordionSummaryClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${accordionSummaryClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`&:hover:not(.${accordionSummaryClasses_default.disabled})`]: {
        cursor: "pointer"
      },
      variants: [{
        props: (props) => !props.disableGutters,
        style: {
          [`&.${accordionSummaryClasses_default.expanded}`]: {
            minHeight: 64
          }
        }
      }]
    };
  });
  var AccordionSummaryContent = styled_default2("div", {
    name: "MuiAccordionSummary",
    slot: "Content",
    overridesResolver: (props, styles8) => styles8.content
  })(({
    theme
  }) => ({
    display: "flex",
    flexGrow: 1,
    margin: "12px 0",
    variants: [{
      props: (props) => !props.disableGutters,
      style: {
        transition: theme.transitions.create(["margin"], {
          duration: theme.transitions.duration.shortest
        }),
        [`&.${accordionSummaryClasses_default.expanded}`]: {
          margin: "20px 0"
        }
      }
    }]
  }));
  var AccordionSummaryExpandIconWrapper = styled_default2("div", {
    name: "MuiAccordionSummary",
    slot: "ExpandIconWrapper",
    overridesResolver: (props, styles8) => styles8.expandIconWrapper
  })(({
    theme
  }) => ({
    display: "flex",
    color: (theme.vars || theme).palette.action.active,
    transform: "rotate(0deg)",
    transition: theme.transitions.create("transform", {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${accordionSummaryClasses_default.expanded}`]: {
      transform: "rotate(180deg)"
    }
  }));
  var AccordionSummary = /* @__PURE__ */ React35.forwardRef(function AccordionSummary2(inProps, ref) {
    const props = useThemeProps6({
      props: inProps,
      name: "MuiAccordionSummary"
    });
    const {
      children,
      className,
      expandIcon,
      focusVisibleClassName,
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const {
      disabled = false,
      disableGutters,
      expanded,
      toggle
    } = React35.useContext(AccordionContext_default);
    const handleChange = (event) => {
      if (toggle) {
        toggle(event);
      }
      if (onClick) {
        onClick(event);
      }
    };
    const ownerState = _extends({}, props, {
      expanded,
      disabled,
      disableGutters
    });
    const classes2 = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(AccordionSummaryRoot, _extends({
      focusRipple: false,
      disableRipple: true,
      disabled,
      component: "div",
      "aria-expanded": expanded,
      className: clsx_default(classes2.root, className),
      focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
      onClick: handleChange,
      ref,
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AccordionSummaryContent, {
        className: classes2.content,
        ownerState,
        children
      }), expandIcon && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AccordionSummaryExpandIconWrapper, {
        className: classes2.expandIconWrapper,
        ownerState,
        children: expandIcon
      })]
    }));
  });
  true ? AccordionSummary.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types22.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types22.default.object,
    /**
     * @ignore
     */
    className: import_prop_types22.default.string,
    /**
     * The icon to display as the expand indicator.
     */
    expandIcon: import_prop_types22.default.node,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types22.default.string,
    /**
     * @ignore
     */
    onClick: import_prop_types22.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object])
  } : void 0;
  var AccordionSummary_default = AccordionSummary;

  // node_modules/@mui/material/Alert/Alert.js
  init_extends();
  var React43 = __toESM(require_react());
  var import_prop_types24 = __toESM(require_prop_types());
  var import_composeClasses12 = __toESM(require_composeClasses2());
  var import_colorManipulator5 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/utils/capitalize.js
  var import_capitalize5 = __toESM(require_capitalize2());
  var capitalize_default = import_capitalize5.default;

  // node_modules/@mui/material/Alert/alertClasses.js
  var import_generateUtilityClasses9 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass13 = __toESM(require_generateUtilityClass2());
  function getAlertUtilityClass(slot) {
    return (0, import_generateUtilityClass13.default)("MuiAlert", slot);
  }
  var alertClasses = (0, import_generateUtilityClasses9.default)("MuiAlert", ["root", "action", "icon", "message", "filled", "colorSuccess", "colorInfo", "colorWarning", "colorError", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  var alertClasses_default = alertClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  init_extends();
  var React36 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var import_chainPropTypes3 = __toESM(require_chainPropTypes2());
  var import_composeClasses11 = __toESM(require_composeClasses2());
  var import_colorManipulator4 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/IconButton/iconButtonClasses.js
  var import_generateUtilityClasses10 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass14 = __toESM(require_generateUtilityClass2());
  function getIconButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass14.default)("MuiIconButton", slot);
  }
  var iconButtonClasses = (0, import_generateUtilityClasses10.default)("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var iconButtonClasses_default = iconButtonClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var _excluded35 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes: classes2,
      disabled,
      color: color2,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize_default(color2)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
    };
    return (0, import_composeClasses11.default)(slots, getIconButtonUtilityClass, classes2);
  };
  var IconButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.color !== "default" && styles8[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles8[`edge${capitalize_default(ownerState.edge)}`], styles8[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator4.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette2 = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette2 == null ? void 0 : palette2.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette2 && {
        backgroundColor: theme.vars ? `rgba(${palette2.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator4.alpha)(palette2.main, theme.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses_default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  var IconButton = /* @__PURE__ */ React36.forwardRef(function IconButton2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
    const ownerState = _extends({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size
    });
    const classes2 = useUtilityClasses9(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(IconButtonRoot, _extends({
      className: clsx_default(classes2.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref
    }, other, {
      ownerState,
      children
    }));
  });
  true ? IconButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The icon to display.
     */
    children: (0, import_chainPropTypes3.default)(import_prop_types23.default.node, (props) => {
      const found = React36.Children.toArray(props.children).some((child) => /* @__PURE__ */ React36.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types23.default.object,
    /**
     * @ignore
     */
    className: import_prop_types23.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types23.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types23.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types23.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types23.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types23.default.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["small", "medium", "large"]), import_prop_types23.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var React38 = __toESM(require_react());

  // node_modules/@mui/material/utils/createSvgIcon.js
  init_extends();
  var React37 = __toESM(require_react());
  var import_SvgIcon = __toESM(require_SvgIcon2());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component2(props, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_SvgIcon.default, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (true) {
      Component2.displayName = `${displayName}Icon`;
    }
    Component2.muiName = import_SvgIcon.default.muiName;
    return /* @__PURE__ */ React37.memo(/* @__PURE__ */ React37.forwardRef(Component2));
  }

  // node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var SuccessOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");

  // node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js
  var React39 = __toESM(require_react());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var ReportProblemOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime29.jsx)("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");

  // node_modules/@mui/material/internal/svg-icons/ErrorOutline.js
  var React40 = __toESM(require_react());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var ErrorOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");

  // node_modules/@mui/material/internal/svg-icons/InfoOutlined.js
  var React41 = __toESM(require_react());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var InfoOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime31.jsx)("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");

  // node_modules/@mui/material/internal/svg-icons/Close.js
  var React42 = __toESM(require_react());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime32.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/Alert/Alert.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var _excluded36 = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
  var useThemeProps7 = createUseThemeProps("MuiAlert");
  var useUtilityClasses10 = (ownerState) => {
    const {
      variant,
      color: color2,
      severity,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2 || severity)}`, `${variant}${capitalize_default(color2 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return (0, import_composeClasses12.default)(slots, getAlertUtilityClass, classes2);
  };
  var AlertRoot = styled_default2(Paper_default, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], styles8[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme
  }) => {
    const getColor = theme.palette.mode === "light" ? import_colorManipulator5.darken : import_colorManipulator5.lighten;
    const getBackgroundColor = theme.palette.mode === "light" ? import_colorManipulator5.lighten : import_colorManipulator5.darken;
    return _extends({}, theme.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px",
      variants: [...Object.entries(theme.palette).filter(([, value]) => value.main && value.light).map(([color2]) => ({
        props: {
          colorSeverity: color2,
          variant: "standard"
        },
        style: {
          color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
          backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color2}StandardBg`] : getBackgroundColor(theme.palette[color2].light, 0.9),
          [`& .${alertClasses_default.icon}`]: theme.vars ? {
            color: theme.vars.palette.Alert[`${color2}IconColor`]
          } : {
            color: theme.palette[color2].main
          }
        }
      })), ...Object.entries(theme.palette).filter(([, value]) => value.main && value.light).map(([color2]) => ({
        props: {
          colorSeverity: color2,
          variant: "outlined"
        },
        style: {
          color: theme.vars ? theme.vars.palette.Alert[`${color2}Color`] : getColor(theme.palette[color2].light, 0.6),
          border: `1px solid ${(theme.vars || theme).palette[color2].light}`,
          [`& .${alertClasses_default.icon}`]: theme.vars ? {
            color: theme.vars.palette.Alert[`${color2}IconColor`]
          } : {
            color: theme.palette[color2].main
          }
        }
      })), ...Object.entries(theme.palette).filter(([, value]) => value.main && value.dark).map(([color2]) => ({
        props: {
          colorSeverity: color2,
          variant: "filled"
        },
        style: _extends({
          fontWeight: theme.typography.fontWeightMedium
        }, theme.vars ? {
          color: theme.vars.palette.Alert[`${color2}FilledColor`],
          backgroundColor: theme.vars.palette.Alert[`${color2}FilledBg`]
        } : {
          backgroundColor: theme.palette.mode === "dark" ? theme.palette[color2].dark : theme.palette[color2].main,
          color: theme.palette.getContrastText(theme.palette[color2].main)
        })
      }))]
    });
  });
  var AlertIcon = styled_default2("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles8) => styles8.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  var AlertMessage = styled_default2("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles8) => styles8.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  var AlertAction = styled_default2("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles8) => styles8.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  var defaultIconMapping = {
    success: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SuccessOutlined_default, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ReportProblemOutlined_default, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ErrorOutline_default, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(InfoOutlined_default, {
      fontSize: "inherit"
    })
  };
  var Alert = /* @__PURE__ */ React43.forwardRef(function Alert2(inProps, ref) {
    const props = useThemeProps7({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color2,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
    const ownerState = _extends({}, props, {
      color: color2,
      severity,
      variant,
      colorSeverity: color2 || severity
    });
    const classes2 = useUtilityClasses10(ownerState);
    const externalForwardedProps = {
      slots: _extends({
        closeButton: components.CloseButton,
        closeIcon: components.CloseIcon
      }, slots),
      slotProps: _extends({}, componentsProps, slotProps)
    };
    const [CloseButtonSlot, closeButtonProps] = useSlot("closeButton", {
      elementType: IconButton_default,
      externalForwardedProps,
      ownerState
    });
    const [CloseIconSlot, closeIconProps] = useSlot("closeIcon", {
      elementType: Close_default,
      externalForwardedProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AlertIcon, {
        ownerState,
        className: classes2.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AlertMessage, {
        ownerState,
        className: classes2.message,
        children
      }), action != null ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AlertAction, {
        ownerState,
        className: classes2.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AlertAction, {
        ownerState,
        className: classes2.action,
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CloseButtonSlot, _extends({
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose
        }, closeButtonProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CloseIconSlot, _extends({
            fontSize: "small"
          }, closeIconProps))
        }))
      }) : null]
    }));
  });
  true ? Alert.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: import_prop_types24.default.node,
    /**
     * The content of the component.
     */
    children: import_prop_types24.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types24.default.object,
    /**
     * @ignore
     */
    className: import_prop_types24.default.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types24.default.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["error", "info", "success", "warning"]), import_prop_types24.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    components: import_prop_types24.default.shape({
      CloseButton: import_prop_types24.default.elementType,
      CloseIcon: import_prop_types24.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    componentsProps: import_prop_types24.default.shape({
      closeButton: import_prop_types24.default.object,
      closeIcon: import_prop_types24.default.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: import_prop_types24.default.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: import_prop_types24.default.shape({
      error: import_prop_types24.default.node,
      info: import_prop_types24.default.node,
      success: import_prop_types24.default.node,
      warning: import_prop_types24.default.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types24.default.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types24.default.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["error", "info", "success", "warning"]), import_prop_types24.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types24.default.shape({
      closeButton: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object]),
      closeIcon: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types24.default.shape({
      closeButton: import_prop_types24.default.elementType,
      closeIcon: import_prop_types24.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["filled", "outlined", "standard"]), import_prop_types24.default.string])
  } : void 0;
  var Alert_default = Alert;

  // node_modules/@mui/material/AlertTitle/AlertTitle.js
  init_extends();
  var React45 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());
  var import_composeClasses14 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Typography/Typography.js
  init_extends();
  var React44 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());
  var import_styleFunctionSx10 = __toESM(require_styleFunctionSx2());
  var import_composeClasses13 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Typography/typographyClasses.js
  var import_generateUtilityClasses11 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass15 = __toESM(require_generateUtilityClass2());
  function getTypographyUtilityClass(slot) {
    return (0, import_generateUtilityClass15.default)("MuiTypography", slot);
  }
  var typographyClasses = (0, import_generateUtilityClasses11.default)("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  var typographyClasses_default = typographyClasses;

  // node_modules/@mui/material/Typography/Typography.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var _excluded37 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  var useUtilityClasses11 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return (0, import_composeClasses13.default)(slots, getTypographyUtilityClass, classes2);
  };
  var TypographyRoot = styled_default2("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.variant && styles8[ownerState.variant], ownerState.align !== "inherit" && styles8[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles8.noWrap, ownerState.gutterBottom && styles8.gutterBottom, ownerState.paragraph && styles8.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant === "inherit" && {
    // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
    font: "inherit"
  }, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors = (color2) => {
    return colorTransformations[color2] || color2;
  };
  var Typography = /* @__PURE__ */ React44.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors(themeProps.color);
    const props = (0, import_styleFunctionSx10.extendSxProp)(_extends({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
    const ownerState = _extends({}, props, {
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component2 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes2 = useUtilityClasses11(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TypographyRoot, _extends({
      as: Component2,
      ref,
      ownerState,
      className: clsx_default(classes2.root, className)
    }, other));
  });
  true ? Typography.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: import_prop_types25.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types25.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types25.default.object,
    /**
     * @ignore
     */
    className: import_prop_types25.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types25.default.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: import_prop_types25.default.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: import_prop_types25.default.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: import_prop_types25.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types25.default.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: import_prop_types25.default.object
  } : void 0;
  var Typography_default = Typography;

  // node_modules/@mui/material/AlertTitle/alertTitleClasses.js
  var import_generateUtilityClasses12 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass16 = __toESM(require_generateUtilityClass2());
  function getAlertTitleUtilityClass(slot) {
    return (0, import_generateUtilityClass16.default)("MuiAlertTitle", slot);
  }
  var alertTitleClasses = (0, import_generateUtilityClasses12.default)("MuiAlertTitle", ["root"]);
  var alertTitleClasses_default = alertTitleClasses;

  // node_modules/@mui/material/AlertTitle/AlertTitle.js
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var _excluded38 = ["className"];
  var useThemeProps8 = createUseThemeProps("MuiAlertTitle");
  var useUtilityClasses12 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses14.default)(slots, getAlertTitleUtilityClass, classes2);
  };
  var AlertTitleRoot = styled_default2(Typography_default, {
    name: "MuiAlertTitle",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => {
    return {
      fontWeight: theme.typography.fontWeightMedium,
      marginTop: -2
    };
  });
  var AlertTitle = /* @__PURE__ */ React45.forwardRef(function AlertTitle2(inProps, ref) {
    const props = useThemeProps8({
      props: inProps,
      name: "MuiAlertTitle"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
    const ownerState = props;
    const classes2 = useUtilityClasses12(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(AlertTitleRoot, _extends({
      gutterBottom: true,
      component: "div",
      ownerState,
      ref,
      className: clsx_default(classes2.root, className)
    }, other));
  });
  true ? AlertTitle.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types26.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types26.default.object,
    /**
     * @ignore
     */
    className: import_prop_types26.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
  } : void 0;
  var AlertTitle_default = AlertTitle;

  // node_modules/@mui/material/AppBar/AppBar.js
  init_extends();
  var React46 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());
  var import_composeClasses15 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/AppBar/appBarClasses.js
  var import_generateUtilityClasses13 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass17 = __toESM(require_generateUtilityClass2());
  function getAppBarUtilityClass(slot) {
    return (0, import_generateUtilityClass17.default)("MuiAppBar", slot);
  }
  var appBarClasses = (0, import_generateUtilityClasses13.default)("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]);
  var appBarClasses_default = appBarClasses;

  // node_modules/@mui/material/AppBar/AppBar.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var _excluded39 = ["className", "color", "enableColorOnDark", "position"];
  var useUtilityClasses13 = (ownerState) => {
    const {
      color: color2,
      position: position2,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, `position${capitalize_default(position2)}`]
    };
    return (0, import_composeClasses15.default)(slots, getAppBarUtilityClass, classes2);
  };
  var joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
  var AppBarRoot = styled_default2(Paper_default, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`position${capitalize_default(ownerState.position)}`], styles8[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extends({
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === "fixed" && {
      position: "fixed",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }, ownerState.position === "absolute" && {
      position: "absolute",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "sticky" && {
      // ⚠️ sticky is not supported by IE11.
      position: "sticky",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "static" && {
      position: "static"
    }, ownerState.position === "relative" && {
      position: "relative"
    }, !theme.vars && _extends({}, ownerState.color === "default" && {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === "transparent" && _extends({
      backgroundColor: "transparent",
      color: "inherit"
    }, theme.palette.mode === "dark" && {
      backgroundImage: "none"
    })), theme.vars && _extends({}, ownerState.color === "default" && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
    }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
    }, {
      backgroundColor: "var(--AppBar-background)",
      color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
    }, ownerState.color === "transparent" && {
      backgroundImage: "none",
      backgroundColor: "transparent",
      color: "inherit"
    }));
  });
  var AppBar = /* @__PURE__ */ React46.forwardRef(function AppBar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color: color2 = "primary",
      enableColorOnDark = false,
      position: position2 = "fixed"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
    const ownerState = _extends({}, props, {
      color: color2,
      position: position2,
      enableColorOnDark
    });
    const classes2 = useUtilityClasses13(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(AppBarRoot, _extends({
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: clsx_default(classes2.root, className, position2 === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  true ? AppBar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types27.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types27.default.object,
    /**
     * @ignore
     */
    className: import_prop_types27.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), import_prop_types27.default.string]),
    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: import_prop_types27.default.bool,
    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: import_prop_types27.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object])
  } : void 0;
  var AppBar_default = AppBar;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  init_extends();
  var React66 = __toESM(require_react());
  var import_prop_types39 = __toESM(require_prop_types());
  var import_integerPropType2 = __toESM(require_integerPropType2());
  var import_chainPropTypes4 = __toESM(require_chainPropTypes2());

  // node_modules/@mui/base/composeClasses/index.js
  var import_utils10 = __toESM(require_node2());

  // node_modules/@mui/base/useBadge/useBadge.js
  var import_utils11 = __toESM(require_node2());
  function useBadge(parameters) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = parameters;
    const prevProps = (0, import_utils11.usePreviousProps)({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max2 = maxProp
    } = invisible ? prevProps : parameters;
    const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max2,
      displayValue
    };
  }

  // node_modules/@mui/base/generateUtilityClass/index.js
  var import_generateUtilityClass18 = __toESM(require_generateUtilityClass2());
  var GLOBAL_CLASS_PREFIX = "base";
  function buildStateClass(state) {
    return `${GLOBAL_CLASS_PREFIX}--${state}`;
  }
  function buildSlotClass(componentName, slot) {
    return `${GLOBAL_CLASS_PREFIX}-${componentName}-${slot}`;
  }
  function generateUtilityClass18(componentName, slot) {
    const globalStateClass = import_generateUtilityClass18.globalStateClasses[slot];
    return globalStateClass ? buildStateClass(globalStateClass) : buildSlotClass(componentName, slot);
  }

  // node_modules/@mui/base/generateUtilityClasses/index.js
  function generateUtilityClasses14(componentName, slots) {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass18(componentName, slot);
    });
    return result;
  }

  // node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js
  var React47 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());
  var import_utils12 = __toESM(require_node2());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React47.useRef(false);
    const nodeRef = React47.useRef(null);
    const activatedRef = React47.useRef(false);
    const syntheticEventRef = React47.useRef(false);
    React47.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = (0, import_utils12.unstable_useForkRef)(
      // @ts-expect-error TODO upstream fix
      children.ref,
      nodeRef
    );
    const handleClickAway = (0, import_utils12.unstable_useEventCallback)((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = (0, import_utils12.unstable_ownerDocument)(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        ) || nodeRef.current.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        );
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React47.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = (0, import_utils12.unstable_ownerDocument)(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React47.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = (0, import_utils12.unstable_ownerDocument)(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(React47.Fragment, {
      children: /* @__PURE__ */ React47.cloneElement(children, childrenProps)
    });
  }
  true ? ClickAwayListener.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The wrapped element.
     */
    children: import_utils12.elementAcceptingRef.isRequired,
    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: import_prop_types28.default.bool,
    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: import_prop_types28.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: import_prop_types28.default.func.isRequired,
    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: import_prop_types28.default.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (true) {
    ClickAwayListener["propTypes"] = (0, import_utils12.exactProp)(ClickAwayListener.propTypes);
  }

  // node_modules/@mui/base/FocusTrap/FocusTrap.js
  var React48 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());
  var import_utils13 = __toESM(require_node2());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i2) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i2,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a2, b2) => a2.tabIndex === b2.tabIndex ? a2.documentOrder - b2.documentOrder : a2.tabIndex - b2.tabIndex).map((a2) => a2.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React48.useRef(false);
    const sentinelStart = React48.useRef(null);
    const sentinelEnd = React48.useRef(null);
    const nodeToRestore = React48.useRef(null);
    const reactFocusEventTarget = React48.useRef(null);
    const activated = React48.useRef(false);
    const rootRef = React48.useRef(null);
    const handleRef = (0, import_utils13.unstable_useForkRef)(children.ref, rootRef);
    const lastKeydown = React48.useRef(null);
    React48.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React48.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = (0, import_utils13.unstable_ownerDocument)(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React48.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = (0, import_utils13.unstable_ownerDocument)(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(React48.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React48.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  true ? FocusTrap.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A single child content element.
     */
    children: import_utils13.elementAcceptingRef,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types29.default.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types29.default.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types29.default.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: import_prop_types29.default.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: import_prop_types29.default.func,
    /**
     * If `true`, focus is locked.
     */
    open: import_prop_types29.default.bool.isRequired
  } : void 0;
  if (true) {
    FocusTrap["propTypes"] = (0, import_utils13.exactProp)(FocusTrap.propTypes);
  }

  // node_modules/@mui/base/Portal/Portal.js
  var React49 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());
  var import_prop_types30 = __toESM(require_prop_types());
  var import_utils14 = __toESM(require_node2());
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React49.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React49.useState(null);
    const handleRef = (0, import_utils14.unstable_useForkRef)(/* @__PURE__ */ React49.isValidElement(children) ? children.ref : null, forwardedRef);
    (0, import_utils14.unstable_useEnhancedEffect)(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    (0, import_utils14.unstable_useEnhancedEffect)(() => {
      if (mountNode && !disablePortal) {
        (0, import_utils14.unstable_setRef)(forwardedRef, mountNode);
        return () => {
          (0, import_utils14.unstable_setRef)(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React49.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React49.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(React49.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(React49.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode
    });
  });
  true ? Portal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The children to render into the `container`.
     */
    children: import_prop_types30.default.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types30.default.oneOfType([import_utils14.HTMLElementType, import_prop_types30.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types30.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = (0, import_utils14.exactProp)(Portal.propTypes);
  }

  // node_modules/@mui/base/unstable_useModal/useModal.js
  init_extends();
  var React50 = __toESM(require_react());
  var import_utils16 = __toESM(require_node2());

  // node_modules/@mui/base/unstable_useModal/ModalManager.js
  var import_utils15 = __toESM(require_node2());
  function isOverflowing(container) {
    const doc = (0, import_utils15.unstable_ownerDocument)(container);
    if (doc.body === container) {
      return (0, import_utils15.unstable_ownerWindow)(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt((0, import_utils15.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = (0, import_utils15.unstable_getScrollbarSize)((0, import_utils15.unstable_ownerDocument)(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = (0, import_utils15.unstable_ownerDocument)(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = (0, import_utils15.unstable_ownerDocument)(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = (0, import_utils15.unstable_ownerWindow)(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/base/unstable_useModal/useModal.js
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      // @ts-ignore internal logic - Base UI supports the manager as a prop too
      manager = defaultManager,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React50.useRef({});
    const mountNodeRef = React50.useRef(null);
    const modalRef = React50.useRef(null);
    const handleRef = (0, import_utils16.unstable_useForkRef)(modalRef, rootRef);
    const [exited, setExited] = React50.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => (0, import_utils16.unstable_ownerDocument)(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = (0, import_utils16.unstable_useEventCallback)(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React50.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = (0, import_utils16.unstable_useEventCallback)((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React50.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp, manager]);
    React50.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React50.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
      !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
      return _extends({
        role: "presentation"
      }, externalEventHandlers, {
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      });
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return _extends({
        "aria-hidden": true
      }, externalEventHandlers, {
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      });
    };
    const getTransitionProps3 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: (0, import_utils16.unstable_createChainedFunction)(handleEnter, children == null ? void 0 : children.props.onEnter),
        onExited: (0, import_utils16.unstable_createChainedFunction)(handleExited, children == null ? void 0 : children.props.onExited)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps3,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }

  // node_modules/@mui/base/NoSsr/NoSsr.js
  var React51 = __toESM(require_react());
  var import_prop_types31 = __toESM(require_prop_types());
  var import_utils18 = __toESM(require_node2());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  function NoSsr(props) {
    const {
      children,
      defer = false,
      fallback = null
    } = props;
    const [mountedState, setMountedState] = React51.useState(false);
    (0, import_utils18.unstable_useEnhancedEffect)(() => {
      if (!defer) {
        setMountedState(true);
      }
    }, [defer]);
    React51.useEffect(() => {
      if (defer) {
        setMountedState(true);
      }
    }, [defer]);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(React51.Fragment, {
      children: mountedState ? children : fallback
    });
  }
  true ? NoSsr.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * You can wrap a node.
     */
    children: import_prop_types31.default.node,
    /**
     * If `true`, the component will not only prevent server-side rendering.
     * It will also defer the rendering of the children into a different screen frame.
     * @default false
     */
    defer: import_prop_types31.default.bool,
    /**
     * The fallback content to display.
     * @default null
     */
    fallback: import_prop_types31.default.node
  } : void 0;
  if (true) {
    NoSsr["propTypes"] = (0, import_utils18.exactProp)(NoSsr.propTypes);
  }

  // node_modules/@mui/base/Popper/Popper.js
  init_extends();
  var React52 = __toESM(require_react());
  var import_utils19 = __toESM(require_node2());

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument9 = node2.ownerDocument;
      return ownerDocument9 ? ownerDocument9.defaultView || window : window;
    }
    return node2;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node2) {
    var OwnElement = getWindow(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement(node2) {
    var OwnElement = getWindow(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles2(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style4 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style4);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style4 = styleProperties.reduce(function(style5, property) {
          style5[property] = "";
          return style5;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style4);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles2,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round2 = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width2 = clientRect.width / scaleX;
    var height2 = clientRect.height / scaleY;
    return {
      width: width2,
      height: height2,
      top: y,
      right: x + width2,
      bottom: y + height2,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width2 = element.offsetWidth;
    var height2 = element.offsetHeight;
    if (Math.abs(clientRect.width - width2) <= 1) {
      width2 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height2) <= 1) {
      height2 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width2,
      height: height2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css3 = getComputedStyle(currentNode);
      if (css3.transform !== "none" || css3.perspective !== "none" || css3.contain === "paint" || ["transform", "perspective"].indexOf(css3.willChange) !== -1 || isFirefox && css3.willChange === "filter" || isFirefox && css3.filter && css3.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round2(x * dpr) / dpr || 0,
      y: round2(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash3 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash3[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node2) {
    var win = getWindow(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html2 = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width2 = html2.clientWidth;
    var height2 = html2.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html2 = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body2 = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width2 = max(html2.scrollWidth, html2.clientWidth, body2 ? body2.scrollWidth : 0, body2 ? body2.clientWidth : 0);
    var height2 = max(html2.scrollHeight, html2.clientHeight, body2 ? body2.scrollHeight : 0, body2 ? body2.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body2 || html2).direction === "rtl") {
      x += max(html2.clientWidth, body2 ? body2.clientWidth : 0) - width2;
    }
    return {
      width: width2,
      height: height2,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode(node2));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a2, b2) {
      return overflows[a2] - overflows[b2];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i2 = 0; i2 < placements2.length; i2++) {
      var placement = placements2[i2];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node2) {
    if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round2(rect.width) / element.offsetWidth || 1;
    var scaleY = round2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/@mui/base/Popper/Popper.js
  var import_prop_types32 = __toESM(require_prop_types());

  // node_modules/@mui/base/Popper/popperClasses.js
  var COMPONENT_NAME = "Popper";
  function getPopperUtilityClass(slot) {
    return generateUtilityClass18(COMPONENT_NAME, slot);
  }
  var popperClasses = generateUtilityClasses14(COMPONENT_NAME, ["root"]);

  // node_modules/@mui/base/Popper/Popper.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var _excluded40 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
  var _excluded210 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction2) {
    if (direction2 === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement2(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement2(element);
  }
  var useUtilityClasses14 = () => {
    const slots = {
      root: ["root"]
    };
    return (0, import_utils10.unstable_composeClasses)(slots, useClassNamesOverride(getPopperUtilityClass));
  };
  var defaultPopperOptions = {};
  var PopperTooltip = /* @__PURE__ */ React52.forwardRef(function PopperTooltip2(props, forwardedRef) {
    var _slots$root;
    const {
      anchorEl,
      children,
      direction: direction2,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
      // @ts-ignore internal logic
      // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
    const tooltipRef = React52.useRef(null);
    const ownRef = (0, import_utils19.unstable_useForkRef)(tooltipRef, forwardedRef);
    const popperRef = React52.useRef(null);
    const handlePopperRef = (0, import_utils19.unstable_useForkRef)(popperRef, popperRefProp);
    const handlePopperRefRef = React52.useRef(handlePopperRef);
    (0, import_utils19.unstable_useEnhancedEffect)(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React52.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction2);
    const [placement, setPlacement] = React52.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React52.useState(resolveAnchorEl(anchorEl));
    React52.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React52.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl(anchorEl));
      }
    }, [anchorEl]);
    (0, import_utils19.unstable_useEnhancedEffect)(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (true) {
        if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes2 = useUtilityClasses14();
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: props,
      className: classes2.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Root, _extends({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  var Popper = /* @__PURE__ */ React52.forwardRef(function Popper2(props, forwardedRef) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction: direction2 = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style4,
      transition = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded210);
    const [exited, setExited] = React52.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? (0, import_utils19.unstable_ownerDocument)(resolvedAnchorEl).body : (0, import_utils19.unstable_ownerDocument)(null).body;
    }
    const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
    const transitionProps = transition ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Portal, {
      disablePortal,
      container,
      children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(PopperTooltip, _extends({
        anchorEl,
        direction: direction2,
        disablePortal,
        modifiers,
        ref: forwardedRef,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: "fixed",
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display
        }, style4),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  true ? Popper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: (0, import_utils19.chainPropTypes)(import_prop_types32.default.oneOfType([import_utils19.HTMLElementType, import_prop_types32.default.object, import_prop_types32.default.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Popper render function or node.
     */
    children: import_prop_types32.default.oneOfType([import_prop_types32.default.node, import_prop_types32.default.func]),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types32.default.oneOfType([import_utils19.HTMLElementType, import_prop_types32.default.func]),
    /**
     * Direction of the text.
     * @default 'ltr'
     */
    direction: import_prop_types32.default.oneOf(["ltr", "rtl"]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types32.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types32.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types32.default.arrayOf(import_prop_types32.default.shape({
      data: import_prop_types32.default.object,
      effect: import_prop_types32.default.func,
      enabled: import_prop_types32.default.bool,
      fn: import_prop_types32.default.func,
      name: import_prop_types32.default.any,
      options: import_prop_types32.default.object,
      phase: import_prop_types32.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types32.default.arrayOf(import_prop_types32.default.string),
      requiresIfExists: import_prop_types32.default.arrayOf(import_prop_types32.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types32.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types32.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types32.default.shape({
      modifiers: import_prop_types32.default.array,
      onFirstUpdate: import_prop_types32.default.func,
      placement: import_prop_types32.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types32.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: import_utils19.refType,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types32.default.shape({
      root: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types32.default.shape({
      root: import_prop_types32.default.elementType
    }),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types32.default.bool
  } : void 0;

  // node_modules/@mui/base/useSlider/useSlider.js
  init_extends();
  var React53 = __toESM(require_react());
  var import_utils21 = __toESM(require_node2());
  var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
  function asc(a2, b2) {
    return a2 - b2;
  }
  function findClosest(values3, currentValue) {
    var _values$reduce;
    const {
      index: closestIndex
    } = (_values$reduce = values3.reduce((acc, value, index) => {
      const distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index
        };
      }
      return acc;
    }, null)) != null ? _values$reduce : {};
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      const touchEvent = event;
      for (let i2 = 0; i2 < touchEvent.changedTouches.length; i2 += 1) {
        const touch = touchEvent.changedTouches[i2];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent(value, min2, max2) {
    return (value - min2) * 100 / (max2 - min2);
  }
  function percentToValue(percent, min2, max2) {
    return (max2 - min2) * percent + min2;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split("e-");
      const matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min2) {
    const nearest = Math.round((value - min2) / step) * step + min2;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex({
    values: values3,
    newValue,
    index
  }) {
    const output = values3.slice();
    output[index] = newValue;
    return output.sort(asc);
  }
  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    var _sliderRef$current, _doc$activeElement;
    const doc = (0, import_utils21.unstable_ownerDocument)(sliderRef.current);
    if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
      var _sliderRef$current2;
      (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  function areValuesEqual(newValue, oldValue) {
    if (typeof newValue === "number" && typeof oldValue === "number") {
      return newValue === oldValue;
    }
    if (typeof newValue === "object" && typeof oldValue === "object") {
      return areArraysEqual(newValue, oldValue);
    }
    return false;
  }
  var axisProps = {
    horizontal: {
      offset: (percent) => ({
        left: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    "horizontal-reverse": {
      offset: (percent) => ({
        right: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    vertical: {
      offset: (percent) => ({
        bottom: `${percent}%`
      }),
      leap: (percent) => ({
        height: `${percent}%`
      })
    }
  };
  var Identity = (x) => x;
  var cachedSupportsTouchActionNone;
  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === void 0) {
      if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
        cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }
    return cachedSupportsTouchActionNone;
  }
  function useSlider(parameters) {
    const {
      "aria-labelledby": ariaLabelledby,
      defaultValue,
      disabled = false,
      disableSwap = false,
      isRtl = false,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      rootRef: ref,
      scale = Identity,
      step = 1,
      shiftStep = 10,
      tabIndex,
      value: valueProp
    } = parameters;
    const touchId = React53.useRef();
    const [active, setActive] = React53.useState(-1);
    const [open, setOpen] = React53.useState(-1);
    const [dragging, setDragging] = React53.useState(false);
    const moveCount = React53.useRef(0);
    const [valueDerived, setValueState] = (0, import_utils21.unstable_useControlled)({
      controlled: valueProp,
      default: defaultValue != null ? defaultValue : min2,
      name: "Slider"
    });
    const handleChange = onChange && ((event, value, thumbIndex) => {
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, "target", {
        writable: true,
        value: {
          value,
          name
        }
      });
      onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values3 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values3 = values3.map((value) => value == null ? min2 : (0, import_utils21.clamp)(value, min2, max2));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_5, index) => ({
      value: min2 + step * index
    })) : marksProp || [];
    const marksValues = marks.map((mark) => mark.value);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = (0, import_utils21.unstable_useIsFocusVisible)();
    const [focusedThumbIndex, setFocusedThumbIndex] = React53.useState(-1);
    const sliderRef = React53.useRef();
    const handleFocusRef = (0, import_utils21.unstable_useForkRef)(focusVisibleRef, sliderRef);
    const handleRef = (0, import_utils21.unstable_useForkRef)(ref, handleFocusRef);
    const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      const index = Number(event.currentTarget.getAttribute("data-index"));
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusedThumbIndex(index);
      }
      setOpen(index);
      otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    };
    const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusedThumbIndex(-1);
      }
      setOpen(-1);
      otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    };
    const changeValue = (event, valueInput) => {
      const index = Number(event.currentTarget.getAttribute("data-index"));
      const value = values3[index];
      const marksIndex = marksValues.indexOf(value);
      let newValue = valueInput;
      if (marks && step == null) {
        const maxMarksValue = marksValues[marksValues.length - 1];
        if (newValue > maxMarksValue) {
          newValue = maxMarksValue;
        } else if (newValue < marksValues[0]) {
          newValue = marksValues[0];
        } else {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
      }
      newValue = (0, import_utils21.clamp)(newValue, min2, max2);
      if (range) {
        if (disableSwap) {
          newValue = (0, import_utils21.clamp)(newValue, values3[index - 1] || -Infinity, values3[index + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values3,
          newValue,
          index
        });
        let activeIndex = index;
        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }
        focusThumb({
          sliderRef,
          activeIndex
        });
      }
      setValueState(newValue);
      setFocusedThumbIndex(index);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(event, newValue, index);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    };
    const createHandleHiddenInputKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      if (step !== null) {
        const index = Number(event.currentTarget.getAttribute("data-index"));
        const value = values3[index];
        let newValue = null;
        if ((event.key === "ArrowLeft" || event.key === "ArrowDown") && event.shiftKey || event.key === "PageDown") {
          newValue = Math.max(value - shiftStep, min2);
        } else if ((event.key === "ArrowRight" || event.key === "ArrowUp") && event.shiftKey || event.key === "PageUp") {
          newValue = Math.min(value + shiftStep, max2);
        }
        if (newValue !== null) {
          changeValue(event, newValue);
          event.preventDefault();
        }
      }
      otherHandlers == null || (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    };
    (0, import_utils21.unstable_useEnhancedEffect)(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        var _document$activeEleme;
        (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
      }
    }, [disabled]);
    if (disabled && active !== -1) {
      setActive(-1);
    }
    if (disabled && focusedThumbIndex !== -1) {
      setFocusedThumbIndex(-1);
    }
    const createHandleHiddenInputChange = (otherHandlers) => (event) => {
      var _otherHandlers$onChan;
      (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
      changeValue(event, event.target.valueAsNumber);
    };
    const previousIndex = React53.useRef();
    let axis = orientation;
    if (isRtl && orientation === "horizontal") {
      axis += "-reverse";
    }
    const getFingerNewValue = ({
      finger,
      move = false
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width: width2,
        height: height2,
        bottom: bottom2,
        left: left2
      } = slider.getBoundingClientRect();
      let percent;
      if (axis.indexOf("vertical") === 0) {
        percent = (bottom2 - finger.y) / height2;
      } else {
        percent = (finger.x - left2) / width2;
      }
      if (axis.indexOf("-reverse") !== -1) {
        percent = 1 - percent;
      }
      let newValue;
      newValue = percentToValue(percent, min2, max2);
      if (step) {
        newValue = roundValueToStep(newValue, step, min2);
      } else {
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = (0, import_utils21.clamp)(newValue, min2, max2);
      let activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values3, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = (0, import_utils21.clamp)(newValue, values3[activeIndex - 1] || -Infinity, values3[activeIndex + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values3,
          newValue,
          index: activeIndex
        });
        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue,
        activeIndex
      };
    };
    const handleTouchMove = (0, import_utils21.unstable_useEventCallback)((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      if (!finger) {
        return;
      }
      moveCount.current += 1;
      if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
        handleTouchEnd(nativeEvent);
        return;
      }
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = (0, import_utils21.unstable_useEventCallback)((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);
      if (!finger) {
        return;
      }
      const {
        newValue
      } = getFingerNewValue({
        finger,
        move: true
      });
      setActive(-1);
      if (nativeEvent.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, newValue);
      }
      touchId.current = void 0;
      stopListening();
    });
    const handleTouchStart = (0, import_utils21.unstable_useEventCallback)((nativeEvent) => {
      if (disabled) {
        return;
      }
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }
      const touch = nativeEvent.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      const finger = trackFinger(nativeEvent, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = (0, import_utils21.unstable_ownerDocument)(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove, {
        passive: true
      });
      doc.addEventListener("touchend", handleTouchEnd, {
        passive: true
      });
    });
    const stopListening = React53.useCallback(() => {
      const doc = (0, import_utils21.unstable_ownerDocument)(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React53.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener("touchstart", handleTouchStart);
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React53.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
      if (disabled) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      const finger = trackFinger(event, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = (0, import_utils21.unstable_ownerDocument)(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove, {
        passive: true
      });
      doc.addEventListener("mouseup", handleTouchEnd);
    };
    const trackOffset = valueToPercent(range ? values3[0] : min2, min2, max2);
    const trackLeap = valueToPercent(values3[values3.length - 1], min2, max2) - trackOffset;
    const getRootProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers(externalProps);
      const ownEventHandlers = {
        onMouseDown: createHandleMouseDown(externalHandlers || {})
      };
      const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
      return _extends({}, externalProps, {
        ref: handleRef
      }, mergedEventHandlers);
    };
    const createHandleMouseOver = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
      const index = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index);
    };
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous3;
      (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
      setOpen(-1);
    };
    const getThumbProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers(externalProps);
      const ownEventHandlers = {
        onMouseOver: createHandleMouseOver(externalHandlers || {}),
        onMouseLeave: createHandleMouseLeave(externalHandlers || {})
      };
      return _extends({}, externalProps, externalHandlers, ownEventHandlers);
    };
    const getThumbStyle = (index) => {
      return {
        // So the non active thumb doesn't show its label on hover.
        pointerEvents: active !== -1 && active !== index ? "none" : void 0
      };
    };
    const getHiddenInputProps = (externalProps = {}) => {
      var _parameters$step;
      const externalHandlers = extractEventHandlers(externalProps);
      const ownEventHandlers = {
        onChange: createHandleHiddenInputChange(externalHandlers || {}),
        onFocus: createHandleHiddenInputFocus(externalHandlers || {}),
        onBlur: createHandleHiddenInputBlur(externalHandlers || {}),
        onKeyDown: createHandleHiddenInputKeyDown(externalHandlers || {})
      };
      const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
      return _extends({
        tabIndex,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max2),
        "aria-valuemin": scale(min2),
        name,
        type: "range",
        min: parameters.min,
        max: parameters.max,
        step: parameters.step === null && parameters.marks ? "any" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
        disabled
      }, externalProps, mergedEventHandlers, {
        style: _extends({}, import_utils21.visuallyHidden, {
          direction: isRtl ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%"
        })
      });
    };
    return {
      active,
      axis,
      axisProps,
      dragging,
      focusedThumbIndex,
      getHiddenInputProps,
      getRootProps,
      getThumbProps,
      marks,
      open,
      range,
      rootRef: handleRef,
      trackLeap,
      trackOffset,
      values: values3,
      getThumbStyle
    };
  }

  // node_modules/@mui/base/useSnackbar/useSnackbar.js
  init_extends();
  var React54 = __toESM(require_react());
  var import_utils23 = __toESM(require_node2());
  function useSnackbar(parameters = {}) {
    const {
      autoHideDuration = null,
      disableWindowBlurListener = false,
      onClose,
      open,
      resumeHideDuration
    } = parameters;
    const timerAutoHide = (0, import_utils23.unstable_useTimeout)();
    React54.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown(nativeEvent) {
        if (!nativeEvent.defaultPrevented) {
          if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
            onClose == null || onClose(nativeEvent, "escapeKeyDown");
          }
        }
      }
      document.addEventListener("keydown", handleKeyDown);
      return () => {
        document.removeEventListener("keydown", handleKeyDown);
      };
    }, [open, onClose]);
    const handleClose = (0, import_utils23.unstable_useEventCallback)((event, reason) => {
      onClose == null || onClose(event, reason);
    });
    const setAutoHideTimer = (0, import_utils23.unstable_useEventCallback)((autoHideDurationParam) => {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }
      timerAutoHide.start(autoHideDurationParam, () => {
        handleClose(null, "timeout");
      });
    });
    React54.useEffect(() => {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return timerAutoHide.clear;
    }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);
    const handleClickAway = (event) => {
      onClose == null || onClose(event, "clickaway");
    };
    const handlePause = timerAutoHide.clear;
    const handleResume = React54.useCallback(() => {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
    const createHandleBlur = (otherHandlers) => (event) => {
      const onBlurCallback = otherHandlers.onBlur;
      onBlurCallback == null || onBlurCallback(event);
      handleResume();
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      const onFocusCallback = otherHandlers.onFocus;
      onFocusCallback == null || onFocusCallback(event);
      handlePause();
    };
    const createMouseEnter = (otherHandlers) => (event) => {
      const onMouseEnterCallback = otherHandlers.onMouseEnter;
      onMouseEnterCallback == null || onMouseEnterCallback(event);
      handlePause();
    };
    const createMouseLeave = (otherHandlers) => (event) => {
      const onMouseLeaveCallback = otherHandlers.onMouseLeave;
      onMouseLeaveCallback == null || onMouseLeaveCallback(event);
      handleResume();
    };
    React54.useEffect(() => {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return () => {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, open, handleResume, handlePause]);
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));
      return _extends({
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation"
      }, externalProps, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onMouseEnter: createMouseEnter(externalEventHandlers),
        onMouseLeave: createMouseLeave(externalEventHandlers)
      });
    };
    return {
      getRootProps,
      onClickAway: handleClickAway
    };
  }

  // node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
  init_extends();
  var React55 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());
  var import_utils24 = __toESM(require_node2());
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var _excluded41 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue2(value) {
    return parseInt(value, 10) || 0;
  }
  var styles = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isEmpty2(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;
  }
  var TextareaAutosize = /* @__PURE__ */ React55.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style4,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
    const {
      current: isControlled
    } = React55.useRef(value != null);
    const inputRef = React55.useRef(null);
    const handleRef = (0, import_utils24.unstable_useForkRef)(forwardedRef, inputRef);
    const shadowRef = React55.useRef(null);
    const calculateTextareaStyles = React55.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = (0, import_utils24.unstable_ownerWindow)(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0,
          overflowing: false
        };
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle.boxSizing;
      const padding2 = getStyleValue2(computedStyle.paddingBottom) + getStyleValue2(computedStyle.paddingTop);
      const border2 = getStyleValue2(computedStyle.borderBottomWidth) + getStyleValue2(computedStyle.borderTopWidth);
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflowing
      };
    }, [maxRows, minRows, props.placeholder]);
    const syncHeight = React55.useCallback(() => {
      const textareaStyles = calculateTextareaStyles();
      if (isEmpty2(textareaStyles)) {
        return;
      }
      const input = inputRef.current;
      input.style.height = `${textareaStyles.outerHeightStyle}px`;
      input.style.overflow = textareaStyles.overflowing ? "hidden" : "";
    }, [calculateTextareaStyles]);
    (0, import_utils24.unstable_useEnhancedEffect)(() => {
      const handleResize = () => {
        syncHeight();
      };
      let rAF;
      const rAFHandleResize = () => {
        cancelAnimationFrame(rAF);
        rAF = requestAnimationFrame(() => {
          handleResize();
        });
      };
      const debounceHandleResize = (0, import_utils24.unstable_debounce)(handleResize);
      const input = inputRef.current;
      const containerWindow = (0, import_utils24.unstable_ownerWindow)(input);
      containerWindow.addEventListener("resize", debounceHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);
        resizeObserver.observe(input);
      }
      return () => {
        debounceHandleResize.clear();
        cancelAnimationFrame(rAF);
        containerWindow.removeEventListener("resize", debounceHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [calculateTextareaStyles, syncHeight]);
    (0, import_utils24.unstable_useEnhancedEffect)(() => {
      syncHeight();
    });
    const handleChange = (event) => {
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(React55.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime44.jsx)("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: style4
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style4, {
          paddingTop: 0,
          paddingBottom: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    className: import_prop_types33.default.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * @ignore
     */
    onChange: import_prop_types33.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types33.default.string,
    /**
     * @ignore
     */
    style: import_prop_types33.default.object,
    /**
     * @ignore
     */
    value: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.string), import_prop_types33.default.number, import_prop_types33.default.string])
  } : void 0;

  // node_modules/@mui/base/useAutocomplete/useAutocomplete.js
  init_extends();
  var React56 = __toESM(require_react());
  var import_utils25 = __toESM(require_node2());
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify2,
      trim: trim2 = false
    } = config;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim2 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify2 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i2 = 0; i2 < array.length; i2 += 1) {
      if (comp(array[i2])) {
        return i2;
      }
    }
    return -1;
  }
  var defaultFilterOptions = createFilterOptions();
  var pageSize = 5;
  var defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  function useAutocomplete(props) {
    const {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionKey,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = (0, import_utils25.unstable_useId)(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (true) {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React56.useRef(false);
    const firstFocus = React56.useRef(true);
    const inputRef = React56.useRef(null);
    const listboxRef = React56.useRef(null);
    const [anchorEl, setAnchorEl] = React56.useState(null);
    const [focusedTag, setFocusedTag] = React56.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React56.useRef(defaultHighlighted);
    const [value, setValueState] = (0, import_utils25.unstable_useControlled)({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = (0, import_utils25.unstable_useControlled)({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React56.useState(false);
    const resetInputValue = React56.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = (0, import_utils25.unstable_useControlled)({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React56.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(
      options.filter((option) => {
        if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
        getOptionLabel
      }
    ) : [];
    const previousProps = (0, import_utils25.usePreviousProps)({
      filteredOptions,
      value,
      inputValue
    });
    React56.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (true) {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = (0, import_utils25.unstable_useEventCallback)((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React56.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index, direction2) {
      if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && option.hasAttribute("tabindex") && !nextFocusDisabled) {
          return nextFocus;
        }
        if (direction2 === "next") {
          nextFocus = (nextFocus + 1) % filteredOptions.length;
        } else {
          nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
        }
        if (nextFocus === index) {
          return -1;
        }
      }
    }
    const setHighlightedIndex = (0, import_utils25.unstable_useEventCallback)(({
      event,
      index,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index;
      if (index === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev2) {
        prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      let listboxNode = listboxRef.current;
      if (listboxRef.current.getAttribute("role") !== "listbox") {
        listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      }
      if (!listboxNode) {
        return;
      }
      if (index === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = (0, import_utils25.unstable_useEventCallback)(({
      event,
      diff,
      direction: direction2 = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction2);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const getPreviousHighlightedOptionIndex = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i2) => getOptionLabel(value[i2]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          return findIndex(filteredOptions, (option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
        }
      }
      return -1;
    };
    const syncHighlightedIndex = React56.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();
      if (previousHighlightedOptionIndex !== -1) {
        highlightedIndexRef.current = previousHighlightedOptionIndex;
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = (0, import_utils25.unstable_useEventCallback)((node2) => {
      (0, import_utils25.unstable_setRef)(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (true) {
      React56.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React56.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i2) => val === newValue[i2])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React56.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (true) {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index, direction2) {
      if (index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction2 === "next" && nextFocus === value.length || direction2 === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction2 === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction2) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction2 === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction2 === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction2);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index = focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseMove = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      if (highlightedIndexRef.current !== index) {
        setHighlightedIndex({
          event,
          index,
          reason: "mouse"
        });
      }
    };
    const handleOptionTouchStart = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "touch"
      });
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index) => (event) => {
      const newValue = value.slice();
      newValue.splice(index, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (!disabledProp && (inputValue === "" || !open)) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = /* @__PURE__ */ new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (true) {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index,
            index,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperatively so don't let react override
        // only have an opinion about this when closed
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index
      }) => _extends({
        key: index,
        "data-tag-index": index,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index,
        option
      }) => {
        var _getOptionKey;
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index}`,
          onMouseMove: handleOptionMouseMove,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      expanded: popupOpen && anchorEl,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_composeClasses20 = __toESM(require_composeClasses2());
  var import_colorManipulator7 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Popper/Popper.js
  init_extends();
  var import_useThemeWithoutDefault4 = __toESM(require_useThemeWithoutDefault());
  var import_refType2 = __toESM(require_refType2());
  var import_HTMLElementType = __toESM(require_HTMLElementType2());
  var import_prop_types34 = __toESM(require_prop_types());
  var React57 = __toESM(require_react());
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var _excluded42 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
  var PopperRoot = styled_default2(Popper, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({});
  var Popper3 = /* @__PURE__ */ React57.forwardRef(function Popper4(inProps, ref) {
    var _slots$root;
    const theme = (0, import_useThemeWithoutDefault4.default)();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopper"
    });
    const {
      anchorEl,
      component,
      components,
      componentsProps,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
    const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
    const otherProps = _extends({
      anchorEl,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition
    }, other);
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PopperRoot, _extends({
      as: component,
      direction: theme == null ? void 0 : theme.direction,
      slots: {
        root: RootComponent
      },
      slotProps: slotProps != null ? slotProps : componentsProps
    }, otherProps, {
      ref
    }));
  });
  true ? Popper3.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: import_prop_types34.default.oneOfType([import_HTMLElementType.default, import_prop_types34.default.object, import_prop_types34.default.func]),
    /**
     * Popper render function or node.
     */
    children: import_prop_types34.default.oneOfType([import_prop_types34.default.node, import_prop_types34.default.func]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types34.default.elementType,
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: import_prop_types34.default.shape({
      Root: import_prop_types34.default.elementType
    }),
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    componentsProps: import_prop_types34.default.shape({
      root: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types34.default.oneOfType([import_HTMLElementType.default, import_prop_types34.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types34.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types34.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types34.default.arrayOf(import_prop_types34.default.shape({
      data: import_prop_types34.default.object,
      effect: import_prop_types34.default.func,
      enabled: import_prop_types34.default.bool,
      fn: import_prop_types34.default.func,
      name: import_prop_types34.default.any,
      options: import_prop_types34.default.object,
      phase: import_prop_types34.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types34.default.arrayOf(import_prop_types34.default.string),
      requiresIfExists: import_prop_types34.default.arrayOf(import_prop_types34.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types34.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types34.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types34.default.shape({
      modifiers: import_prop_types34.default.array,
      onFirstUpdate: import_prop_types34.default.func,
      placement: import_prop_types34.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types34.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: import_refType2.default,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types34.default.shape({
      root: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types34.default.shape({
      root: import_prop_types34.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types34.default.bool
  } : void 0;
  var Popper_default = Popper3;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  init_extends();
  var React58 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());
  var import_composeClasses17 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
  var import_generateUtilityClasses15 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass21 = __toESM(require_generateUtilityClass2());
  function getListSubheaderUtilityClass(slot) {
    return (0, import_generateUtilityClass21.default)("MuiListSubheader", slot);
  }
  var listSubheaderClasses = (0, import_generateUtilityClasses15.default)("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);
  var listSubheaderClasses_default = listSubheaderClasses;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var _excluded43 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
  var useUtilityClasses15 = (ownerState) => {
    const {
      classes: classes2,
      color: color2,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "default" && `color${capitalize_default(color2)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
    };
    return (0, import_composeClasses17.default)(slots, getListSubheaderUtilityClass, classes2);
  };
  var ListSubheaderRoot = styled_default2("li", {
    name: "MuiListSubheader",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.color !== "default" && styles8[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles8.gutters, ownerState.inset && styles8.inset, !ownerState.disableSticky && styles8.sticky];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    boxSizing: "border-box",
    lineHeight: "48px",
    listStyle: "none",
    color: (theme.vars || theme).palette.text.secondary,
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(14)
  }, ownerState.color === "primary" && {
    color: (theme.vars || theme).palette.primary.main
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: "sticky",
    top: 0,
    zIndex: 1,
    backgroundColor: (theme.vars || theme).palette.background.paper
  }));
  var ListSubheader = /* @__PURE__ */ React58.forwardRef(function ListSubheader2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListSubheader"
    });
    const {
      className,
      color: color2 = "default",
      component = "li",
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disableGutters,
      disableSticky,
      inset
    });
    const classes2 = useUtilityClasses15(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ListSubheaderRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other));
  });
  ListSubheader.muiSkipListHighlight = true;
  true ? ListSubheader.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types35.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types35.default.object,
    /**
     * @ignore
     */
    className: import_prop_types35.default.string,
    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: import_prop_types35.default.oneOf(["default", "inherit", "primary"]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types35.default.elementType,
    /**
     * If `true`, the List Subheader will not have gutters.
     * @default false
     */
    disableGutters: import_prop_types35.default.bool,
    /**
     * If `true`, the List Subheader will not stick to the top during scroll.
     * @default false
     */
    disableSticky: import_prop_types35.default.bool,
    /**
     * If `true`, the List Subheader is indented.
     * @default false
     */
    inset: import_prop_types35.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object])
  } : void 0;
  var ListSubheader_default = ListSubheader;

  // node_modules/@mui/material/Chip/Chip.js
  init_extends();
  var React60 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());
  var import_composeClasses18 = __toESM(require_composeClasses2());
  var import_colorManipulator6 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/svg-icons/Cancel.js
  var React59 = __toESM(require_react());
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@mui/material/utils/unsupportedProp.js
  var import_unsupportedProp = __toESM(require_unsupportedProp2());
  var unsupportedProp_default = import_unsupportedProp.default;

  // node_modules/@mui/material/Chip/chipClasses.js
  var import_generateUtilityClasses16 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass22 = __toESM(require_generateUtilityClass2());
  function getChipUtilityClass(slot) {
    return (0, import_generateUtilityClass22.default)("MuiChip", slot);
  }
  var chipClasses = (0, import_generateUtilityClasses16.default)("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  var chipClasses_default = chipClasses;

  // node_modules/@mui/material/Chip/Chip.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var _excluded44 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
  var useUtilityClasses16 = (ownerState) => {
    const {
      classes: classes2,
      disabled,
      size,
      color: color2,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color2)}`, `${variant}${capitalize_default(color2)}`],
      label: ["label", `label${capitalize_default(size)}`],
      avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color2)}`],
      icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color2)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
    };
    return (0, import_composeClasses18.default)(slots, getChipUtilityClass, classes2);
  };
  var ChipRoot = styled_default2("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      const {
        color: color2,
        iconColor,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles8.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles8[`avatar${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles8[`avatarColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles8.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles8[`icon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles8[`iconColor${capitalize_default(iconColor)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles8.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles8[`deleteIcon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles8[`deleteIconColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles8[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
      }, styles8.root, styles8[`size${capitalize_default(size)}`], styles8[`color${capitalize_default(color2)}`], clickable && styles8.clickable, clickable && color2 !== "default" && styles8[`clickableColor${capitalize_default(color2)})`], onDelete && styles8.deletable, onDelete && color2 !== "default" && styles8[`deletableColor${capitalize_default(color2)}`], styles8[variant], styles8[`${variant}${capitalize_default(color2)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
    return _extends({
      maxWidth: "100%",
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme.vars || theme).palette.text.primary,
      backgroundColor: (theme.vars || theme).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme.transitions.create(["background-color", "box-shadow"]),
      // reset cursor explicitly in case ButtonBase is used
      cursor: "unset",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: "none",
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: (theme.vars || theme).palette.secondary.contrastText,
        backgroundColor: (theme.vars || theme).palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: _extends({
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.iconColor === ownerState.color && _extends({
        color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
      }, ownerState.color !== "default" && {
        color: "inherit"
      })),
      [`& .${chipClasses_default.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: "transparent",
        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : (0, import_colorManipulator6.alpha)(theme.palette.text.primary, 0.26),
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : (0, import_colorManipulator6.alpha)(theme.palette.text.primary, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : (0, import_colorManipulator6.alpha)(theme.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      color: (theme.vars || theme).palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator6.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator6.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator6.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: (theme.vars || theme).shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`& .${chipClasses_default.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses_default.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_colorManipulator6.alpha)(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator6.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : (0, import_colorManipulator6.alpha)(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_colorManipulator6.alpha)(theme.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }));
  var ChipLabel = styled_default2("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles8.label, styles8[`label${capitalize_default(size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.variant === "outlined" && {
    paddingLeft: 11,
    paddingRight: 11
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }, ownerState.size === "small" && ownerState.variant === "outlined" && {
    paddingLeft: 7,
    paddingRight: 7
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = /* @__PURE__ */ React60.forwardRef(function Chip2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color: color2 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false
      // TODO v6: Rename to `focusableWhenDisabled`.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
    const chipRef = React60.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = _extends({}, props, {
      component,
      disabled,
      size,
      color: color2,
      iconColor: /* @__PURE__ */ React60.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes2 = useUtilityClasses16(ownerState);
    const moreProps = component === ButtonBase_default ? _extends({
      component: ComponentProp || "div",
      focusVisibleClassName: classes2.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && /* @__PURE__ */ React60.isValidElement(deleteIconProp) ? /* @__PURE__ */ React60.cloneElement(deleteIconProp, {
        className: clsx_default(deleteIconProp.props.className, classes2.deleteIcon),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Cancel_default, {
        className: clsx_default(classes2.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React60.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React60.cloneElement(avatarProp, {
        className: clsx_default(classes2.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React60.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React60.cloneElement(iconProp, {
        className: clsx_default(classes2.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(ChipRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ChipLabel, {
        className: clsx_default(classes2.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  true ? Chip.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types36.default.element,
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types36.default.object,
    /**
     * @ignore
     */
    className: import_prop_types36.default.string,
    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: import_prop_types36.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types36.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types36.default.elementType,
    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: import_prop_types36.default.element,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types36.default.bool,
    /**
     * Icon element.
     */
    icon: import_prop_types36.default.element,
    /**
     * The content of the component.
     */
    label: import_prop_types36.default.node,
    /**
     * @ignore
     */
    onClick: import_prop_types36.default.func,
    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types36.default.func,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["medium", "small"]), import_prop_types36.default.string]),
    /**
     * If `true`, allows the disabled chip to escape focus.
     * If `false`, allows the disabled chip to receive focus.
     * @default false
     */
    skipFocusWhenDisabled: import_prop_types36.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
    /**
     * @ignore
     */
    tabIndex: import_prop_types36.default.number,
    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["filled", "outlined"]), import_prop_types36.default.string])
  } : void 0;
  var Chip_default = Chip;

  // node_modules/@mui/material/Input/inputClasses.js
  init_extends();
  var import_generateUtilityClasses18 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass24 = __toESM(require_generateUtilityClass2());

  // node_modules/@mui/material/InputBase/InputBase.js
  init_extends();
  var React64 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());
  var import_elementTypeAcceptingRef3 = __toESM(require_elementTypeAcceptingRef2());
  var import_refType3 = __toESM(require_refType2());
  var import_composeClasses19 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React61 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React61.createContext(void 0);
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React62 = __toESM(require_react());
  function useFormControl() {
    return React62.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var import_useEnhancedEffect2 = __toESM(require_useEnhancedEffect2());
  var useEnhancedEffect_default = import_useEnhancedEffect2.default;

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  init_extends();
  var React63 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  function GlobalStyles3(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(GlobalStyles_default, _extends({}, props, {
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    }));
  }
  true ? GlobalStyles3.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The styles you want to apply globally.
     */
    styles: import_prop_types37.default.oneOfType([import_prop_types37.default.array, import_prop_types37.default.func, import_prop_types37.default.number, import_prop_types37.default.object, import_prop_types37.default.string, import_prop_types37.default.bool])
  } : void 0;
  var GlobalStyles_default2 = GlobalStyles3;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  var import_generateUtilityClasses17 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass23 = __toESM(require_generateUtilityClass2());
  function getInputBaseUtilityClass(slot) {
    return (0, import_generateUtilityClass23.default)("MuiInputBase", slot);
  }
  var inputBaseClasses = (0, import_generateUtilityClasses17.default)("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var _excluded45 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, ownerState.formControl && styles8.formControl, ownerState.startAdornment && styles8.adornedStart, ownerState.endAdornment && styles8.adornedEnd, ownerState.error && styles8.error, ownerState.size === "small" && styles8.sizeSmall, ownerState.multiline && styles8.multiline, ownerState.color && styles8[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles8.fullWidth, ownerState.hiddenLabel && styles8.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.input, ownerState.size === "small" && styles8.inputSizeSmall, ownerState.multiline && styles8.inputMultiline, ownerState.type === "search" && styles8.inputTypeSearch, ownerState.startAdornment && styles8.inputAdornedStart, ownerState.endAdornment && styles8.inputAdornedEnd, ownerState.hiddenLabel && styles8.inputHiddenLabel];
  };
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes: classes2,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size && size !== "medium" && `size${capitalize_default(size)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return (0, import_composeClasses19.default)(slots, getInputBaseUtilityClass, classes2);
  };
  var InputBaseRoot = styled_default2("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default2("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(GlobalStyles_default2, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React64.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby2,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React64.useRef(value != null);
    const inputRef = React64.useRef();
    const handleInputRefWarning = React64.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React64.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React64.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React64.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React64.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_formatMuiErrorMessage.default)(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React64.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React64.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes2 = useUtilityClasses17(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input3 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(React64.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Root, _extends({}, rootProps, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_default(classes2.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Input3, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby2,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent(Input3) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_default(classes2.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types38.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types38.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types38.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types38.default.object,
    /**
     * @ignore
     */
    className: import_prop_types38.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types38.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types38.default.shape({
      Input: import_prop_types38.default.elementType,
      Root: import_prop_types38.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types38.default.shape({
      input: import_prop_types38.default.object,
      root: import_prop_types38.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types38.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types38.default.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: import_prop_types38.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types38.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types38.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types38.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types38.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_elementTypeAcceptingRef3.default,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types38.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType3.default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types38.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types38.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types38.default.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: import_prop_types38.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types38.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types38.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types38.default.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: import_prop_types38.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types38.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types38.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types38.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types38.default.bool,
    /**
     * @ignore
     */
    renderSuffix: import_prop_types38.default.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types38.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    /**
     * The size of the component.
     */
    size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["medium", "small"]), import_prop_types38.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types38.default.shape({
      input: import_prop_types38.default.object,
      root: import_prop_types38.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types38.default.shape({
      input: import_prop_types38.default.elementType,
      root: import_prop_types38.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types38.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types38.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types38.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return (0, import_generateUtilityClass24.default)("MuiInput", slot);
  }
  var inputClasses = _extends({}, inputBaseClasses_default, (0, import_generateUtilityClasses18.default)("MuiInput", ["root", "underline", "input"]));
  var inputClasses_default = inputClasses;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  init_extends();
  var import_generateUtilityClasses19 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass25 = __toESM(require_generateUtilityClass2());
  function getOutlinedInputUtilityClass(slot) {
    return (0, import_generateUtilityClass25.default)("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = _extends({}, inputBaseClasses_default, (0, import_generateUtilityClasses19.default)("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  init_extends();
  var import_generateUtilityClasses20 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass26 = __toESM(require_generateUtilityClass2());
  function getFilledInputUtilityClass(slot) {
    return (0, import_generateUtilityClass26.default)("MuiFilledInput", slot);
  }
  var filledInputClasses = _extends({}, inputBaseClasses_default, (0, import_generateUtilityClasses20.default)("MuiFilledInput", ["root", "underline", "input"]));
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React65 = __toESM(require_react());
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Autocomplete/autocompleteClasses.js
  var import_generateUtilityClasses21 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass27 = __toESM(require_generateUtilityClass2());
  function getAutocompleteUtilityClass(slot) {
    return (0, import_generateUtilityClass27.default)("MuiAutocomplete", slot);
  }
  var autocompleteClasses = (0, import_generateUtilityClasses21.default)("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  var autocompleteClasses_default = autocompleteClasses;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var _ClearIcon;
  var _ArrowDropDownIcon;
  var _excluded46 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
  var _excluded211 = ["ref"];
  var _excluded310 = ["key"];
  var _excluded47 = ["key"];
  var useThemeProps9 = createUseThemeProps("MuiAutocomplete");
  var useUtilityClasses18 = (ownerState) => {
    const {
      classes: classes2,
      disablePortal,
      expanded,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
      inputRoot: ["inputRoot"],
      input: ["input", inputFocused && "inputFocused"],
      tag: ["tag", `tagSize${capitalize_default(size)}`],
      endAdornment: ["endAdornment"],
      clearIndicator: ["clearIndicator"],
      popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
      popper: ["popper", disablePortal && "popperDisablePortal"],
      paper: ["paper"],
      listbox: ["listbox"],
      loading: ["loading"],
      noOptions: ["noOptions"],
      option: ["option"],
      groupLabel: ["groupLabel"],
      groupUl: ["groupUl"]
    };
    return (0, import_composeClasses20.default)(slots, getAutocompleteUtilityClass, classes2);
  };
  var AutocompleteRoot = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size
      } = ownerState;
      return [{
        [`& .${autocompleteClasses_default.tag}`]: styles8.tag
      }, {
        [`& .${autocompleteClasses_default.tag}`]: styles8[`tagSize${capitalize_default(size)}`]
      }, {
        [`& .${autocompleteClasses_default.inputRoot}`]: styles8.inputRoot
      }, {
        [`& .${autocompleteClasses_default.input}`]: styles8.input
      }, {
        [`& .${autocompleteClasses_default.input}`]: inputFocused && styles8.inputFocused
      }, styles8.root, fullWidth && styles8.fullWidth, hasPopupIcon && styles8.hasPopupIcon, hasClearIcon && styles8.hasClearIcon];
    }
  })({
    [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    },
    /* Avoid double tap issue on iOS */
    "@media (pointer: fine)": {
      [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
        visibility: "visible"
      }
    },
    [`& .${autocompleteClasses_default.tag}`]: {
      margin: 3,
      maxWidth: "calc(100% - 6px)"
    },
    [`& .${autocompleteClasses_default.inputRoot}`]: {
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses_default.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses_default.root}`]: {
      paddingBottom: 1,
      "& .MuiInput-input": {
        padding: "4px 4px 4px 0px"
      }
    },
    [`& .${inputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${inputClasses_default.input}`]: {
        padding: "2px 4px 3px 0"
      }
    },
    [`& .${outlinedInputClasses_default.root}`]: {
      padding: 9,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "7.5px 4px 7.5px 5px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      // Don't specify paddingRight, as it overrides the default value set when there is only
      // one of the popup or clear icon as the specificity is equal so the latter one wins
      paddingTop: 6,
      paddingBottom: 6,
      paddingLeft: 6,
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "2.5px 4px 2.5px 8px"
      }
    },
    [`& .${filledInputClasses_default.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses_default.input}`]: {
        padding: "7px 4px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses_default.input}`]: {
        padding: "2.5px 4px"
      }
    },
    [`& .${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 0,
      paddingBottom: 0,
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 16,
        paddingBottom: 17
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 8,
        paddingBottom: 9
      }
    },
    [`& .${autocompleteClasses_default.input}`]: {
      flexGrow: 1,
      textOverflow: "ellipsis",
      opacity: 0
    },
    variants: [{
      props: {
        fullWidth: true
      },
      style: {
        width: "100%"
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        [`& .${autocompleteClasses_default.tag}`]: {
          margin: 2,
          maxWidth: "calc(100% - 4px)"
        }
      }
    }, {
      props: {
        inputFocused: true
      },
      style: {
        [`& .${autocompleteClasses_default.input}`]: {
          opacity: 1
        }
      }
    }, {
      props: {
        multiple: true
      },
      style: {
        [`& .${autocompleteClasses_default.inputRoot}`]: {
          flexWrap: "wrap"
        }
      }
    }]
  });
  var AutocompleteEndAdornment = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "EndAdornment",
    overridesResolver: (props, styles8) => styles8.endAdornment
  })({
    // We use a position absolute to support wrapping tags.
    position: "absolute",
    right: 0,
    top: "50%",
    transform: "translate(0, -50%)"
  });
  var AutocompleteClearIndicator = styled_default2(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "ClearIndicator",
    overridesResolver: (props, styles8) => styles8.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: "hidden"
  });
  var AutocompletePopupIndicator = styled_default2(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "PopupIndicator",
    overridesResolver: ({
      ownerState
    }, styles8) => _extends({}, styles8.popupIndicator, ownerState.popupOpen && styles8.popupIndicatorOpen)
  })({
    padding: 2,
    marginRight: -2,
    variants: [{
      props: {
        popupOpen: true
      },
      style: {
        transform: "rotate(180deg)"
      }
    }]
  });
  var AutocompletePopper = styled_default2(Popper_default, {
    name: "MuiAutocomplete",
    slot: "Popper",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses_default.option}`]: styles8.option
      }, styles8.popper, ownerState.disablePortal && styles8.popperDisablePortal];
    }
  })(({
    theme
  }) => ({
    zIndex: (theme.vars || theme).zIndex.modal,
    variants: [{
      props: {
        disablePortal: true
      },
      style: {
        position: "absolute"
      }
    }]
  }));
  var AutocompletePaper = styled_default2(Paper_default, {
    name: "MuiAutocomplete",
    slot: "Paper",
    overridesResolver: (props, styles8) => styles8.paper
  })(({
    theme
  }) => _extends({}, theme.typography.body1, {
    overflow: "auto"
  }));
  var AutocompleteLoading = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Loading",
    overridesResolver: (props, styles8) => styles8.loading
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteNoOptions = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "NoOptions",
    overridesResolver: (props, styles8) => styles8.noOptions
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteListbox = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Listbox",
    overridesResolver: (props, styles8) => styles8.listbox
  })(({
    theme
  }) => ({
    listStyle: "none",
    margin: 0,
    padding: "8px 0",
    maxHeight: "40vh",
    overflow: "auto",
    position: "relative",
    [`& .${autocompleteClasses_default.option}`]: {
      minHeight: 48,
      display: "flex",
      overflow: "hidden",
      justifyContent: "flex-start",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: 6,
      boxSizing: "border-box",
      outline: "0",
      WebkitTapHighlightColor: "transparent",
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      },
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      '&[aria-disabled="true"]': {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${autocompleteClasses_default.focused}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: (theme.vars || theme).palette.action.selected
          }
        },
        [`&.${autocompleteClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }
  }));
  var AutocompleteGroupLabel = styled_default2(ListSubheader_default, {
    name: "MuiAutocomplete",
    slot: "GroupLabel",
    overridesResolver: (props, styles8) => styles8.groupLabel
  })(({
    theme
  }) => ({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    top: -8
  }));
  var AutocompleteGroupUl = styled_default2("ul", {
    name: "MuiAutocomplete",
    slot: "GroupUl",
    overridesResolver: (props, styles8) => styles8.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses_default.option}`]: {
      paddingLeft: 24
    }
  });
  var Autocomplete = /* @__PURE__ */ React66.forwardRef(function Autocomplete2(inProps, ref) {
    var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
    const props = useThemeProps9({
      props: inProps,
      name: "MuiAutocomplete"
    });
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className,
      clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Close_default, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = "Clear",
      closeText = "Close",
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = "auto",
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = (more) => `+${more}`,
      getOptionLabel: getOptionLabelProp,
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = "ul",
      ListboxProps,
      loading = false,
      loadingText = "Loading\u2026",
      multiple = false,
      noOptionsText = "No options",
      openOnFocus = false,
      openText = "Open",
      PaperComponent = Paper_default,
      PopperComponent = Popper_default,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ArrowDropDown_default, {})),
      readOnly = false,
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size = "medium",
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      expanded,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete(_extends({}, props, {
      componentName: "Autocomplete"
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
    const {
      onMouseDown: handleInputMouseDown
    } = getInputProps();
    const {
      ref: externalListboxRef
    } = ListboxProps != null ? ListboxProps : {};
    const _getListboxProps = getListboxProps(), {
      ref: listboxRef
    } = _getListboxProps, otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded211);
    const combinedListboxRef = useForkRef_default(listboxRef, externalListboxRef);
    const defaultGetOptionLabel = (option) => {
      var _option$label;
      return (_option$label = option.label) != null ? _option$label : option;
    };
    const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;
    const ownerState = _extends({}, props, {
      disablePortal,
      expanded,
      focused,
      fullWidth,
      getOptionLabel,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size
    });
    const classes2 = useUtilityClasses18(ownerState);
    let startAdornment;
    if (multiple && value.length > 0) {
      const getCustomizedTagProps = (params) => _extends({
        className: classes2.tag,
        disabled
      }, getTagProps(params));
      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
      } else {
        startAdornment = value.map((option, index) => {
          const _getCustomizedTagProp = getCustomizedTagProps({
            index
          }), {
            key
          } = _getCustomizedTagProp, customTagProps = _objectWithoutPropertiesLoose(_getCustomizedTagProp, _excluded310);
          return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Chip_default, _extends({
            label: getOptionLabel(option),
            size
          }, customTagProps, ChipProps), key);
        });
      }
    }
    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;
      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push(/* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", {
          className: classes2.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }
    const defaultRenderGroup = (params) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("li", {
      children: [/* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteGroupLabel, {
        className: classes2.groupLabel,
        ownerState,
        component: "div",
        children: params.group
      }), /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteGroupUl, {
        className: classes2.groupUl,
        ownerState,
        children: params.children
      })]
    }, params.key);
    const renderGroup = renderGroupProp || defaultRenderGroup;
    const defaultRenderOption = (props2, option) => {
      const {
        key
      } = props2, otherProps = _objectWithoutPropertiesLoose(props2, _excluded47);
      return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("li", _extends({}, otherProps, {
        children: getOptionLabel(option)
      }), key);
    };
    const renderOption = renderOptionProp || defaultRenderOption;
    const renderListOption = (option, index) => {
      const optionProps = getOptionProps({
        option,
        index
      });
      return renderOption(_extends({}, optionProps, {
        className: classes2.option
      }), option, {
        selected: optionProps["aria-selected"],
        index,
        inputValue
      }, ownerState);
    };
    const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
    const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
    const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
    const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
    const renderAutocompletePopperChildren = (children) => /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompletePopper, _extends({
      as: PopperComponent,
      disablePortal,
      style: {
        width: anchorEl ? anchorEl.clientWidth : null
      },
      ownerState,
      role: "presentation",
      anchorEl,
      open: popupOpen
    }, popperSlotProps, {
      className: clsx_default(classes2.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
      children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompletePaper, _extends({
        ownerState,
        as: PaperComponent
      }, paperSlotProps, {
        className: clsx_default(classes2.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
        children
      }))
    }));
    let autocompletePopper = null;
    if (groupedOptions.length > 0) {
      autocompletePopper = renderAutocompletePopperChildren(/* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteListbox, _extends({
        as: ListboxComponent,
        className: classes2.listbox,
        ownerState
      }, otherListboxProps, ListboxProps, {
        ref: combinedListboxRef,
        children: groupedOptions.map((option, index) => {
          if (groupBy) {
            return renderGroup({
              key: option.key,
              group: option.group,
              children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
            });
          }
          return renderListOption(option, index);
        })
      })));
    } else if (loading && groupedOptions.length === 0) {
      autocompletePopper = renderAutocompletePopperChildren(/* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteLoading, {
        className: classes2.loading,
        ownerState,
        children: loadingText
      }));
    } else if (groupedOptions.length === 0 && !freeSolo && !loading) {
      autocompletePopper = renderAutocompletePopperChildren(/* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteNoOptions, {
        className: classes2.noOptions,
        ownerState,
        role: "presentation",
        onMouseDown: (event) => {
          event.preventDefault();
        },
        children: noOptionsText
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(React66.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteRoot, _extends({
        ref,
        className: clsx_default(classes2.root, className),
        ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size === "small" ? "small" : void 0,
          InputLabelProps: getInputLabelProps(),
          InputProps: _extends({
            ref: setAnchorEl,
            className: classes2.inputRoot,
            startAdornment,
            onClick: (event) => {
              if (event.target === event.currentTarget) {
                handleInputMouseDown(event);
              }
            }
          }, (hasClearIcon || hasPopupIcon) && {
            endAdornment: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(AutocompleteEndAdornment, {
              className: classes2.endAdornment,
              ownerState,
              children: [hasClearIcon ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState
              }, clearIndicatorSlotProps, {
                className: clsx_default(classes2.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                children: clearIcon
              })) : null, hasPopupIcon ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                ownerState
              }, popupIndicatorSlotProps, {
                className: clsx_default(classes2.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                children: popupIcon
              })) : null]
            })
          }),
          inputProps: _extends({
            className: classes2.input,
            disabled,
            readOnly
          }, getInputProps())
        })
      })), anchorEl ? autocompletePopper : null]
    });
  });
  true ? Autocomplete.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the portion of the selected suggestion that the user hasn't typed,
     * known as the completion string, appears inline after the input cursor in the textbox.
     * The inline completion string is visually highlighted and has a selected state.
     * @default false
     */
    autoComplete: import_prop_types39.default.bool,
    /**
     * If `true`, the first option is automatically highlighted.
     * @default false
     */
    autoHighlight: import_prop_types39.default.bool,
    /**
     * If `true`, the selected option becomes the value of the input
     * when the Autocomplete loses focus unless the user chooses
     * a different option or changes the character string in the input.
     *
     * When using the `freeSolo` mode, the typed value will be the input value
     * if the Autocomplete loses focus without highlighting an option.
     * @default false
     */
    autoSelect: import_prop_types39.default.bool,
    /**
     * Control if the input should be blurred when an option is selected:
     *
     * - `false` the input is not blurred.
     * - `true` the input is always blurred.
     * - `touch` the input is blurred after a touch event.
     * - `mouse` the input is blurred after a mouse event.
     * @default false
     */
    blurOnSelect: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["mouse", "touch"]), import_prop_types39.default.bool]),
    /**
     * Props applied to the [`Chip`](/material-ui/api/chip/) element.
     */
    ChipProps: import_prop_types39.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types39.default.object,
    /**
     * @ignore
     */
    className: import_prop_types39.default.string,
    /**
     * The icon to display in place of the default clear icon.
     * @default <ClearIcon fontSize="small" />
     */
    clearIcon: import_prop_types39.default.node,
    /**
     * If `true`, the input's text is cleared on blur if no value is selected.
     *
     * Set it to `true` if you want to help the user enter a new value.
     * Set it to `false` if you want to help the user resume their search.
     * @default !props.freeSolo
     */
    clearOnBlur: import_prop_types39.default.bool,
    /**
     * If `true`, clear all values when the user presses escape and the popup is closed.
     * @default false
     */
    clearOnEscape: import_prop_types39.default.bool,
    /**
     * Override the default text for the *clear* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Clear'
     */
    clearText: import_prop_types39.default.string,
    /**
     * Override the default text for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types39.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types39.default.shape({
      clearIndicator: import_prop_types39.default.object,
      paper: import_prop_types39.default.object,
      popper: import_prop_types39.default.object,
      popupIndicator: import_prop_types39.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     * @default props.multiple ? [] : null
     */
    defaultValue: (0, import_chainPropTypes4.default)(import_prop_types39.default.any, (props) => {
      if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
        return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
      }
      return null;
    }),
    /**
     * If `true`, the input can't be cleared.
     * @default false
     */
    disableClearable: import_prop_types39.default.bool,
    /**
     * If `true`, the popup won't close when a value is selected.
     * @default false
     */
    disableCloseOnSelect: import_prop_types39.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types39.default.bool,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types39.default.bool,
    /**
     * If `true`, the list box in the popup will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types39.default.bool,
    /**
     * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types39.default.bool,
    /**
     * A function that determines the filtered options to be rendered on search.
     *
     * @default createFilterOptions()
     * @param {Value[]} options The options to render.
     * @param {object} state The state of the component.
     * @returns {Value[]}
     */
    filterOptions: import_prop_types39.default.func,
    /**
     * If `true`, hide the selected options from the list box.
     * @default false
     */
    filterSelectedOptions: import_prop_types39.default.bool,
    /**
     * Force the visibility display of the popup icon.
     * @default 'auto'
     */
    forcePopupIcon: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["auto"]), import_prop_types39.default.bool]),
    /**
     * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
     * @default false
     */
    freeSolo: import_prop_types39.default.bool,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types39.default.bool,
    /**
     * The label to display when the tags are truncated (`limitTags`).
     *
     * @param {number} more The number of truncated tags.
     * @returns {ReactNode}
     * @default (more) => `+${more}`
     */
    getLimitTagsText: import_prop_types39.default.func,
    /**
     * Used to determine the disabled state for a given option.
     *
     * @param {Value} option The option to test.
     * @returns {boolean}
     */
    getOptionDisabled: import_prop_types39.default.func,
    /**
     * Used to determine the key for a given option.
     * This can be useful when the labels of options are not unique (since labels are used as keys by default).
     *
     * @param {Value} option The option to get the key for.
     * @returns {string | number}
     */
    getOptionKey: import_prop_types39.default.func,
    /**
     * Used to determine the string value for a given option.
     * It's used to fill the input (and the list box options if `renderOption` is not provided).
     *
     * If used in free solo mode, it must accept both the type of the options and a string.
     *
     * @param {Value} option
     * @returns {string}
     * @default (option) => option.label ?? option
     */
    getOptionLabel: import_prop_types39.default.func,
    /**
     * If provided, the options will be grouped under the returned string.
     * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
     *
     * @param {Value} options The options to group.
     * @returns {string}
     */
    groupBy: import_prop_types39.default.func,
    /**
     * If `true`, the component handles the "Home" and "End" keys when the popup is open.
     * It should move focus to the first option and last option, respectively.
     * @default !props.freeSolo
     */
    handleHomeEndKeys: import_prop_types39.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide an id it will fall back to a randomly generated one.
     */
    id: import_prop_types39.default.string,
    /**
     * If `true`, the highlight can move to the input.
     * @default false
     */
    includeInputInList: import_prop_types39.default.bool,
    /**
     * The input value.
     */
    inputValue: import_prop_types39.default.string,
    /**
     * Used to determine if the option represents the given value.
     * Uses strict equality by default.
     * ⚠️ Both arguments need to be handled, an option can only match with one value.
     *
     * @param {Value} option The option to test.
     * @param {Value} value The value to test against.
     * @returns {boolean}
     */
    isOptionEqualToValue: import_prop_types39.default.func,
    /**
     * The maximum number of tags that will be visible when not focused.
     * Set `-1` to disable the limit.
     * @default -1
     */
    limitTags: import_integerPropType2.default,
    /**
     * The component used to render the listbox.
     * @default 'ul'
     */
    ListboxComponent: import_prop_types39.default.elementType,
    /**
     * Props applied to the Listbox element.
     */
    ListboxProps: import_prop_types39.default.object,
    /**
     * If `true`, the component is in a loading state.
     * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
     * @default false
     */
    loading: import_prop_types39.default.bool,
    /**
     * Text to display when in a loading state.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Loading…'
     */
    loadingText: import_prop_types39.default.node,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types39.default.bool,
    /**
     * Text to display when there are no options.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'No options'
     */
    noOptionsText: import_prop_types39.default.node,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value|Value[]} value The new value of the component.
     * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
     * @param {string} [details]
     */
    onChange: import_prop_types39.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
     */
    onClose: import_prop_types39.default.func,
    /**
     * Callback fired when the highlight option changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value} option The highlighted option.
     * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
     */
    onHighlightChange: import_prop_types39.default.func,
    /**
     * Callback fired when the input value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} value The new value of the text input.
     * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
     */
    onInputChange: import_prop_types39.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types39.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types39.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types39.default.bool,
    /**
     * If `true`, the popup will open on input focus.
     * @default false
     */
    openOnFocus: import_prop_types39.default.bool,
    /**
     * Override the default text for the *open popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Open'
     */
    openText: import_prop_types39.default.string,
    /**
     * Array of options.
     */
    options: import_prop_types39.default.array.isRequired,
    /**
     * The component used to render the body of the popup.
     * @default Paper
     */
    PaperComponent: import_prop_types39.default.elementType,
    /**
     * The component used to position the popup.
     * @default Popper
     */
    PopperComponent: import_prop_types39.default.elementType,
    /**
     * The icon to display in place of the default popup icon.
     * @default <ArrowDropDownIcon />
     */
    popupIcon: import_prop_types39.default.node,
    /**
     * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
     * @default false
     */
    readOnly: import_prop_types39.default.bool,
    /**
     * Render the group.
     *
     * @param {AutocompleteRenderGroupParams} params The group to render.
     * @returns {ReactNode}
     */
    renderGroup: import_prop_types39.default.func,
    /**
     * Render the input.
     *
     * @param {object} params
     * @returns {ReactNode}
     */
    renderInput: import_prop_types39.default.func.isRequired,
    /**
     * Render the option, use `getOptionLabel` by default.
     *
     * @param {object} props The props to apply on the li element.
     * @param {Value} option The option to render.
     * @param {object} state The state of each option.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderOption: import_prop_types39.default.func,
    /**
     * Render the selected value.
     *
     * @param {Value[]} value The `value` provided to the component.
     * @param {function} getTagProps A tag props getter.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderTags: import_prop_types39.default.func,
    /**
     * If `true`, the input's text is selected on focus.
     * It helps the user clear the selected value.
     * @default !props.freeSolo
     */
    selectOnFocus: import_prop_types39.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["small", "medium"]), import_prop_types39.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types39.default.shape({
      clearIndicator: import_prop_types39.default.object,
      paper: import_prop_types39.default.object,
      popper: import_prop_types39.default.object,
      popupIndicator: import_prop_types39.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
    /**
     * The value of the autocomplete.
     *
     * The value must have reference equality with the option in order to be selected.
     * You can customize the equality behavior with the `isOptionEqualToValue` prop.
     */
    value: (0, import_chainPropTypes4.default)(import_prop_types39.default.any, (props) => {
      if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
        return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
      }
      return null;
    })
  } : void 0;
  var Autocomplete_default = Autocomplete;

  // node_modules/@mui/material/Avatar/Avatar.js
  init_extends();
  var React68 = __toESM(require_react());
  var import_prop_types40 = __toESM(require_prop_types());
  var import_composeClasses21 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/internal/svg-icons/Person.js
  var React67 = __toESM(require_react());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var Person_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime57.jsx)("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), "Person");

  // node_modules/@mui/material/Avatar/avatarClasses.js
  var import_generateUtilityClasses22 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass28 = __toESM(require_generateUtilityClass2());
  function getAvatarUtilityClass(slot) {
    return (0, import_generateUtilityClass28.default)("MuiAvatar", slot);
  }
  var avatarClasses = (0, import_generateUtilityClasses22.default)("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]);
  var avatarClasses_default = avatarClasses;

  // node_modules/@mui/material/Avatar/Avatar.js
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var _excluded48 = ["alt", "children", "className", "component", "slots", "slotProps", "imgProps", "sizes", "src", "srcSet", "variant"];
  var useThemeProps10 = createUseThemeProps("MuiAvatar");
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      colorDefault
    } = ownerState;
    const slots = {
      root: ["root", variant, colorDefault && "colorDefault"],
      img: ["img"],
      fallback: ["fallback"]
    };
    return (0, import_composeClasses21.default)(slots, getAvatarUtilityClass, classes2);
  };
  var AvatarRoot = styled_default2("div", {
    name: "MuiAvatar",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], ownerState.colorDefault && styles8.colorDefault];
    }
  })(({
    theme
  }) => ({
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    width: 40,
    height: 40,
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(20),
    lineHeight: 1,
    borderRadius: "50%",
    overflow: "hidden",
    userSelect: "none",
    variants: [{
      props: {
        variant: "rounded"
      },
      style: {
        borderRadius: (theme.vars || theme).shape.borderRadius
      }
    }, {
      props: {
        variant: "square"
      },
      style: {
        borderRadius: 0
      }
    }, {
      props: {
        colorDefault: true
      },
      style: _extends({
        color: (theme.vars || theme).palette.background.default
      }, theme.vars ? {
        backgroundColor: theme.vars.palette.Avatar.defaultBg
      } : _extends({
        backgroundColor: theme.palette.grey[400]
      }, theme.applyStyles("dark", {
        backgroundColor: theme.palette.grey[600]
      })))
    }]
  }));
  var AvatarImg = styled_default2("img", {
    name: "MuiAvatar",
    slot: "Img",
    overridesResolver: (props, styles8) => styles8.img
  })({
    width: "100%",
    height: "100%",
    textAlign: "center",
    // Handle non-square image. The property isn't supported by IE11.
    objectFit: "cover",
    // Hide alt text.
    color: "transparent",
    // Hide the image broken icon, only works on Chrome.
    textIndent: 1e4
  });
  var AvatarFallback = styled_default2(Person_default, {
    name: "MuiAvatar",
    slot: "Fallback",
    overridesResolver: (props, styles8) => styles8.fallback
  })({
    width: "75%",
    height: "75%"
  });
  function useLoaded({
    crossOrigin,
    referrerPolicy,
    src,
    srcSet
  }) {
    const [loaded, setLoaded] = React68.useState(false);
    React68.useEffect(() => {
      if (!src && !srcSet) {
        return void 0;
      }
      setLoaded(false);
      let active = true;
      const image = new Image();
      image.onload = () => {
        if (!active) {
          return;
        }
        setLoaded("loaded");
      };
      image.onerror = () => {
        if (!active) {
          return;
        }
        setLoaded("error");
      };
      image.crossOrigin = crossOrigin;
      image.referrerPolicy = referrerPolicy;
      image.src = src;
      if (srcSet) {
        image.srcset = srcSet;
      }
      return () => {
        active = false;
      };
    }, [crossOrigin, referrerPolicy, src, srcSet]);
    return loaded;
  }
  var Avatar = /* @__PURE__ */ React68.forwardRef(function Avatar2(inProps, ref) {
    const props = useThemeProps10({
      props: inProps,
      name: "MuiAvatar"
    });
    const {
      alt,
      children: childrenProp,
      className,
      component = "div",
      slots = {},
      slotProps = {},
      imgProps,
      sizes,
      src,
      srcSet,
      variant = "circular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
    let children = null;
    const loaded = useLoaded(_extends({}, imgProps, {
      src,
      srcSet
    }));
    const hasImg = src || srcSet;
    const hasImgNotFailing = hasImg && loaded !== "error";
    const ownerState = _extends({}, props, {
      colorDefault: !hasImgNotFailing,
      component,
      variant
    });
    const classes2 = useUtilityClasses19(ownerState);
    const [ImgSlot, imgSlotProps] = useSlot("img", {
      className: classes2.img,
      elementType: AvatarImg,
      externalForwardedProps: {
        slots,
        slotProps: {
          img: _extends({}, imgProps, slotProps.img)
        }
      },
      additionalProps: {
        alt,
        src,
        srcSet,
        sizes
      },
      ownerState
    });
    if (hasImgNotFailing) {
      children = /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ImgSlot, _extends({}, imgSlotProps));
    } else if (!!childrenProp || childrenProp === 0) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AvatarFallback, {
        ownerState,
        className: classes2.fallback
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(AvatarRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children
    }));
  });
  true ? Avatar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Used in combination with `src` or `srcSet` to
     * provide an alt attribute for the rendered `img` element.
     */
    alt: import_prop_types40.default.string,
    /**
     * Used to render icon or text elements inside the Avatar if `src` is not set.
     * This can be an element, or just a string.
     */
    children: import_prop_types40.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types40.default.object,
    /**
     * @ignore
     */
    className: import_prop_types40.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types40.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
     * It can be used to listen for the loading error event.
     * @deprecated Use `slotProps.img` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     */
    imgProps: import_prop_types40.default.object,
    /**
     * The `sizes` attribute for the `img` element.
     */
    sizes: import_prop_types40.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types40.default.shape({
      img: import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types40.default.shape({
      img: import_prop_types40.default.elementType
    }),
    /**
     * The `src` attribute for the `img` element.
     */
    src: import_prop_types40.default.string,
    /**
     * The `srcSet` attribute for the `img` element.
     * Use this attribute for responsive image display.
     */
    srcSet: import_prop_types40.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object]),
    /**
     * The shape of the avatar.
     * @default 'circular'
     */
    variant: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["circular", "rounded", "square"]), import_prop_types40.default.string])
  } : void 0;
  var Avatar_default = Avatar;

  // node_modules/@mui/material/AvatarGroup/AvatarGroup.js
  init_extends();
  var React69 = __toESM(require_react());
  var import_prop_types41 = __toESM(require_prop_types());
  var import_react_is2 = __toESM(require_react_is3());
  var import_chainPropTypes5 = __toESM(require_chainPropTypes2());
  var import_composeClasses22 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/AvatarGroup/avatarGroupClasses.js
  var import_generateUtilityClasses23 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass29 = __toESM(require_generateUtilityClass2());
  function getAvatarGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass29.default)("MuiAvatarGroup", slot);
  }
  var avatarGroupClasses = (0, import_generateUtilityClasses23.default)("MuiAvatarGroup", ["root", "avatar"]);
  var avatarGroupClasses_default = avatarGroupClasses;

  // node_modules/@mui/material/AvatarGroup/AvatarGroup.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var _excluded49 = ["children", "className", "component", "componentsProps", "max", "renderSurplus", "slotProps", "spacing", "total", "variant"];
  var SPACINGS = {
    small: -16,
    medium: null
  };
  var useUtilityClasses20 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      avatar: ["avatar"]
    };
    return (0, import_composeClasses22.default)(slots, getAvatarGroupUtilityClass, classes2);
  };
  var AvatarGroupRoot = styled_default2("div", {
    name: "MuiAvatarGroup",
    slot: "Root",
    overridesResolver: (props, styles8) => _extends({
      [`& .${avatarGroupClasses_default.avatar}`]: styles8.avatar
    }, styles8.root)
  })(({
    theme,
    ownerState
  }) => {
    const marginValue = ownerState.spacing && SPACINGS[ownerState.spacing] !== void 0 ? SPACINGS[ownerState.spacing] : -ownerState.spacing;
    return {
      [`& .${avatarClasses_default.root}`]: {
        border: `2px solid ${(theme.vars || theme).palette.background.default}`,
        boxSizing: "content-box",
        marginLeft: marginValue != null ? marginValue : -8,
        "&:last-child": {
          marginLeft: 0
        }
      },
      display: "flex",
      flexDirection: "row-reverse"
    };
  });
  var AvatarGroup = /* @__PURE__ */ React69.forwardRef(function AvatarGroup2(inProps, ref) {
    var _slotProps$additional;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiAvatarGroup"
    });
    const {
      children: childrenProp,
      className,
      component = "div",
      componentsProps = {},
      max: max2 = 5,
      renderSurplus,
      slotProps = {},
      spacing: spacing2 = "medium",
      total,
      variant = "circular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
    let clampedMax = max2 < 2 ? 2 : max2;
    const ownerState = _extends({}, props, {
      max: max2,
      spacing: spacing2,
      component,
      variant
    });
    const classes2 = useUtilityClasses20(ownerState);
    const children = React69.Children.toArray(childrenProp).filter((child) => {
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return /* @__PURE__ */ React69.isValidElement(child);
    });
    const totalAvatars = total || children.length;
    if (totalAvatars === clampedMax) {
      clampedMax += 1;
    }
    clampedMax = Math.min(totalAvatars + 1, clampedMax);
    const maxAvatars = Math.min(children.length, clampedMax - 1);
    const extraAvatars = Math.max(totalAvatars - clampedMax, totalAvatars - maxAvatars, 0);
    const extraAvatarsElement = renderSurplus ? renderSurplus(extraAvatars) : `+${extraAvatars}`;
    const additionalAvatarSlotProps = (_slotProps$additional = slotProps.additionalAvatar) != null ? _slotProps$additional : componentsProps.additionalAvatar;
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(AvatarGroupRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: [extraAvatars ? /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Avatar_default, _extends({
        variant
      }, additionalAvatarSlotProps, {
        className: clsx_default(classes2.avatar, additionalAvatarSlotProps == null ? void 0 : additionalAvatarSlotProps.className),
        children: extraAvatarsElement
      })) : null, children.slice(0, maxAvatars).reverse().map((child) => {
        return /* @__PURE__ */ React69.cloneElement(child, {
          className: clsx_default(child.props.className, classes2.avatar),
          variant: child.props.variant || variant
        });
      })]
    }));
  });
  true ? AvatarGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The avatars to stack.
     */
    children: import_prop_types41.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types41.default.object,
    /**
     * @ignore
     */
    className: import_prop_types41.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types41.default.elementType,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types41.default.shape({
      additionalAvatar: import_prop_types41.default.object
    }),
    /**
     * Max avatars to show before +x.
     * @default 5
     */
    max: (0, import_chainPropTypes5.default)(import_prop_types41.default.number, (props) => {
      if (props.max < 2) {
        return new Error(["MUI: The prop `max` should be equal to 2 or above.", "A value below is clamped to 2."].join("\n"));
      }
      return null;
    }),
    /**
     * custom renderer of extraAvatars
     * @param {number} surplus number of extra avatars
     * @returns {React.ReactNode} custom element to display
     */
    renderSurplus: import_prop_types41.default.func,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types41.default.shape({
      additionalAvatar: import_prop_types41.default.object
    }),
    /**
     * Spacing between avatars.
     * @default 'medium'
     */
    spacing: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["medium", "small"]), import_prop_types41.default.number]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    /**
     * The total number of avatars. Used for calculating the number of extra avatars.
     * @default children.length
     */
    total: import_prop_types41.default.number,
    /**
     * The variant to use.
     * @default 'circular'
     */
    variant: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["circular", "rounded", "square"]), import_prop_types41.default.string])
  } : void 0;
  var AvatarGroup_default = AvatarGroup;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  init_extends();
  var React71 = __toESM(require_react());
  var import_prop_types43 = __toESM(require_prop_types());
  var import_composeClasses23 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Fade/Fade.js
  init_extends();
  var React70 = __toESM(require_react());
  var import_prop_types42 = __toESM(require_prop_types());
  var import_elementAcceptingRef = __toESM(require_elementAcceptingRef2());
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var _excluded50 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React70.forwardRef(function Fade2(props, ref) {
    const theme = useTheme6();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout3 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
    const enableStrictModeCompat = true;
    const nodeRef = React70.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout3
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React70.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style4, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types42.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types42.default.bool,
    /**
     * A single child content element.
     */
    children: import_elementAcceptingRef.default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types42.default.oneOfType([import_prop_types42.default.shape({
      enter: import_prop_types42.default.string,
      exit: import_prop_types42.default.string
    }), import_prop_types42.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types42.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types42.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types42.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types42.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types42.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types42.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types42.default.func,
    /**
     * @ignore
     */
    style: import_prop_types42.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.shape({
      appear: import_prop_types42.default.number,
      enter: import_prop_types42.default.number,
      exit: import_prop_types42.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  var import_generateUtilityClasses24 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass30 = __toESM(require_generateUtilityClass2());
  function getBackdropUtilityClass(slot) {
    return (0, import_generateUtilityClass30.default)("MuiBackdrop", slot);
  }
  var backdropClasses = (0, import_generateUtilityClasses24.default)("MuiBackdrop", ["root", "invisible"]);
  var backdropClasses_default = backdropClasses;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var _excluded51 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  var useUtilityClasses21 = (ownerState) => {
    const {
      classes: classes2,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return (0, import_composeClasses23.default)(slots, getBackdropUtilityClass, classes2);
  };
  var BackdropRoot = styled_default2("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.invisible && styles8.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React71.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade_default,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes2 = useUtilityClasses21(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx_default(classes2.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes: classes2,
        ref,
        children
      }))
    }));
  });
  true ? Backdrop.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types43.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types43.default.object,
    /**
     * @ignore
     */
    className: import_prop_types43.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types43.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types43.default.shape({
      Root: import_prop_types43.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types43.default.shape({
      root: import_prop_types43.default.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: import_prop_types43.default.bool,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types43.default.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types43.default.shape({
      root: import_prop_types43.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types43.default.shape({
      root: import_prop_types43.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types43.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.shape({
      appear: import_prop_types43.default.number,
      enter: import_prop_types43.default.number,
      exit: import_prop_types43.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Badge/Badge.js
  init_extends();
  var React72 = __toESM(require_react());
  var import_prop_types44 = __toESM(require_prop_types());
  var import_usePreviousProps = __toESM(require_usePreviousProps2());
  var import_composeClasses24 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Badge/badgeClasses.js
  var import_generateUtilityClasses25 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass31 = __toESM(require_generateUtilityClass2());
  function getBadgeUtilityClass(slot) {
    return (0, import_generateUtilityClass31.default)("MuiBadge", slot);
  }
  var badgeClasses = (0, import_generateUtilityClasses25.default)("MuiBadge", [
    "root",
    "badge",
    "dot",
    "standard",
    "anchorOriginTopRight",
    "anchorOriginBottomRight",
    "anchorOriginTopLeft",
    "anchorOriginBottomLeft",
    "invisible",
    "colorError",
    "colorInfo",
    "colorPrimary",
    "colorSecondary",
    "colorSuccess",
    "colorWarning",
    "overlapRectangular",
    "overlapCircular",
    // TODO: v6 remove the overlap value from these class keys
    "anchorOriginTopLeftCircular",
    "anchorOriginTopLeftRectangular",
    "anchorOriginTopRightCircular",
    "anchorOriginTopRightRectangular",
    "anchorOriginBottomLeftCircular",
    "anchorOriginBottomLeftRectangular",
    "anchorOriginBottomRightCircular",
    "anchorOriginBottomRightRectangular"
  ]);
  var badgeClasses_default = badgeClasses;

  // node_modules/@mui/material/Badge/Badge.js
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var _excluded52 = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
  var RADIUS_STANDARD = 10;
  var RADIUS_DOT = 4;
  var useThemeProps11 = createUseThemeProps("MuiBadge");
  var useUtilityClasses22 = (ownerState) => {
    const {
      color: color2,
      anchorOrigin,
      invisible,
      overlap,
      variant,
      classes: classes2 = {}
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}${capitalize_default(overlap)}`, `overlap${capitalize_default(overlap)}`, color2 !== "default" && `color${capitalize_default(color2)}`]
    };
    return (0, import_composeClasses24.default)(slots, getBadgeUtilityClass, classes2);
  };
  var BadgeRoot = styled_default2("span", {
    name: "MuiBadge",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    position: "relative",
    display: "inline-flex",
    // For correct alignment with the text.
    verticalAlign: "middle",
    flexShrink: 0
  });
  var BadgeBadge = styled_default2("span", {
    name: "MuiBadge",
    slot: "Badge",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.badge, styles8[ownerState.variant], styles8[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles8[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles8.invisible];
    }
  })(({
    theme
  }) => {
    var _theme$vars;
    return {
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap",
      justifyContent: "center",
      alignContent: "center",
      alignItems: "center",
      position: "absolute",
      boxSizing: "border-box",
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(12),
      minWidth: RADIUS_STANDARD * 2,
      lineHeight: 1,
      padding: "0 6px",
      height: RADIUS_STANDARD * 2,
      borderRadius: RADIUS_STANDARD,
      zIndex: 1,
      // Render the badge on top of potential ripples.
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.enteringScreen
      }),
      variants: [...Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter((key) => {
        var _theme$vars2, _theme$vars3;
        return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main && ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette[key].contrastText;
      }).map((color2) => ({
        props: {
          color: color2
        },
        style: {
          backgroundColor: (theme.vars || theme).palette[color2].main,
          color: (theme.vars || theme).palette[color2].contrastText
        }
      })), {
        props: {
          variant: "dot"
        },
        style: {
          borderRadius: RADIUS_DOT,
          height: RADIUS_DOT * 2,
          minWidth: RADIUS_DOT * 2,
          padding: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular",
        style: {
          top: 0,
          right: 0,
          transform: "scale(1) translate(50%, -50%)",
          transformOrigin: "100% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular",
        style: {
          bottom: 0,
          right: 0,
          transform: "scale(1) translate(50%, 50%)",
          transformOrigin: "100% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, 50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular",
        style: {
          top: 0,
          left: 0,
          transform: "scale(1) translate(-50%, -50%)",
          transformOrigin: "0% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular",
        style: {
          bottom: 0,
          left: 0,
          transform: "scale(1) translate(-50%, 50%)",
          transformOrigin: "0% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, 50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular",
        style: {
          top: "14%",
          right: "14%",
          transform: "scale(1) translate(50%, -50%)",
          transformOrigin: "100% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular",
        style: {
          bottom: "14%",
          right: "14%",
          transform: "scale(1) translate(50%, 50%)",
          transformOrigin: "100% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, 50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular",
        style: {
          top: "14%",
          left: "14%",
          transform: "scale(1) translate(-50%, -50%)",
          transformOrigin: "0% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular",
        style: {
          bottom: "14%",
          left: "14%",
          transform: "scale(1) translate(-50%, 50%)",
          transformOrigin: "0% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, 50%)"
          }
        }
      }, {
        props: {
          invisible: true
        },
        style: {
          transition: theme.transitions.create("transform", {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.leavingScreen
          })
        }
      }]
    };
  });
  var Badge = /* @__PURE__ */ React72.forwardRef(function Badge2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
    const props = useThemeProps11({
      props: inProps,
      name: "MuiBadge"
    });
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: "top",
        horizontal: "right"
      },
      className,
      component,
      components = {},
      componentsProps = {},
      children,
      overlap: overlapProp = "rectangular",
      color: colorProp = "default",
      invisible: invisibleProp = false,
      max: maxProp = 99,
      badgeContent: badgeContentProp,
      slots,
      slotProps,
      showZero = false,
      variant: variantProp = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
    const {
      badgeContent,
      invisible: invisibleFromHook,
      max: max2,
      displayValue: displayValueFromHook
    } = useBadge({
      max: maxProp,
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero
    });
    const prevProps = (0, import_usePreviousProps.default)({
      anchorOrigin: anchorOriginProp,
      color: colorProp,
      overlap: overlapProp,
      variant: variantProp,
      badgeContent: badgeContentProp
    });
    const invisible = invisibleFromHook || badgeContent == null && variantProp !== "dot";
    const {
      color: color2 = colorProp,
      overlap = overlapProp,
      anchorOrigin = anchorOriginProp,
      variant = variantProp
    } = invisible ? prevProps : props;
    const displayValue = variant !== "dot" ? displayValueFromHook : void 0;
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max2,
      displayValue,
      showZero,
      anchorOrigin,
      color: color2,
      overlap,
      variant
    });
    const classes2 = useUtilityClasses22(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
    const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(rootSlotProps == null ? void 0 : rootSlotProps.className, classes2.root, className)
    });
    const badgeProps = useSlotProps({
      elementType: BadgeSlot,
      externalSlotProps: badgeSlotProps,
      ownerState,
      className: clsx_default(classes2.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
    });
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(RootSlot, _extends({}, rootProps, {
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(BadgeSlot, _extends({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  true ? Badge.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The anchor of the badge.
     * @default {
     *   vertical: 'top',
     *   horizontal: 'right',
     * }
     */
    anchorOrigin: import_prop_types44.default.shape({
      horizontal: import_prop_types44.default.oneOf(["left", "right"]).isRequired,
      vertical: import_prop_types44.default.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The content rendered within the badge.
     */
    badgeContent: import_prop_types44.default.node,
    /**
     * The badge will be added relative to this node.
     */
    children: import_prop_types44.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types44.default.object,
    /**
     * @ignore
     */
    className: import_prop_types44.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types44.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types44.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types44.default.shape({
      Badge: import_prop_types44.default.elementType,
      Root: import_prop_types44.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types44.default.shape({
      badge: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
      root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
    }),
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: import_prop_types44.default.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: import_prop_types44.default.number,
    /**
     * Wrapped shape the badge should overlap.
     * @default 'rectangular'
     */
    overlap: import_prop_types44.default.oneOf(["circular", "rectangular"]),
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: import_prop_types44.default.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: import_prop_types44.default.shape({
      badge: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
      root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types44.default.shape({
      badge: import_prop_types44.default.elementType,
      root: import_prop_types44.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["dot", "standard"]), import_prop_types44.default.string])
  } : void 0;
  var Badge_default = Badge;

  // node_modules/@mui/material/BottomNavigation/BottomNavigation.js
  init_extends();
  var React73 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is3());
  var import_prop_types45 = __toESM(require_prop_types());
  var import_composeClasses25 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/BottomNavigation/bottomNavigationClasses.js
  var import_generateUtilityClasses26 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass32 = __toESM(require_generateUtilityClass2());
  function getBottomNavigationUtilityClass(slot) {
    return (0, import_generateUtilityClass32.default)("MuiBottomNavigation", slot);
  }
  var bottomNavigationClasses = (0, import_generateUtilityClasses26.default)("MuiBottomNavigation", ["root"]);
  var bottomNavigationClasses_default = bottomNavigationClasses;

  // node_modules/@mui/material/BottomNavigation/BottomNavigation.js
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var _excluded53 = ["children", "className", "component", "onChange", "showLabels", "value"];
  var useUtilityClasses23 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses25.default)(slots, getBottomNavigationUtilityClass, classes2);
  };
  var BottomNavigationRoot = styled_default2("div", {
    name: "MuiBottomNavigation",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => ({
    display: "flex",
    justifyContent: "center",
    height: 56,
    backgroundColor: (theme.vars || theme).palette.background.paper
  }));
  var BottomNavigation = /* @__PURE__ */ React73.forwardRef(function BottomNavigation2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBottomNavigation"
    });
    const {
      children,
      className,
      component = "div",
      onChange,
      showLabels = false,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
    const ownerState = _extends({}, props, {
      component,
      showLabels
    });
    const classes2 = useUtilityClasses23(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(BottomNavigationRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: React73.Children.map(children, (child, childIndex) => {
        if (!/* @__PURE__ */ React73.isValidElement(child)) {
          return null;
        }
        if (true) {
          if ((0, import_react_is3.isFragment)(child)) {
            console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        const childValue = child.props.value === void 0 ? childIndex : child.props.value;
        return /* @__PURE__ */ React73.cloneElement(child, {
          selected: childValue === value,
          showLabel: child.props.showLabel !== void 0 ? child.props.showLabel : showLabels,
          value: childValue,
          onChange
        });
      })
    }));
  });
  true ? BottomNavigation.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types45.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types45.default.object,
    /**
     * @ignore
     */
    className: import_prop_types45.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types45.default.elementType,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child.
     */
    onChange: import_prop_types45.default.func,
    /**
     * If `true`, all `BottomNavigationAction`s will show their labels.
     * By default, only the selected `BottomNavigationAction` will show its label.
     * @default false
     */
    showLabels: import_prop_types45.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object]),
    /**
     * The value of the currently selected `BottomNavigationAction`.
     */
    value: import_prop_types45.default.any
  } : void 0;
  var BottomNavigation_default = BottomNavigation;

  // node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.js
  init_extends();
  var React74 = __toESM(require_react());
  var import_prop_types46 = __toESM(require_prop_types());
  var import_composeClasses26 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/BottomNavigationAction/bottomNavigationActionClasses.js
  var import_generateUtilityClasses27 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass33 = __toESM(require_generateUtilityClass2());
  function getBottomNavigationActionUtilityClass(slot) {
    return (0, import_generateUtilityClass33.default)("MuiBottomNavigationAction", slot);
  }
  var bottomNavigationActionClasses = (0, import_generateUtilityClasses27.default)("MuiBottomNavigationAction", ["root", "iconOnly", "selected", "label"]);
  var bottomNavigationActionClasses_default = bottomNavigationActionClasses;

  // node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var _excluded54 = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"];
  var useUtilityClasses24 = (ownerState) => {
    const {
      classes: classes2,
      showLabel,
      selected
    } = ownerState;
    const slots = {
      root: ["root", !showLabel && !selected && "iconOnly", selected && "selected"],
      label: ["label", !showLabel && !selected && "iconOnly", selected && "selected"]
    };
    return (0, import_composeClasses26.default)(slots, getBottomNavigationActionUtilityClass, classes2);
  };
  var BottomNavigationActionRoot = styled_default2(ButtonBase_default, {
    name: "MuiBottomNavigationAction",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.showLabel && !ownerState.selected && styles8.iconOnly];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    transition: theme.transitions.create(["color", "padding-top"], {
      duration: theme.transitions.duration.short
    }),
    padding: "0px 12px",
    minWidth: 80,
    maxWidth: 168,
    color: (theme.vars || theme).palette.text.secondary,
    flexDirection: "column",
    flex: "1"
  }, !ownerState.showLabel && !ownerState.selected && {
    paddingTop: 14
  }, !ownerState.showLabel && !ownerState.selected && !ownerState.label && {
    paddingTop: 0
  }, {
    [`&.${bottomNavigationActionClasses_default.selected}`]: {
      color: (theme.vars || theme).palette.primary.main
    }
  }));
  var BottomNavigationActionLabel = styled_default2("span", {
    name: "MuiBottomNavigationAction",
    slot: "Label",
    overridesResolver: (props, styles8) => styles8.label
  })(({
    theme,
    ownerState
  }) => _extends({
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(12),
    opacity: 1,
    transition: "font-size 0.2s, opacity 0.2s",
    transitionDelay: "0.1s"
  }, !ownerState.showLabel && !ownerState.selected && {
    opacity: 0,
    transitionDelay: "0s"
  }, {
    [`&.${bottomNavigationActionClasses_default.selected}`]: {
      fontSize: theme.typography.pxToRem(14)
    }
  }));
  var BottomNavigationAction = /* @__PURE__ */ React74.forwardRef(function BottomNavigationAction2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBottomNavigationAction"
    });
    const {
      className,
      icon,
      label,
      onChange,
      onClick,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
    const ownerState = props;
    const classes2 = useUtilityClasses24(ownerState);
    const handleChange = (event) => {
      if (onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(BottomNavigationActionRoot, _extends({
      ref,
      className: clsx_default(classes2.root, className),
      focusRipple: true,
      onClick: handleChange,
      ownerState
    }, other, {
      children: [icon, /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(BottomNavigationActionLabel, {
        className: classes2.label,
        ownerState,
        children: label
      })]
    }));
  });
  true ? BottomNavigationAction.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types46.default.object,
    /**
     * @ignore
     */
    className: import_prop_types46.default.string,
    /**
     * The icon to display.
     */
    icon: import_prop_types46.default.node,
    /**
     * The label element.
     */
    label: import_prop_types46.default.node,
    /**
     * @ignore
     */
    onChange: import_prop_types46.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types46.default.func,
    /**
     * If `true`, the `BottomNavigationAction` will show its label.
     * By default, only the selected `BottomNavigationAction`
     * inside `BottomNavigation` will show its label.
     *
     * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
     */
    showLabel: import_prop_types46.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object]),
    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: import_prop_types46.default.any
  } : void 0;
  var BottomNavigationAction_default = BottomNavigationAction;

  // node_modules/@mui/material/Box/Box.js
  var import_prop_types47 = __toESM(require_prop_types());

  // node_modules/@mui/material/className/index.js
  var import_utils30 = __toESM(require_node2());

  // node_modules/@mui/material/Box/boxClasses.js
  var import_generateUtilityClasses28 = __toESM(require_generateUtilityClasses2());
  var boxClasses = (0, import_generateUtilityClasses28.default)("MuiBox", ["root"]);
  var boxClasses_default = boxClasses;

  // node_modules/@mui/material/Box/Box.js
  var defaultTheme6 = createTheme_default2();
  var Box = createBox({
    themeId: identifier_default,
    defaultTheme: defaultTheme6,
    defaultClassName: boxClasses_default.root,
    generateClassName: import_utils30.unstable_ClassNameGenerator.generate
  });
  true ? Box.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types47.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types47.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object])
  } : void 0;
  var Box_default = Box;

  // node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js
  init_extends();
  var React77 = __toESM(require_react());
  var import_react_is4 = __toESM(require_react_is3());
  var import_prop_types49 = __toESM(require_prop_types());
  var import_integerPropType3 = __toESM(require_integerPropType2());
  var import_composeClasses27 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Breadcrumbs/BreadcrumbCollapsed.js
  init_extends();
  var React76 = __toESM(require_react());
  var import_prop_types48 = __toESM(require_prop_types());
  var import_colorManipulator8 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/svg-icons/MoreHoriz.js
  var React75 = __toESM(require_react());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var MoreHoriz_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime68.jsx)("path", {
    d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreHoriz");

  // node_modules/@mui/material/Breadcrumbs/BreadcrumbCollapsed.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var _excluded55 = ["slots", "slotProps"];
  var BreadcrumbCollapsedButton = styled_default2(ButtonBase_default)(({
    theme
  }) => _extends({
    display: "flex",
    marginLeft: `calc(${theme.spacing(1)} * 0.5)`,
    marginRight: `calc(${theme.spacing(1)} * 0.5)`
  }, theme.palette.mode === "light" ? {
    backgroundColor: theme.palette.grey[100],
    color: theme.palette.grey[700]
  } : {
    backgroundColor: theme.palette.grey[700],
    color: theme.palette.grey[100]
  }, {
    borderRadius: 2,
    "&:hover, &:focus": _extends({}, theme.palette.mode === "light" ? {
      backgroundColor: theme.palette.grey[200]
    } : {
      backgroundColor: theme.palette.grey[600]
    }),
    "&:active": _extends({
      boxShadow: theme.shadows[0]
    }, theme.palette.mode === "light" ? {
      backgroundColor: (0, import_colorManipulator8.emphasize)(theme.palette.grey[200], 0.12)
    } : {
      backgroundColor: (0, import_colorManipulator8.emphasize)(theme.palette.grey[600], 0.12)
    })
  }));
  var BreadcrumbCollapsedIcon = styled_default2(MoreHoriz_default)({
    width: 24,
    height: 16
  });
  function BreadcrumbCollapsed(props) {
    const {
      slots = {},
      slotProps = {}
    } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded55);
    const ownerState = props;
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", {
      children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(BreadcrumbCollapsedButton, _extends({
        focusRipple: true
      }, otherProps, {
        ownerState,
        children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(BreadcrumbCollapsedIcon, _extends({
          as: slots.CollapsedIcon,
          ownerState
        }, slotProps.collapsedIcon))
      }))
    });
  }
  true ? BreadcrumbCollapsed.propTypes = {
    /**
     * The props used for the CollapsedIcon slot.
     * @default {}
     */
    slotProps: import_prop_types48.default.shape({
      collapsedIcon: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object])
    }),
    /**
     * The components used for each slot inside the BreadcumbCollapsed.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types48.default.shape({
      CollapsedIcon: import_prop_types48.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types48.default.object
  } : void 0;
  var BreadcrumbCollapsed_default = BreadcrumbCollapsed;

  // node_modules/@mui/material/Breadcrumbs/breadcrumbsClasses.js
  var import_generateUtilityClasses29 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass34 = __toESM(require_generateUtilityClass2());
  function getBreadcrumbsUtilityClass(slot) {
    return (0, import_generateUtilityClass34.default)("MuiBreadcrumbs", slot);
  }
  var breadcrumbsClasses = (0, import_generateUtilityClasses29.default)("MuiBreadcrumbs", ["root", "ol", "li", "separator"]);
  var breadcrumbsClasses_default = breadcrumbsClasses;

  // node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var _excluded56 = ["children", "className", "component", "slots", "slotProps", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"];
  var useUtilityClasses25 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      li: ["li"],
      ol: ["ol"],
      separator: ["separator"]
    };
    return (0, import_composeClasses27.default)(slots, getBreadcrumbsUtilityClass, classes2);
  };
  var BreadcrumbsRoot = styled_default2(Typography_default, {
    name: "MuiBreadcrumbs",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      return [{
        [`& .${breadcrumbsClasses_default.li}`]: styles8.li
      }, styles8.root];
    }
  })({});
  var BreadcrumbsOl = styled_default2("ol", {
    name: "MuiBreadcrumbs",
    slot: "Ol",
    overridesResolver: (props, styles8) => styles8.ol
  })({
    display: "flex",
    flexWrap: "wrap",
    alignItems: "center",
    padding: 0,
    margin: 0,
    listStyle: "none"
  });
  var BreadcrumbsSeparator = styled_default2("li", {
    name: "MuiBreadcrumbs",
    slot: "Separator",
    overridesResolver: (props, styles8) => styles8.separator
  })({
    display: "flex",
    userSelect: "none",
    marginLeft: 8,
    marginRight: 8
  });
  function insertSeparators(items, className, separator, ownerState) {
    return items.reduce((acc, current, index) => {
      if (index < items.length - 1) {
        acc = acc.concat(current, /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(BreadcrumbsSeparator, {
          "aria-hidden": true,
          className,
          ownerState,
          children: separator
        }, `separator-${index}`));
      } else {
        acc.push(current);
      }
      return acc;
    }, []);
  }
  var Breadcrumbs = /* @__PURE__ */ React77.forwardRef(function Breadcrumbs2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBreadcrumbs"
    });
    const {
      children,
      className,
      component = "nav",
      slots = {},
      slotProps = {},
      expandText = "Show path",
      itemsAfterCollapse = 1,
      itemsBeforeCollapse = 1,
      maxItems = 8,
      separator = "/"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
    const [expanded, setExpanded] = React77.useState(false);
    const ownerState = _extends({}, props, {
      component,
      expanded,
      expandText,
      itemsAfterCollapse,
      itemsBeforeCollapse,
      maxItems,
      separator
    });
    const classes2 = useUtilityClasses25(ownerState);
    const collapsedIconSlotProps = useSlotProps({
      elementType: slots.CollapsedIcon,
      externalSlotProps: slotProps.collapsedIcon,
      ownerState
    });
    const listRef = React77.useRef(null);
    const renderItemsBeforeAndAfter = (allItems2) => {
      const handleClickExpand = () => {
        setExpanded(true);
        const focusable = listRef.current.querySelector("a[href],button,[tabindex]");
        if (focusable) {
          focusable.focus();
        }
      };
      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems2.length) {
        if (true) {
          console.error(["MUI: You have provided an invalid combination of props to the Breadcrumbs.", `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join("\n"));
        }
        return allItems2;
      }
      return [...allItems2.slice(0, itemsBeforeCollapse), /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(BreadcrumbCollapsed_default, {
        "aria-label": expandText,
        slots: {
          CollapsedIcon: slots.CollapsedIcon
        },
        slotProps: {
          collapsedIcon: collapsedIconSlotProps
        },
        onClick: handleClickExpand
      }, "ellipsis"), ...allItems2.slice(allItems2.length - itemsAfterCollapse, allItems2.length)];
    };
    const allItems = React77.Children.toArray(children).filter((child) => {
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return /* @__PURE__ */ React77.isValidElement(child);
    }).map((child, index) => /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("li", {
      className: classes2.li,
      children: child
    }, `child-${index}`));
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(BreadcrumbsRoot, _extends({
      ref,
      component,
      color: "text.secondary",
      className: clsx_default(classes2.root, className),
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(BreadcrumbsOl, {
        className: classes2.ol,
        ref: listRef,
        ownerState,
        children: insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes2.separator, separator, ownerState)
      })
    }));
  });
  true ? Breadcrumbs.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types49.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types49.default.object,
    /**
     * @ignore
     */
    className: import_prop_types49.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types49.default.elementType,
    /**
     * Override the default label for the expand button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Show path'
     */
    expandText: import_prop_types49.default.string,
    /**
     * If max items is exceeded, the number of items to show after the ellipsis.
     * @default 1
     */
    itemsAfterCollapse: import_integerPropType3.default,
    /**
     * If max items is exceeded, the number of items to show before the ellipsis.
     * @default 1
     */
    itemsBeforeCollapse: import_integerPropType3.default,
    /**
     * Specifies the maximum number of breadcrumbs to display. When there are more
     * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
     * will be shown, with an ellipsis in between.
     * @default 8
     */
    maxItems: import_integerPropType3.default,
    /**
     * Custom separator node.
     * @default '/'
     */
    separator: import_prop_types49.default.node,
    /**
     * The props used for each slot inside the Breadcumb.
     * @default {}
     */
    slotProps: import_prop_types49.default.shape({
      collapsedIcon: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object])
    }),
    /**
     * The components used for each slot inside the Breadcumb.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types49.default.shape({
      CollapsedIcon: import_prop_types49.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object])
  } : void 0;
  var Breadcrumbs_default = Breadcrumbs;

  // node_modules/@mui/material/Button/Button.js
  init_extends();
  var React80 = __toESM(require_react());
  var import_prop_types50 = __toESM(require_prop_types());
  var import_resolveProps2 = __toESM(require_resolveProps2());
  var import_composeClasses28 = __toESM(require_composeClasses2());
  var import_colorManipulator9 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Button/buttonClasses.js
  var import_generateUtilityClasses30 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass35 = __toESM(require_generateUtilityClass2());
  function getButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass35.default)("MuiButton", slot);
  }
  var buttonClasses = (0, import_generateUtilityClasses30.default)("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  var buttonClasses_default = buttonClasses;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  var React78 = __toESM(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React78.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.js
  var React79 = __toESM(require_react());
  var ButtonGroupButtonContext = /* @__PURE__ */ React79.createContext(void 0);
  if (true) {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  var ButtonGroupButtonContext_default = ButtonGroupButtonContext;

  // node_modules/@mui/material/Button/Button.js
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var _excluded57 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  var useUtilityClasses26 = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color2)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["icon", "startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["icon", "endIcon", `iconSize${capitalize_default(size)}`]
    };
    const composedClasses = (0, import_composeClasses28.default)(slots, getButtonUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  var ButtonRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], styles8[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles8[`size${capitalize_default(ownerState.size)}`], styles8[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles8.colorInherit, ownerState.disableElevation && styles8.disableElevation, ownerState.fullWidth && styles8.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator9.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator9.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator9.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${(0, import_colorManipulator9.alpha)(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.disabled}`]: {
      boxShadow: "none"
    }
  });
  var ButtonStartIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.startIcon, styles8[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  var ButtonEndIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.endIcon, styles8[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  var Button = /* @__PURE__ */ React80.forwardRef(function Button2(inProps, ref) {
    const contextProps = React80.useContext(ButtonGroupContext_default);
    const buttonGroupButtonContextPositionClassName = React80.useContext(ButtonGroupButtonContext_default);
    const resolvedProps = (0, import_resolveProps2.default)(contextProps, inProps);
    const props = useThemeProps2({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes2 = useUtilityClasses26(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ButtonStartIcon, {
      className: classes2.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ButtonEndIcon, {
      className: classes2.endIcon,
      ownerState,
      children: endIconProp
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(ButtonRoot, _extends({
      ownerState,
      className: clsx_default(contextProps.className, classes2.root, className, positionClassName),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes: classes2,
      children: [startIcon, children, endIcon]
    }));
  });
  true ? Button.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types50.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types50.default.object,
    /**
     * @ignore
     */
    className: import_prop_types50.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types50.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types50.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types50.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types50.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types50.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types50.default.bool,
    /**
     * Element placed after the children.
     */
    endIcon: import_prop_types50.default.node,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types50.default.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types50.default.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types50.default.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["small", "medium", "large"]), import_prop_types50.default.string]),
    /**
     * Element placed before the children.
     */
    startIcon: import_prop_types50.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    /**
     * @ignore
     */
    type: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["button", "reset", "submit"]), import_prop_types50.default.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["contained", "outlined", "text"]), import_prop_types50.default.string])
  } : void 0;
  var Button_default = Button;

  // node_modules/@mui/material/ButtonGroup/ButtonGroup.js
  init_extends();
  var React81 = __toESM(require_react());
  var import_prop_types51 = __toESM(require_prop_types());
  var import_composeClasses29 = __toESM(require_composeClasses2());
  var import_colorManipulator10 = __toESM(require_colorManipulator());
  var import_getValidReactChildren = __toESM(require_getValidReactChildren2());

  // node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js
  var import_generateUtilityClasses31 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass36 = __toESM(require_generateUtilityClass2());
  function getButtonGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass36.default)("MuiButtonGroup", slot);
  }
  var buttonGroupClasses = (0, import_generateUtilityClasses31.default)("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "firstButton", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary", "lastButton", "middleButton"]);
  var buttonGroupClasses_default = buttonGroupClasses;

  // node_modules/@mui/material/ButtonGroup/ButtonGroup.js
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var _excluded58 = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];
  var overridesResolver = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${buttonGroupClasses_default.grouped}`]: styles8.grouped
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles8[`grouped${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles8[`grouped${capitalize_default(ownerState.variant)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles8[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles8[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.color)}`]
    }, {
      [`& .${buttonGroupClasses_default.firstButton}`]: styles8.firstButton
    }, {
      [`& .${buttonGroupClasses_default.lastButton}`]: styles8.lastButton
    }, {
      [`& .${buttonGroupClasses_default.middleButton}`]: styles8.middleButton
    }, styles8.root, styles8[ownerState.variant], ownerState.disableElevation === true && styles8.disableElevation, ownerState.fullWidth && styles8.fullWidth, ownerState.orientation === "vertical" && styles8.vertical];
  };
  var useUtilityClasses27 = (ownerState) => {
    const {
      classes: classes2,
      color: color2,
      disabled,
      disableElevation,
      fullWidth,
      orientation,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, orientation === "vertical" && "vertical", fullWidth && "fullWidth", disableElevation && "disableElevation"],
      grouped: ["grouped", `grouped${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}`, `grouped${capitalize_default(variant)}${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}${capitalize_default(color2)}`, disabled && "disabled"],
      firstButton: ["firstButton"],
      lastButton: ["lastButton"],
      middleButton: ["middleButton"]
    };
    return (0, import_composeClasses29.default)(slots, getButtonGroupUtilityClass, classes2);
  };
  var ButtonGroupRoot = styled_default2("div", {
    name: "MuiButtonGroup",
    slot: "Root",
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.variant === "contained" && {
    boxShadow: (theme.vars || theme).shadows[2]
  }, ownerState.disableElevation && {
    boxShadow: "none"
  }, ownerState.fullWidth && {
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: _extends({
      minWidth: 40,
      "&:hover": _extends({}, ownerState.variant === "contained" && {
        boxShadow: "none"
      })
    }, ownerState.variant === "contained" && {
      boxShadow: "none"
    }),
    [`& .${buttonGroupClasses_default.firstButton},& .${buttonGroupClasses_default.middleButton}`]: _extends({}, ownerState.orientation === "horizontal" && {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    }, ownerState.orientation === "vertical" && {
      borderBottomRightRadius: 0,
      borderBottomLeftRadius: 0
    }, ownerState.variant === "text" && ownerState.orientation === "horizontal" && {
      borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "text" && ownerState.orientation === "vertical" && {
      borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_colorManipulator10.alpha)(theme.palette[ownerState.color].main, 0.5)
    }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
      borderRightColor: "transparent"
    }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
      borderBottomColor: "transparent"
    }, ownerState.variant === "contained" && ownerState.orientation === "horizontal" && {
      borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "contained" && ownerState.orientation === "vertical" && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      borderColor: (theme.vars || theme).palette[ownerState.color].dark
    }, {
      "&:hover": _extends({}, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
        borderRightColor: "currentColor"
      }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
        borderBottomColor: "currentColor"
      })
    }),
    [`& .${buttonGroupClasses_default.lastButton},& .${buttonGroupClasses_default.middleButton}`]: _extends({}, ownerState.orientation === "horizontal" && {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    }, ownerState.orientation === "vertical" && {
      borderTopRightRadius: 0,
      borderTopLeftRadius: 0
    }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
      marginLeft: -1
    }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
      marginTop: -1
    })
  }));
  var ButtonGroup = /* @__PURE__ */ React81.forwardRef(function ButtonGroup2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiButtonGroup"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      disableRipple = false,
      fullWidth = false,
      orientation = "horizontal",
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      orientation,
      size,
      variant
    });
    const classes2 = useUtilityClasses27(ownerState);
    const context = React81.useMemo(() => ({
      className: classes2.grouped,
      color: color2,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      size,
      variant
    }), [color2, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes2.grouped]);
    const validChildren = (0, import_getValidReactChildren.default)(children);
    const childrenCount = validChildren.length;
    const getButtonPositionClassName = (index) => {
      const isFirstButton = index === 0;
      const isLastButton = index === childrenCount - 1;
      if (isFirstButton && isLastButton) {
        return "";
      }
      if (isFirstButton) {
        return classes2.firstButton;
      }
      if (isLastButton) {
        return classes2.lastButton;
      }
      return classes2.middleButton;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ButtonGroupRoot, _extends({
      as: component,
      role: "group",
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ButtonGroupContext_default.Provider, {
        value: context,
        children: validChildren.map((child, index) => {
          return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ButtonGroupButtonContext_default.Provider, {
            value: getButtonPositionClassName(index),
            children: child
          }, index);
        })
      })
    }));
  });
  true ? ButtonGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types51.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types51.default.object,
    /**
     * @ignore
     */
    className: import_prop_types51.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types51.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types51.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types51.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types51.default.bool,
    /**
     * If `true`, the button keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types51.default.bool,
    /**
     * If `true`, the button ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types51.default.bool,
    /**
     * If `true`, the buttons will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types51.default.bool,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types51.default.oneOf(["horizontal", "vertical"]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["small", "medium", "large"]), import_prop_types51.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["contained", "outlined", "text"]), import_prop_types51.default.string])
  } : void 0;
  var ButtonGroup_default = ButtonGroup;

  // node_modules/@mui/material/Card/Card.js
  init_extends();
  var React82 = __toESM(require_react());
  var import_prop_types52 = __toESM(require_prop_types());
  var import_chainPropTypes6 = __toESM(require_chainPropTypes2());
  var import_composeClasses30 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Card/cardClasses.js
  var import_generateUtilityClasses32 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass37 = __toESM(require_generateUtilityClass2());
  function getCardUtilityClass(slot) {
    return (0, import_generateUtilityClass37.default)("MuiCard", slot);
  }
  var cardClasses = (0, import_generateUtilityClasses32.default)("MuiCard", ["root"]);
  var cardClasses_default = cardClasses;

  // node_modules/@mui/material/Card/Card.js
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var _excluded59 = ["className", "raised"];
  var useUtilityClasses28 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses30.default)(slots, getCardUtilityClass, classes2);
  };
  var CardRoot = styled_default2(Paper_default, {
    name: "MuiCard",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(() => {
    return {
      overflow: "hidden"
    };
  });
  var Card = /* @__PURE__ */ React82.forwardRef(function Card2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCard"
    });
    const {
      className,
      raised = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
    const ownerState = _extends({}, props, {
      raised
    });
    const classes2 = useUtilityClasses28(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(CardRoot, _extends({
      className: clsx_default(classes2.root, className),
      elevation: raised ? 8 : void 0,
      ref,
      ownerState
    }, other));
  });
  true ? Card.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types52.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types52.default.object,
    /**
     * @ignore
     */
    className: import_prop_types52.default.string,
    /**
     * If `true`, the card will use raised styling.
     * @default false
     */
    raised: (0, import_chainPropTypes6.default)(import_prop_types52.default.bool, (props) => {
      if (props.raised && props.variant === "outlined") {
        return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
      }
      return null;
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object])
  } : void 0;
  var Card_default = Card;

  // node_modules/@mui/material/CardActionArea/CardActionArea.js
  init_extends();
  var React83 = __toESM(require_react());
  var import_prop_types53 = __toESM(require_prop_types());
  var import_composeClasses31 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js
  var import_generateUtilityClasses33 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass38 = __toESM(require_generateUtilityClass2());
  function getCardActionAreaUtilityClass(slot) {
    return (0, import_generateUtilityClass38.default)("MuiCardActionArea", slot);
  }
  var cardActionAreaClasses = (0, import_generateUtilityClasses33.default)("MuiCardActionArea", ["root", "focusVisible", "focusHighlight"]);
  var cardActionAreaClasses_default = cardActionAreaClasses;

  // node_modules/@mui/material/CardActionArea/CardActionArea.js
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var _excluded60 = ["children", "className", "focusVisibleClassName"];
  var useUtilityClasses29 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      focusHighlight: ["focusHighlight"]
    };
    return (0, import_composeClasses31.default)(slots, getCardActionAreaUtilityClass, classes2);
  };
  var CardActionAreaRoot = styled_default2(ButtonBase_default, {
    name: "MuiCardActionArea",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => ({
    display: "block",
    textAlign: "inherit",
    borderRadius: "inherit",
    // for Safari to work https://github.com/mui/material-ui/issues/36285.
    width: "100%",
    [`&:hover .${cardActionAreaClasses_default.focusHighlight}`]: {
      opacity: (theme.vars || theme).palette.action.hoverOpacity,
      "@media (hover: none)": {
        opacity: 0
      }
    },
    [`&.${cardActionAreaClasses_default.focusVisible} .${cardActionAreaClasses_default.focusHighlight}`]: {
      opacity: (theme.vars || theme).palette.action.focusOpacity
    }
  }));
  var CardActionAreaFocusHighlight = styled_default2("span", {
    name: "MuiCardActionArea",
    slot: "FocusHighlight",
    overridesResolver: (props, styles8) => styles8.focusHighlight
  })(({
    theme
  }) => ({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit",
    opacity: 0,
    backgroundColor: "currentcolor",
    transition: theme.transitions.create("opacity", {
      duration: theme.transitions.duration.short
    })
  }));
  var CardActionArea = /* @__PURE__ */ React83.forwardRef(function CardActionArea2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCardActionArea"
    });
    const {
      children,
      className,
      focusVisibleClassName
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
    const ownerState = props;
    const classes2 = useUtilityClasses29(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(CardActionAreaRoot, _extends({
      className: clsx_default(classes2.root, className),
      focusVisibleClassName: clsx_default(focusVisibleClassName, classes2.focusVisible),
      ref,
      ownerState
    }, other, {
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(CardActionAreaFocusHighlight, {
        className: classes2.focusHighlight,
        ownerState
      })]
    }));
  });
  true ? CardActionArea.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types53.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types53.default.object,
    /**
     * @ignore
     */
    className: import_prop_types53.default.string,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types53.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object])
  } : void 0;
  var CardActionArea_default = CardActionArea;

  // node_modules/@mui/material/CardActions/CardActions.js
  init_extends();
  var React84 = __toESM(require_react());
  var import_prop_types54 = __toESM(require_prop_types());
  var import_composeClasses32 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/CardActions/cardActionsClasses.js
  var import_generateUtilityClasses34 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass39 = __toESM(require_generateUtilityClass2());
  function getCardActionsUtilityClass(slot) {
    return (0, import_generateUtilityClass39.default)("MuiCardActions", slot);
  }
  var cardActionsClasses = (0, import_generateUtilityClasses34.default)("MuiCardActions", ["root", "spacing"]);
  var cardActionsClasses_default = cardActionsClasses;

  // node_modules/@mui/material/CardActions/CardActions.js
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var _excluded61 = ["disableSpacing", "className"];
  var useUtilityClasses30 = (ownerState) => {
    const {
      classes: classes2,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return (0, import_composeClasses32.default)(slots, getCardActionsUtilityClass, classes2);
  };
  var CardActionsRoot = styled_default2("div", {
    name: "MuiCardActions",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.disableSpacing && styles8.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8
  }, !ownerState.disableSpacing && {
    "& > :not(style) ~ :not(style)": {
      marginLeft: 8
    }
  }));
  var CardActions = /* @__PURE__ */ React84.forwardRef(function CardActions2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCardActions"
    });
    const {
      disableSpacing = false,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes2 = useUtilityClasses30(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(CardActionsRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? CardActions.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types54.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types54.default.object,
    /**
     * @ignore
     */
    className: import_prop_types54.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types54.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object])
  } : void 0;
  var CardActions_default = CardActions;

  // node_modules/@mui/material/CardContent/CardContent.js
  init_extends();
  var React85 = __toESM(require_react());
  var import_prop_types55 = __toESM(require_prop_types());
  var import_composeClasses33 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/CardContent/cardContentClasses.js
  var import_generateUtilityClasses35 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass40 = __toESM(require_generateUtilityClass2());
  function getCardContentUtilityClass(slot) {
    return (0, import_generateUtilityClass40.default)("MuiCardContent", slot);
  }
  var cardContentClasses = (0, import_generateUtilityClasses35.default)("MuiCardContent", ["root"]);
  var cardContentClasses_default = cardContentClasses;

  // node_modules/@mui/material/CardContent/CardContent.js
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  var _excluded62 = ["className", "component"];
  var useUtilityClasses31 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses33.default)(slots, getCardContentUtilityClass, classes2);
  };
  var CardContentRoot = styled_default2("div", {
    name: "MuiCardContent",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(() => {
    return {
      padding: 16,
      "&:last-child": {
        paddingBottom: 24
      }
    };
  });
  var CardContent = /* @__PURE__ */ React85.forwardRef(function CardContent2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCardContent"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
    const ownerState = _extends({}, props, {
      component
    });
    const classes2 = useUtilityClasses31(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(CardContentRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? CardContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types55.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types55.default.object,
    /**
     * @ignore
     */
    className: import_prop_types55.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types55.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object])
  } : void 0;
  var CardContent_default = CardContent;

  // node_modules/@mui/material/CardHeader/CardHeader.js
  init_extends();
  var React86 = __toESM(require_react());
  var import_prop_types56 = __toESM(require_prop_types());
  var import_composeClasses34 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/CardHeader/cardHeaderClasses.js
  var import_generateUtilityClasses36 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass41 = __toESM(require_generateUtilityClass2());
  function getCardHeaderUtilityClass(slot) {
    return (0, import_generateUtilityClass41.default)("MuiCardHeader", slot);
  }
  var cardHeaderClasses = (0, import_generateUtilityClasses36.default)("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]);
  var cardHeaderClasses_default = cardHeaderClasses;

  // node_modules/@mui/material/CardHeader/CardHeader.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  var _excluded63 = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];
  var useUtilityClasses32 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      avatar: ["avatar"],
      action: ["action"],
      content: ["content"],
      title: ["title"],
      subheader: ["subheader"]
    };
    return (0, import_composeClasses34.default)(slots, getCardHeaderUtilityClass, classes2);
  };
  var CardHeaderRoot = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Root",
    overridesResolver: (props, styles8) => _extends({
      [`& .${cardHeaderClasses_default.title}`]: styles8.title,
      [`& .${cardHeaderClasses_default.subheader}`]: styles8.subheader
    }, styles8.root)
  })({
    display: "flex",
    alignItems: "center",
    padding: 16
  });
  var CardHeaderAvatar = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Avatar",
    overridesResolver: (props, styles8) => styles8.avatar
  })({
    display: "flex",
    flex: "0 0 auto",
    marginRight: 16
  });
  var CardHeaderAction = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Action",
    overridesResolver: (props, styles8) => styles8.action
  })({
    flex: "0 0 auto",
    alignSelf: "flex-start",
    marginTop: -4,
    marginRight: -8,
    marginBottom: -4
  });
  var CardHeaderContent = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Content",
    overridesResolver: (props, styles8) => styles8.content
  })({
    flex: "1 1 auto"
  });
  var CardHeader = /* @__PURE__ */ React86.forwardRef(function CardHeader2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCardHeader"
    });
    const {
      action,
      avatar,
      className,
      component = "div",
      disableTypography = false,
      subheader: subheaderProp,
      subheaderTypographyProps,
      title: titleProp,
      titleTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
    const ownerState = _extends({}, props, {
      component,
      disableTypography
    });
    const classes2 = useUtilityClasses32(ownerState);
    let title = titleProp;
    if (title != null && title.type !== Typography_default && !disableTypography) {
      title = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(Typography_default, _extends({
        variant: avatar ? "body2" : "h5",
        className: classes2.title,
        component: "span",
        display: "block"
      }, titleTypographyProps, {
        children: title
      }));
    }
    let subheader = subheaderProp;
    if (subheader != null && subheader.type !== Typography_default && !disableTypography) {
      subheader = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(Typography_default, _extends({
        variant: avatar ? "body2" : "body1",
        className: classes2.subheader,
        color: "text.secondary",
        component: "span",
        display: "block"
      }, subheaderTypographyProps, {
        children: subheader
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(CardHeaderRoot, _extends({
      className: clsx_default(classes2.root, className),
      as: component,
      ref,
      ownerState
    }, other, {
      children: [avatar && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(CardHeaderAvatar, {
        className: classes2.avatar,
        ownerState,
        children: avatar
      }), /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(CardHeaderContent, {
        className: classes2.content,
        ownerState,
        children: [title, subheader]
      }), action && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(CardHeaderAction, {
        className: classes2.action,
        ownerState,
        children: action
      })]
    }));
  });
  true ? CardHeader.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display in the card header.
     */
    action: import_prop_types56.default.node,
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types56.default.node,
    /**
     * @ignore
     */
    children: import_prop_types56.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types56.default.object,
    /**
     * @ignore
     */
    className: import_prop_types56.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types56.default.elementType,
    /**
     * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `title` text, and optional `subheader` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types56.default.bool,
    /**
     * The content of the component.
     */
    subheader: import_prop_types56.default.node,
    /**
     * These props will be forwarded to the subheader
     * (as long as disableTypography is not `true`).
     */
    subheaderTypographyProps: import_prop_types56.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object]),
    /**
     * The content of the component.
     */
    title: import_prop_types56.default.node,
    /**
     * These props will be forwarded to the title
     * (as long as disableTypography is not `true`).
     */
    titleTypographyProps: import_prop_types56.default.object
  } : void 0;
  var CardHeader_default = CardHeader;

  // node_modules/@mui/material/CardMedia/CardMedia.js
  init_extends();
  var React87 = __toESM(require_react());
  var import_prop_types57 = __toESM(require_prop_types());
  var import_chainPropTypes7 = __toESM(require_chainPropTypes2());
  var import_composeClasses35 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/CardMedia/cardMediaClasses.js
  var import_generateUtilityClasses37 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass42 = __toESM(require_generateUtilityClass2());
  function getCardMediaUtilityClass(slot) {
    return (0, import_generateUtilityClass42.default)("MuiCardMedia", slot);
  }
  var cardMediaClasses = (0, import_generateUtilityClasses37.default)("MuiCardMedia", ["root", "media", "img"]);
  var cardMediaClasses_default = cardMediaClasses;

  // node_modules/@mui/material/CardMedia/CardMedia.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var _excluded64 = ["children", "className", "component", "image", "src", "style"];
  var useUtilityClasses33 = (ownerState) => {
    const {
      classes: classes2,
      isMediaComponent,
      isImageComponent
    } = ownerState;
    const slots = {
      root: ["root", isMediaComponent && "media", isImageComponent && "img"]
    };
    return (0, import_composeClasses35.default)(slots, getCardMediaUtilityClass, classes2);
  };
  var CardMediaRoot = styled_default2("div", {
    name: "MuiCardMedia",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      const {
        isMediaComponent,
        isImageComponent
      } = ownerState;
      return [styles8.root, isMediaComponent && styles8.media, isImageComponent && styles8.img];
    }
  })(({
    ownerState
  }) => _extends({
    display: "block",
    backgroundSize: "cover",
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center"
  }, ownerState.isMediaComponent && {
    width: "100%"
  }, ownerState.isImageComponent && {
    // ⚠️ object-fit is not supported by IE11.
    objectFit: "cover"
  }));
  var MEDIA_COMPONENTS = ["video", "audio", "picture", "iframe", "img"];
  var IMAGE_COMPONENTS = ["picture", "img"];
  var CardMedia = /* @__PURE__ */ React87.forwardRef(function CardMedia2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCardMedia"
    });
    const {
      children,
      className,
      component = "div",
      image,
      src,
      style: style4
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
    const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;
    const composedStyle = !isMediaComponent && image ? _extends({
      backgroundImage: `url("${image}")`
    }, style4) : style4;
    const ownerState = _extends({}, props, {
      component,
      isMediaComponent,
      isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1
    });
    const classes2 = useUtilityClasses33(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(CardMediaRoot, _extends({
      className: clsx_default(classes2.root, className),
      as: component,
      role: !isMediaComponent && image ? "img" : void 0,
      ref,
      style: composedStyle,
      ownerState,
      src: isMediaComponent ? image || src : void 0
    }, other, {
      children
    }));
  });
  true ? CardMedia.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: (0, import_chainPropTypes7.default)(import_prop_types57.default.node, (props) => {
      if (!props.children && !props.image && !props.src && !props.component) {
        return new Error("MUI: Either `children`, `image`, `src` or `component` prop must be specified.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types57.default.object,
    /**
     * @ignore
     */
    className: import_prop_types57.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types57.default.elementType,
    /**
     * Image to be displayed as a background image.
     * Either `image` or `src` prop must be specified.
     * Note that caller must specify height otherwise the image will not be visible.
     */
    image: import_prop_types57.default.string,
    /**
     * An alias for `image` property.
     * Available only with media components.
     * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
     */
    src: import_prop_types57.default.string,
    /**
     * @ignore
     */
    style: import_prop_types57.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object])
  } : void 0;
  var CardMedia_default = CardMedia;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  init_extends();
  var React92 = __toESM(require_react());
  var import_prop_types59 = __toESM(require_prop_types());
  var import_refType5 = __toESM(require_refType2());
  var import_composeClasses37 = __toESM(require_composeClasses2());
  var import_colorManipulator11 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/SwitchBase.js
  init_extends();
  var React88 = __toESM(require_react());
  var import_prop_types58 = __toESM(require_prop_types());
  var import_refType4 = __toESM(require_refType2());
  var import_composeClasses36 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/internal/switchBaseClasses.js
  var import_generateUtilityClasses38 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass43 = __toESM(require_generateUtilityClass2());
  function getSwitchBaseUtilityClass(slot) {
    return (0, import_generateUtilityClass43.default)("PrivateSwitchBase", slot);
  }
  var switchBaseClasses = (0, import_generateUtilityClasses38.default)("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // node_modules/@mui/material/internal/SwitchBase.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var _excluded65 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  var useUtilityClasses34 = (ownerState) => {
    const {
      classes: classes2,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return (0, import_composeClasses36.default)(slots, getSwitchBaseUtilityClass, classes2);
  };
  var SwitchBaseRoot = styled_default2(ButtonBase_default)(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  var SwitchBaseInput = styled_default2("input", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  var SwitchBase = /* @__PURE__ */ React88.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes2 = useUtilityClasses34(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx_default(classes2.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime82.jsx)(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes2.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  true ? SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types58.default.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types58.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types58.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types58.default.object,
    /**
     * @ignore
     */
    className: import_prop_types58.default.string,
    /**
     * @ignore
     */
    defaultChecked: import_prop_types58.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types58.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types58.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types58.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types58.default.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types58.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types58.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType4.default,
    /*
     * @ignore
     */
    name: import_prop_types58.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types58.default.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types58.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types58.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types58.default.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: import_prop_types58.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types58.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types58.default.oneOfType([import_prop_types58.default.number, import_prop_types58.default.string]),
    /**
     * The input component prop `type`.
     */
    type: import_prop_types58.default.string.isRequired,
    /**
     * The value of the component.
     */
    value: import_prop_types58.default.any
  } : void 0;
  var SwitchBase_default = SwitchBase;

  // node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  var React89 = __toESM(require_react());
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var CheckBoxOutlineBlank_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime84.jsx)("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@mui/material/internal/svg-icons/CheckBox.js
  var React90 = __toESM(require_react());
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var CheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime85.jsx)("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  var React91 = __toESM(require_react());
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var IndeterminateCheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime86.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@mui/material/Checkbox/checkboxClasses.js
  var import_generateUtilityClasses39 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass44 = __toESM(require_generateUtilityClass2());
  function getCheckboxUtilityClass(slot) {
    return (0, import_generateUtilityClass44.default)("MuiCheckbox", slot);
  }
  var checkboxClasses = (0, import_generateUtilityClasses39.default)("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
  var checkboxClasses_default = checkboxClasses;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var _excluded66 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  var useUtilityClasses35 = (ownerState) => {
    const {
      classes: classes2,
      indeterminate,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color2)}`, `size${capitalize_default(size)}`]
    };
    const composedClasses = (0, import_composeClasses37.default)(slots, getCheckboxUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var CheckboxRoot = styled_default2(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.indeterminate && styles8.indeterminate, styles8[`size${capitalize_default(ownerState.size)}`], ownerState.color !== "default" && styles8[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator11.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  var defaultCheckedIcon = /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(CheckBox_default, {});
  var defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(CheckBoxOutlineBlank_default, {});
  var defaultIndeterminateIcon = /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(IndeterminateCheckBox_default, {});
  var Checkbox = /* @__PURE__ */ React92.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color: color2,
      indeterminate,
      size
    });
    const classes2 = useUtilityClasses35(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ React92.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /* @__PURE__ */ React92.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref,
      className: clsx_default(classes2.root, className)
    }, other, {
      classes: classes2
    }));
  });
  true ? Checkbox.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types59.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: import_prop_types59.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types59.default.object,
    /**
     * @ignore
     */
    className: import_prop_types59.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types59.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types59.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types59.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types59.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: import_prop_types59.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types59.default.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: import_prop_types59.default.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: import_prop_types59.default.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types59.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType5.default,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types59.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types59.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["medium", "small"]), import_prop_types59.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types59.default.any
  } : void 0;
  var Checkbox_default = Checkbox;

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  init_extends();
  var React93 = __toESM(require_react());
  var import_prop_types60 = __toESM(require_prop_types());
  var import_chainPropTypes8 = __toESM(require_chainPropTypes2());
  var import_composeClasses38 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/CircularProgress/circularProgressClasses.js
  var import_generateUtilityClasses40 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass45 = __toESM(require_generateUtilityClass2());
  function getCircularProgressUtilityClass(slot) {
    return (0, import_generateUtilityClass45.default)("MuiCircularProgress", slot);
  }
  var circularProgressClasses = (0, import_generateUtilityClasses40.default)("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
  var circularProgressClasses_default = circularProgressClasses;

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var _excluded67 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  var _2 = (t2) => t2;
  var _t5;
  var _t22;
  var _t32;
  var _t42;
  var SIZE = 44;
  var circularRotateKeyframe = (0, import_styled_engine7.keyframes)(_t5 || (_t5 = _2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  var circularDashKeyframe = (0, import_styled_engine7.keyframes)(_t22 || (_t22 = _2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  var useUtilityClasses36 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      color: color2,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color2)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return (0, import_composeClasses38.default)(slots, getCircularProgressUtilityClass, classes2);
  };
  var CircularProgressRoot = styled_default2("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], styles8[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && (0, import_styled_engine7.css)(_t32 || (_t32 = _2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  var CircularProgressSVG = styled_default2("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles8) => styles8.svg
  })({
    display: "block"
    // Keeps the progress centered
  });
  var CircularProgressCircle = styled_default2("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.circle, styles8[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles8.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    // Some default value that looks fine waiting for the animation to kicks in.
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
    // Add the unit to fix a Edge 16 and below bug.
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && (0, import_styled_engine7.css)(_t42 || (_t42 = _2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  var CircularProgress = /* @__PURE__ */ React93.forwardRef(function CircularProgress2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color: color2 = "primary",
      disableShrink = false,
      size = 40,
      style: style4,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
    const ownerState = _extends({}, props, {
      color: color2,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });
    const classes2 = useUtilityClasses36(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(CircularProgressRoot, _extends({
      className: clsx_default(classes2.root, className),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style4),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(CircularProgressSVG, {
        className: classes2.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(CircularProgressCircle, {
          className: classes2.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  true ? CircularProgress.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types60.default.object,
    /**
     * @ignore
     */
    className: import_prop_types60.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types60.default.oneOfType([import_prop_types60.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types60.default.string]),
    /**
     * If `true`, the shrink animation is disabled.
     * This only works if variant is `indeterminate`.
     * @default false
     */
    disableShrink: (0, import_chainPropTypes8.default)(import_prop_types60.default.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    /**
     * The size of the component.
     * If using a number, the pixel unit is assumed.
     * If using a string, you need to provide the CSS unit, for example '3rem'.
     * @default 40
     */
    size: import_prop_types60.default.oneOfType([import_prop_types60.default.number, import_prop_types60.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types60.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types60.default.oneOfType([import_prop_types60.default.arrayOf(import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object, import_prop_types60.default.bool])), import_prop_types60.default.func, import_prop_types60.default.object]),
    /**
     * The thickness of the circle.
     * @default 3.6
     */
    thickness: import_prop_types60.default.number,
    /**
     * The value of the progress indicator for the determinate variant.
     * Value between 0 and 100.
     * @default 0
     */
    value: import_prop_types60.default.number,
    /**
     * The variant to use.
     * Use indeterminate when there is no progress value.
     * @default 'indeterminate'
     */
    variant: import_prop_types60.default.oneOf(["determinate", "indeterminate"])
  } : void 0;
  var CircularProgress_default = CircularProgress;

  // node_modules/@mui/material/Container/Container.js
  var import_prop_types61 = __toESM(require_prop_types());
  var Container = createContainer({
    createStyledComponent: styled_default2("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles8) => {
        const {
          ownerState
        } = props;
        return [styles8.root, styles8[`maxWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fixed && styles8.fixed, ownerState.disableGutters && styles8.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useThemeProps2({
      props: inProps,
      name: "MuiContainer"
    })
  });
  true ? Container.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types61.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types61.default.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types61.default.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types61.default.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: import_prop_types61.default.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: import_prop_types61.default.oneOfType([import_prop_types61.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types61.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object])
  } : void 0;
  var Container_default = Container;

  // node_modules/@mui/material/Container/containerClasses.js
  var import_generateUtilityClasses41 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass46 = __toESM(require_generateUtilityClass2());
  function getContainerUtilityClass(slot) {
    return (0, import_generateUtilityClass46.default)("MuiContainer", slot);
  }
  var containerClasses = (0, import_generateUtilityClasses41.default)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  var containerClasses_default = containerClasses;

  // node_modules/@mui/material/CssBaseline/CssBaseline.js
  init_extends();
  var React94 = __toESM(require_react());
  var import_prop_types62 = __toESM(require_prop_types());
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var html = (theme, enableColorScheme) => _extends({
    WebkitFontSmoothing: "antialiased",
    // Antialiasing.
    MozOsxFontSmoothing: "grayscale",
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%"
  }, enableColorScheme && !theme.vars && {
    colorScheme: theme.palette.mode
  });
  var body = (theme) => _extends({
    color: (theme.vars || theme).palette.text.primary
  }, theme.typography.body1, {
    backgroundColor: (theme.vars || theme).palette.background.default,
    "@media print": {
      // Save printer ink.
      backgroundColor: (theme.vars || theme).palette.common.white
    }
  });
  var styles3 = (theme, enableColorScheme = false) => {
    var _theme$components;
    const colorSchemeStyles = {};
    if (enableColorScheme && theme.colorSchemes) {
      Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
        var _scheme$palette;
        colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\s*&/, "")] = {
          colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
        };
      });
    }
    let defaultStyles = _extends({
      html: html(theme, enableColorScheme),
      "*, *::before, *::after": {
        boxSizing: "inherit"
      },
      "strong, b": {
        fontWeight: theme.typography.fontWeightBold
      },
      body: _extends({
        margin: 0
      }, body(theme), {
        // Add support for document.body.requestFullScreen().
        // Other elements, if background transparent, are not supported.
        "&::backdrop": {
          backgroundColor: (theme.vars || theme).palette.background.default
        }
      })
    }, colorSchemeStyles);
    const themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;
    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }
    return defaultStyles;
  };
  function CssBaseline(inProps) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCssBaseline"
    });
    const {
      children,
      enableColorScheme = false
    } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(React94.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime89.jsx)(GlobalStyles_default2, {
        styles: (theme) => styles3(theme, enableColorScheme)
      }), children]
    });
  }
  true ? CssBaseline.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * You can wrap a node.
     */
    children: import_prop_types62.default.node,
    /**
     * Enable `color-scheme` CSS property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     * @default false
     */
    enableColorScheme: import_prop_types62.default.bool
  } : void 0;
  var CssBaseline_default = CssBaseline;

  // node_modules/@mui/material/darkScrollbar/index.js
  var scrollBar = {
    track: "#2b2b2b",
    thumb: "#6b6b6b",
    active: "#959595"
  };
  function darkScrollbar(options = scrollBar) {
    return {
      scrollbarColor: `${options.thumb} ${options.track}`,
      "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
        backgroundColor: options.track
      },
      "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
        borderRadius: 8,
        backgroundColor: options.thumb,
        minHeight: 24,
        border: `3px solid ${options.track}`
      },
      "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
        backgroundColor: options.active
      },
      "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
        backgroundColor: options.active
      },
      "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
        backgroundColor: options.active
      },
      "&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner": {
        backgroundColor: options.track
      }
    };
  }

  // node_modules/@mui/material/Dialog/Dialog.js
  init_extends();
  var React97 = __toESM(require_react());
  var import_prop_types64 = __toESM(require_prop_types());
  var import_composeClasses40 = __toESM(require_composeClasses2());
  var import_useId = __toESM(require_useId2());

  // node_modules/@mui/material/Modal/Modal.js
  init_extends();
  var React95 = __toESM(require_react());
  var import_prop_types63 = __toESM(require_prop_types());
  var import_HTMLElementType2 = __toESM(require_HTMLElementType2());
  var import_elementAcceptingRef2 = __toESM(require_elementAcceptingRef2());
  var import_composeClasses39 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Modal/modalClasses.js
  var import_generateUtilityClasses42 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass47 = __toESM(require_generateUtilityClass2());
  function getModalUtilityClass(slot) {
    return (0, import_generateUtilityClass47.default)("MuiModal", slot);
  }
  var modalClasses = (0, import_generateUtilityClasses42.default)("MuiModal", ["root", "hidden", "backdrop"]);
  var modalClasses_default = modalClasses;

  // node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var _excluded68 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
  var useUtilityClasses37 = (ownerState) => {
    const {
      open,
      exited,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return (0, import_composeClasses39.default)(slots, getModalUtilityClass, classes2);
  };
  var ModalRoot = styled_default2("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.open && ownerState.exited && styles8.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default2(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles8) => {
      return styles8.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React95.forwardRef(function Modal2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useThemeProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps3,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal(_extends({}, propsWithDefaults, {
      rootRef: ref
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited
    });
    const classes2 = useUtilityClasses37(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps3();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes2 == null ? void 0 : classes2.root, !ownerState.open && ownerState.exited && (classes2 == null ? void 0 : classes2.hidden))
    });
    const backdropProps = useSlotProps({
      elementType: BackdropSlot,
      externalSlotProps: backdropSlotProps,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e2) => {
            if (onBackdropClick) {
              onBackdropClick(e2);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e2);
            }
          }
        }));
      },
      className: clsx_default(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes2 == null ? void 0 : classes2.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(RootSlot, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(BackdropSlot, _extends({}, backdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React95.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? Modal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types63.default.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: import_prop_types63.default.object,
    /**
     * A single child content element.
     */
    children: import_elementAcceptingRef2.default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types63.default.object,
    /**
     * @ignore
     */
    className: import_prop_types63.default.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types63.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types63.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types63.default.shape({
      Backdrop: import_prop_types63.default.elementType,
      Root: import_prop_types63.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types63.default.shape({
      backdrop: import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object]),
      root: import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types63.default.oneOfType([import_HTMLElementType2.default, import_prop_types63.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types63.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types63.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types63.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types63.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types63.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types63.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types63.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types63.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types63.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types63.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types63.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types63.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types63.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types63.default.shape({
      backdrop: import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object]),
      root: import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types63.default.shape({
      backdrop: import_prop_types63.default.elementType,
      root: import_prop_types63.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/Dialog/dialogClasses.js
  var import_generateUtilityClasses43 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass48 = __toESM(require_generateUtilityClass2());
  function getDialogUtilityClass(slot) {
    return (0, import_generateUtilityClass48.default)("MuiDialog", slot);
  }
  var dialogClasses = (0, import_generateUtilityClasses43.default)("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
  var dialogClasses_default = dialogClasses;

  // node_modules/@mui/material/Dialog/DialogContext.js
  var React96 = __toESM(require_react());
  var DialogContext = /* @__PURE__ */ React96.createContext({});
  if (true) {
    DialogContext.displayName = "DialogContext";
  }
  var DialogContext_default = DialogContext;

  // node_modules/@mui/material/Dialog/Dialog.js
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var _excluded69 = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var DialogBackdrop = styled_default2(Backdrop_default, {
    name: "MuiDialog",
    slot: "Backdrop",
    overrides: (props, styles8) => styles8.backdrop
  })({
    // Improve scrollable dialog support.
    zIndex: -1
  });
  var useUtilityClasses38 = (ownerState) => {
    const {
      classes: classes2,
      scroll,
      maxWidth: maxWidth2,
      fullWidth,
      fullScreen
    } = ownerState;
    const slots = {
      root: ["root"],
      container: ["container", `scroll${capitalize_default(scroll)}`],
      paper: ["paper", `paperScroll${capitalize_default(scroll)}`, `paperWidth${capitalize_default(String(maxWidth2))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
    };
    return (0, import_composeClasses40.default)(slots, getDialogUtilityClass, classes2);
  };
  var DialogRoot = styled_default2(Modal_default, {
    name: "MuiDialog",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    "@media print": {
      // Use !important to override the Modal inline-style.
      position: "absolute !important"
    }
  });
  var DialogContainer = styled_default2("div", {
    name: "MuiDialog",
    slot: "Container",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.container, styles8[`scroll${capitalize_default(ownerState.scroll)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    height: "100%",
    "@media print": {
      height: "auto"
    },
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }, ownerState.scroll === "paper" && {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.scroll === "body" && {
    overflowY: "auto",
    overflowX: "hidden",
    textAlign: "center",
    "&::after": {
      content: '""',
      display: "inline-block",
      verticalAlign: "middle",
      height: "100%",
      width: "0"
    }
  }));
  var DialogPaper = styled_default2(Paper_default, {
    name: "MuiDialog",
    slot: "Paper",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.paper, styles8[`scrollPaper${capitalize_default(ownerState.scroll)}`], styles8[`paperWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles8.paperFullWidth, ownerState.fullScreen && styles8.paperFullScreen];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 32,
    position: "relative",
    overflowY: "auto",
    // Fix IE11 issue, to remove at some point.
    "@media print": {
      overflowY: "visible",
      boxShadow: "none"
    }
  }, ownerState.scroll === "paper" && {
    display: "flex",
    flexDirection: "column",
    maxHeight: "calc(100% - 64px)"
  }, ownerState.scroll === "body" && {
    display: "inline-block",
    verticalAlign: "middle",
    textAlign: "left"
    // 'initial' doesn't work on IE11
  }, !ownerState.maxWidth && {
    maxWidth: "calc(100% - 64px)"
  }, ownerState.maxWidth === "xs" && {
    maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
    maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.fullWidth && {
    width: "calc(100% - 64px)"
  }, ownerState.fullScreen && {
    margin: 0,
    width: "100%",
    maxWidth: "100%",
    height: "100%",
    maxHeight: "none",
    borderRadius: 0,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      margin: 0,
      maxWidth: "100%"
    }
  }));
  var Dialog = /* @__PURE__ */ React97.forwardRef(function Dialog2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDialog"
    });
    const theme = useTheme6();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      "aria-describedby": ariaDescribedby2,
      "aria-labelledby": ariaLabelledbyProp,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth: maxWidth2 = "sm",
      onBackdropClick,
      onClick,
      onClose,
      open,
      PaperComponent = Paper_default,
      PaperProps = {},
      scroll = "paper",
      TransitionComponent = Fade_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
    const ownerState = _extends({}, props, {
      disableEscapeKeyDown,
      fullScreen,
      fullWidth,
      maxWidth: maxWidth2,
      scroll
    });
    const classes2 = useUtilityClasses38(ownerState);
    const backdropClick = React97.useRef();
    const handleMouseDown = (event) => {
      backdropClick.current = event.target === event.currentTarget;
    };
    const handleBackdropClick = (event) => {
      if (onClick) {
        onClick(event);
      }
      if (!backdropClick.current) {
        return;
      }
      backdropClick.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const ariaLabelledby = (0, import_useId.default)(ariaLabelledbyProp);
    const dialogContextValue = React97.useMemo(() => {
      return {
        titleId: ariaLabelledby
      };
    }, [ariaLabelledby]);
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(DialogRoot, _extends({
      className: clsx_default(classes2.root, className),
      closeAfterTransition: true,
      components: {
        Backdrop: DialogBackdrop
      },
      componentsProps: {
        backdrop: _extends({
          transitionDuration,
          as: BackdropComponent
        }, BackdropProps)
      },
      disableEscapeKeyDown,
      onClose,
      open,
      ref,
      onClick: handleBackdropClick,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        timeout: transitionDuration,
        role: "presentation"
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(DialogContainer, {
          className: clsx_default(classes2.container),
          onMouseDown: handleMouseDown,
          ownerState,
          children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(DialogPaper, _extends({
            as: PaperComponent,
            elevation: 24,
            role: "dialog",
            "aria-describedby": ariaDescribedby2,
            "aria-labelledby": ariaLabelledby
          }, PaperProps, {
            className: clsx_default(classes2.paper, PaperProps.className),
            ownerState,
            children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(DialogContext_default.Provider, {
              value: dialogContextValue,
              children
            })
          }))
        })
      }))
    }));
  });
  true ? Dialog.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The id(s) of the element(s) that describe the dialog.
     */
    "aria-describedby": import_prop_types64.default.string,
    /**
     * The id(s) of the element(s) that label the dialog.
     */
    "aria-labelledby": import_prop_types64.default.string,
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types64.default.elementType,
    /**
     * @ignore
     */
    BackdropProps: import_prop_types64.default.object,
    /**
     * Dialog children, usually the included sub-components.
     */
    children: import_prop_types64.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types64.default.object,
    /**
     * @ignore
     */
    className: import_prop_types64.default.string,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types64.default.bool,
    /**
     * If `true`, the dialog is full-screen.
     * @default false
     */
    fullScreen: import_prop_types64.default.bool,
    /**
     * If `true`, the dialog stretches to `maxWidth`.
     *
     * Notice that the dialog width grow is limited by the default margin.
     * @default false
     */
    fullWidth: import_prop_types64.default.bool,
    /**
     * Determine the max-width of the dialog.
     * The dialog width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'sm'
     */
    maxWidth: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types64.default.string]),
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types64.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types64.default.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types64.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types64.default.bool.isRequired,
    /**
     * The component used to render the body of the dialog.
     * @default Paper
     */
    PaperComponent: import_prop_types64.default.elementType,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: import_prop_types64.default.object,
    /**
     * Determine the container for scrolling the dialog.
     * @default 'paper'
     */
    scroll: import_prop_types64.default.oneOf(["body", "paper"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types64.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types64.default.oneOfType([import_prop_types64.default.number, import_prop_types64.default.shape({
      appear: import_prop_types64.default.number,
      enter: import_prop_types64.default.number,
      exit: import_prop_types64.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types64.default.object
  } : void 0;
  var Dialog_default = Dialog;

  // node_modules/@mui/material/DialogActions/DialogActions.js
  init_extends();
  var React98 = __toESM(require_react());
  var import_prop_types65 = __toESM(require_prop_types());
  var import_composeClasses41 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/DialogActions/dialogActionsClasses.js
  var import_generateUtilityClasses44 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass49 = __toESM(require_generateUtilityClass2());
  function getDialogActionsUtilityClass(slot) {
    return (0, import_generateUtilityClass49.default)("MuiDialogActions", slot);
  }
  var dialogActionsClasses = (0, import_generateUtilityClasses44.default)("MuiDialogActions", ["root", "spacing"]);
  var dialogActionsClasses_default = dialogActionsClasses;

  // node_modules/@mui/material/DialogActions/DialogActions.js
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var _excluded70 = ["className", "disableSpacing"];
  var useUtilityClasses39 = (ownerState) => {
    const {
      classes: classes2,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return (0, import_composeClasses41.default)(slots, getDialogActionsUtilityClass, classes2);
  };
  var DialogActionsRoot = styled_default2("div", {
    name: "MuiDialogActions",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.disableSpacing && styles8.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end",
    flex: "0 0 auto"
  }, !ownerState.disableSpacing && {
    "& > :not(style) ~ :not(style)": {
      marginLeft: 8
    }
  }));
  var DialogActions = /* @__PURE__ */ React98.forwardRef(function DialogActions2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDialogActions"
    });
    const {
      className,
      disableSpacing = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes2 = useUtilityClasses39(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(DialogActionsRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? DialogActions.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types65.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types65.default.object,
    /**
     * @ignore
     */
    className: import_prop_types65.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types65.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object])
  } : void 0;
  var DialogActions_default = DialogActions;

  // node_modules/@mui/material/DialogContent/DialogContent.js
  init_extends();
  var React99 = __toESM(require_react());
  var import_prop_types66 = __toESM(require_prop_types());
  var import_composeClasses42 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/DialogContent/dialogContentClasses.js
  var import_generateUtilityClasses45 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass50 = __toESM(require_generateUtilityClass2());
  function getDialogContentUtilityClass(slot) {
    return (0, import_generateUtilityClass50.default)("MuiDialogContent", slot);
  }
  var dialogContentClasses = (0, import_generateUtilityClasses45.default)("MuiDialogContent", ["root", "dividers"]);
  var dialogContentClasses_default = dialogContentClasses;

  // node_modules/@mui/material/DialogTitle/dialogTitleClasses.js
  var import_generateUtilityClasses46 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass51 = __toESM(require_generateUtilityClass2());
  function getDialogTitleUtilityClass(slot) {
    return (0, import_generateUtilityClass51.default)("MuiDialogTitle", slot);
  }
  var dialogTitleClasses = (0, import_generateUtilityClasses46.default)("MuiDialogTitle", ["root"]);
  var dialogTitleClasses_default = dialogTitleClasses;

  // node_modules/@mui/material/DialogContent/DialogContent.js
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var _excluded71 = ["className", "dividers"];
  var useUtilityClasses40 = (ownerState) => {
    const {
      classes: classes2,
      dividers
    } = ownerState;
    const slots = {
      root: ["root", dividers && "dividers"]
    };
    return (0, import_composeClasses42.default)(slots, getDialogContentUtilityClass, classes2);
  };
  var DialogContentRoot = styled_default2("div", {
    name: "MuiDialogContent",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.dividers && styles8.dividers];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    overflowY: "auto",
    padding: "20px 24px"
  }, ownerState.dividers ? {
    padding: "16px 24px",
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  } : {
    [`.${dialogTitleClasses_default.root} + &`]: {
      paddingTop: 0
    }
  }));
  var DialogContent = /* @__PURE__ */ React99.forwardRef(function DialogContent2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDialogContent"
    });
    const {
      className,
      dividers = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
    const ownerState = _extends({}, props, {
      dividers
    });
    const classes2 = useUtilityClasses40(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(DialogContentRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? DialogContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types66.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types66.default.object,
    /**
     * @ignore
     */
    className: import_prop_types66.default.string,
    /**
     * Display the top and bottom dividers.
     * @default false
     */
    dividers: import_prop_types66.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
  } : void 0;
  var DialogContent_default = DialogContent;

  // node_modules/@mui/material/DialogContentText/DialogContentText.js
  init_extends();
  var React100 = __toESM(require_react());
  var import_prop_types67 = __toESM(require_prop_types());
  var import_composeClasses43 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js
  var import_generateUtilityClasses47 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass52 = __toESM(require_generateUtilityClass2());
  function getDialogContentTextUtilityClass(slot) {
    return (0, import_generateUtilityClass52.default)("MuiDialogContentText", slot);
  }
  var dialogContentTextClasses = (0, import_generateUtilityClasses47.default)("MuiDialogContentText", ["root"]);
  var dialogContentTextClasses_default = dialogContentTextClasses;

  // node_modules/@mui/material/DialogContentText/DialogContentText.js
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var _excluded72 = ["children", "className"];
  var useUtilityClasses41 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    const composedClasses = (0, import_composeClasses43.default)(slots, getDialogContentTextUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var DialogContentTextRoot = styled_default2(Typography_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiDialogContentText",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({});
  var DialogContentText = /* @__PURE__ */ React100.forwardRef(function DialogContentText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDialogContentText"
    });
    const {
      className
    } = props, ownerState = _objectWithoutPropertiesLoose(props, _excluded72);
    const classes2 = useUtilityClasses41(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DialogContentTextRoot, _extends({
      component: "p",
      variant: "body1",
      color: "text.secondary",
      ref,
      ownerState,
      className: clsx_default(classes2.root, className)
    }, props, {
      classes: classes2
    }));
  });
  true ? DialogContentText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types67.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types67.default.object,
    /**
     * @ignore
     */
    className: import_prop_types67.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types67.default.oneOfType([import_prop_types67.default.arrayOf(import_prop_types67.default.oneOfType([import_prop_types67.default.func, import_prop_types67.default.object, import_prop_types67.default.bool])), import_prop_types67.default.func, import_prop_types67.default.object])
  } : void 0;
  var DialogContentText_default = DialogContentText;

  // node_modules/@mui/material/DialogTitle/DialogTitle.js
  init_extends();
  var React101 = __toESM(require_react());
  var import_prop_types68 = __toESM(require_prop_types());
  var import_composeClasses44 = __toESM(require_composeClasses2());
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var _excluded73 = ["className", "id"];
  var useUtilityClasses42 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses44.default)(slots, getDialogTitleUtilityClass, classes2);
  };
  var DialogTitleRoot = styled_default2(Typography_default, {
    name: "MuiDialogTitle",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    padding: "16px 24px",
    flex: "0 0 auto"
  });
  var DialogTitle = /* @__PURE__ */ React101.forwardRef(function DialogTitle2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDialogTitle"
    });
    const {
      className,
      id: idProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
    const ownerState = props;
    const classes2 = useUtilityClasses42(ownerState);
    const {
      titleId = idProp
    } = React101.useContext(DialogContext_default);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(DialogTitleRoot, _extends({
      component: "h2",
      className: clsx_default(classes2.root, className),
      ownerState,
      ref,
      variant: "h6",
      id: idProp != null ? idProp : titleId
    }, other));
  });
  true ? DialogTitle.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types68.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types68.default.object,
    /**
     * @ignore
     */
    className: import_prop_types68.default.string,
    /**
     * @ignore
     */
    id: import_prop_types68.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types68.default.oneOfType([import_prop_types68.default.arrayOf(import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object, import_prop_types68.default.bool])), import_prop_types68.default.func, import_prop_types68.default.object])
  } : void 0;
  var DialogTitle_default = DialogTitle;

  // node_modules/@mui/material/Divider/Divider.js
  init_extends();
  var React102 = __toESM(require_react());
  var import_prop_types69 = __toESM(require_prop_types());
  var import_composeClasses45 = __toESM(require_composeClasses2());
  var import_colorManipulator12 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Divider/dividerClasses.js
  var import_generateUtilityClasses48 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass53 = __toESM(require_generateUtilityClass2());
  function getDividerUtilityClass(slot) {
    return (0, import_generateUtilityClass53.default)("MuiDivider", slot);
  }
  var dividerClasses = (0, import_generateUtilityClasses48.default)("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  var dividerClasses_default = dividerClasses;

  // node_modules/@mui/material/Divider/Divider.js
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var _excluded74 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  var useUtilityClasses43 = (ownerState) => {
    const {
      absolute,
      children,
      classes: classes2,
      flexItem,
      light: light2,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return (0, import_composeClasses45.default)(slots, getDividerUtilityClass, classes2);
  };
  var DividerRoot = styled_default2("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.absolute && styles8.absolute, styles8[ownerState.variant], ownerState.light && styles8.light, ownerState.orientation === "vertical" && styles8.vertical, ownerState.flexItem && styles8.flexItem, ownerState.children && styles8.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles8.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles8.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles8.textAlignLeft];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme.vars || theme).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : (0, import_colorManipulator12.alpha)(theme.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    ownerState
  }) => _extends({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    "&::before, &::after": {
      content: '""',
      alignSelf: "center"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation !== "vertical" && {
    "&::before, &::after": {
      width: "100%",
      borderTop: `thin solid ${(theme.vars || theme).palette.divider}`
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  var DividerWrapper = styled_default2("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.wrapper, ownerState.orientation === "vertical" && styles8.wrapperVertical];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-block",
    paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
  }));
  var Divider = /* @__PURE__ */ React102.forwardRef(function Divider2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign = "center",
      variant = "fullWidth"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
    const ownerState = _extends({}, props, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign,
      variant
    });
    const classes2 = useUtilityClasses43(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(DividerRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(DividerWrapper, {
        className: classes2.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  Divider.muiSkipListHighlight = true;
  true ? Divider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: import_prop_types69.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types69.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types69.default.object,
    /**
     * @ignore
     */
    className: import_prop_types69.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types69.default.elementType,
    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: import_prop_types69.default.bool,
    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)
     */
    light: import_prop_types69.default.bool,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types69.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    role: import_prop_types69.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object]),
    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: import_prop_types69.default.oneOf(["center", "left", "right"]),
    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types69.default.string])
  } : void 0;
  var Divider_default = Divider;

  // node_modules/@mui/material/Drawer/Drawer.js
  init_extends();
  var React104 = __toESM(require_react());
  var import_prop_types71 = __toESM(require_prop_types());
  var import_integerPropType4 = __toESM(require_integerPropType2());
  var import_composeClasses46 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Slide/Slide.js
  init_extends();
  var React103 = __toESM(require_react());
  var import_prop_types70 = __toESM(require_prop_types());
  var import_chainPropTypes9 = __toESM(require_chainPropTypes2());
  var import_HTMLElementType3 = __toESM(require_HTMLElementType2());
  var import_elementAcceptingRef3 = __toESM(require_elementAcceptingRef2());

  // node_modules/@mui/material/utils/debounce.js
  var import_debounce2 = __toESM(require_debounce2());
  var debounce_default = import_debounce2.default;

  // node_modules/@mui/material/Slide/Slide.js
  var import_utils34 = __toESM(require_utils());
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var _excluded75 = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getTranslateValue(direction2, node2, resolvedContainer) {
    const rect = node2.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = (0, import_utils34.ownerWindow)(node2);
    let transform;
    if (node2.fakeTransform) {
      transform = node2.fakeTransform;
    } else {
      const computedStyle = containerWindow.getComputedStyle(node2);
      transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    let offsetX = 0;
    let offsetY = 0;
    if (transform && transform !== "none" && typeof transform === "string") {
      const transformValues = transform.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction2 === "left") {
      if (containerRect) {
        return `translateX(${containerRect.right + offsetX - rect.left}px)`;
      }
      return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }
    if (direction2 === "right") {
      if (containerRect) {
        return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
      }
      return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }
    if (direction2 === "up") {
      if (containerRect) {
        return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
      }
      return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    }
    if (containerRect) {
      return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    }
    return `translateY(-${rect.top + rect.height - offsetY}px)`;
  }
  function resolveContainer(containerPropProp) {
    return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
  }
  function setTranslateValue(direction2, node2, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform = getTranslateValue(direction2, node2, resolvedContainer);
    if (transform) {
      node2.style.webkitTransform = transform;
      node2.style.transform = transform;
    }
  }
  var Slide = /* @__PURE__ */ React103.forwardRef(function Slide2(props, ref) {
    const theme = useTheme6();
    const defaultEasing2 = {
      enter: theme.transitions.easing.easeOut,
      exit: theme.transitions.easing.sharp
    };
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      container: containerProp,
      direction: direction2 = "down",
      easing: easingProp = defaultEasing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout3 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded75);
    const childrenRef = React103.useRef(null);
    const handleRef = useForkRef_default(children.ref, childrenRef, ref);
    const normalizedTransitionCallback = (callback) => (isAppearing) => {
      if (callback) {
        if (isAppearing === void 0) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      setTranslateValue(direction2, node2, containerProp);
      reflow(node2);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const transitionProps = getTransitionProps({
        timeout: timeout3,
        style: style4,
        easing: easingProp
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps));
      node2.style.transition = theme.transitions.create("transform", _extends({}, transitionProps));
      node2.style.webkitTransform = "none";
      node2.style.transform = "none";
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        timeout: timeout3,
        style: style4,
        easing: easingProp
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      setTranslateValue(direction2, node2, containerProp);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback((node2) => {
      node2.style.webkitTransition = "";
      node2.style.transition = "";
      if (onExited) {
        onExited(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(childrenRef.current, next2);
      }
    };
    const updatePosition = React103.useCallback(() => {
      if (childrenRef.current) {
        setTranslateValue(direction2, childrenRef.current, containerProp);
      }
    }, [direction2, containerProp]);
    React103.useEffect(() => {
      if (inProp || direction2 === "down" || direction2 === "right") {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        if (childrenRef.current) {
          setTranslateValue(direction2, childrenRef.current, containerProp);
        }
      });
      const containerWindow = (0, import_utils34.ownerWindow)(childrenRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [direction2, inProp, containerProp]);
    React103.useEffect(() => {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      appear,
      in: inProp,
      timeout: timeout3
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React103.cloneElement(children, _extends({
          ref: handleRef,
          style: _extends({
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, style4, children.props.style)
        }, childProps));
      }
    }));
  });
  true ? Slide.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types70.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types70.default.bool,
    /**
     * A single child content element.
     */
    children: import_elementAcceptingRef3.default.isRequired,
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the container the Slide is transitioning from.
     */
    container: (0, import_chainPropTypes9.default)(import_prop_types70.default.oneOfType([import_HTMLElementType3.default, import_prop_types70.default.func]), (props) => {
      if (props.open) {
        const resolvedContainer = resolveContainer(props.container);
        if (resolvedContainer && resolvedContainer.nodeType === 1) {
          const box = resolvedContainer.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== "function" || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Direction the child node will enter from.
     * @default 'down'
     */
    direction: import_prop_types70.default.oneOf(["down", "left", "right", "up"]),
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     * @default {
     *   enter: theme.transitions.easing.easeOut,
     *   exit: theme.transitions.easing.sharp,
     * }
     */
    easing: import_prop_types70.default.oneOfType([import_prop_types70.default.shape({
      enter: import_prop_types70.default.string,
      exit: import_prop_types70.default.string
    }), import_prop_types70.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types70.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types70.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types70.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types70.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types70.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types70.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types70.default.func,
    /**
     * @ignore
     */
    style: import_prop_types70.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types70.default.oneOfType([import_prop_types70.default.number, import_prop_types70.default.shape({
      appear: import_prop_types70.default.number,
      enter: import_prop_types70.default.number,
      exit: import_prop_types70.default.number
    })])
  } : void 0;
  var Slide_default = Slide;

  // node_modules/@mui/material/Drawer/drawerClasses.js
  var import_generateUtilityClasses49 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass54 = __toESM(require_generateUtilityClass2());
  function getDrawerUtilityClass(slot) {
    return (0, import_generateUtilityClass54.default)("MuiDrawer", slot);
  }
  var drawerClasses = (0, import_generateUtilityClasses49.default)("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);
  var drawerClasses_default = drawerClasses;

  // node_modules/@mui/material/Drawer/Drawer.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var _excluded76 = ["BackdropProps"];
  var _excluded212 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
  var overridesResolver2 = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles8.docked, styles8.modal];
  };
  var useUtilityClasses44 = (ownerState) => {
    const {
      classes: classes2,
      anchor,
      variant
    } = ownerState;
    const slots = {
      root: ["root"],
      docked: [(variant === "permanent" || variant === "persistent") && "docked"],
      modal: ["modal"],
      paper: ["paper", `paperAnchor${capitalize_default(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize_default(anchor)}`]
    };
    return (0, import_composeClasses46.default)(slots, getDrawerUtilityClass, classes2);
  };
  var DrawerRoot = styled_default2(Modal_default, {
    name: "MuiDrawer",
    slot: "Root",
    overridesResolver: overridesResolver2
  })(({
    theme
  }) => ({
    zIndex: (theme.vars || theme).zIndex.drawer
  }));
  var DrawerDockedRoot = styled_default2("div", {
    shouldForwardProp: rootShouldForwardProp_default,
    name: "MuiDrawer",
    slot: "Docked",
    skipVariantsResolver: false,
    overridesResolver: overridesResolver2
  })({
    flex: "0 0 auto"
  });
  var DrawerPaper = styled_default2(Paper_default, {
    name: "MuiDrawer",
    slot: "Paper",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.paper, styles8[`paperAnchor${capitalize_default(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles8[`paperAnchorDocked${capitalize_default(ownerState.anchor)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    overflowY: "auto",
    display: "flex",
    flexDirection: "column",
    height: "100%",
    flex: "1 0 auto",
    zIndex: (theme.vars || theme).zIndex.drawer,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    // temporary style
    position: "fixed",
    top: 0,
    // We disable the focus ring for mouse, touch and keyboard users.
    // At some point, it would be better to keep it for keyboard users.
    // :focus-ring CSS pseudo-class will help.
    outline: 0
  }, ownerState.anchor === "left" && {
    left: 0
  }, ownerState.anchor === "top" && {
    top: 0,
    left: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "right" && {
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    left: 0,
    bottom: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
    borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
  }));
  var oppositeDirection = {
    left: "right",
    right: "left",
    top: "down",
    bottom: "up"
  };
  function isHorizontal(anchor) {
    return ["left", "right"].indexOf(anchor) !== -1;
  }
  function getAnchor({
    direction: direction2
  }, anchor) {
    return direction2 === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  var Drawer = /* @__PURE__ */ React104.forwardRef(function Drawer2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDrawer"
    });
    const theme = useTheme6();
    const isRtl = useRtl();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      anchor: anchorProp = "left",
      BackdropProps,
      children,
      className,
      elevation = 16,
      hideBackdrop = false,
      ModalProps: {
        BackdropProps: BackdropPropsProp
      } = {},
      onClose,
      open = false,
      PaperProps = {},
      SlideProps,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Slide_default,
      transitionDuration = defaultTransitionDuration,
      variant = "temporary"
    } = props, ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded76), other = _objectWithoutPropertiesLoose(props, _excluded212);
    const mounted = React104.useRef(false);
    React104.useEffect(() => {
      mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor({
      direction: isRtl ? "rtl" : "ltr"
    }, anchorProp);
    const anchor = anchorProp;
    const ownerState = _extends({}, props, {
      anchor,
      elevation,
      open,
      variant
    }, other);
    const classes2 = useUtilityClasses44(ownerState);
    const drawer = /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DrawerPaper, _extends({
      elevation: variant === "temporary" ? elevation : 0,
      square: true
    }, PaperProps, {
      className: clsx_default(classes2.paper, PaperProps.className),
      ownerState,
      children
    }));
    if (variant === "permanent") {
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DrawerDockedRoot, _extends({
        className: clsx_default(classes2.root, classes2.docked, className),
        ownerState,
        ref
      }, other, {
        children: drawer
      }));
    }
    const slidingDrawer = /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TransitionComponent, _extends({
      in: open,
      direction: oppositeDirection[anchorInvariant],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps, {
      children: drawer
    }));
    if (variant === "persistent") {
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DrawerDockedRoot, _extends({
        className: clsx_default(classes2.root, classes2.docked, className),
        ownerState,
        ref
      }, other, {
        children: slidingDrawer
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DrawerRoot, _extends({
      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      className: clsx_default(classes2.root, classes2.modal, className),
      open,
      ownerState,
      onClose,
      hideBackdrop,
      ref
    }, other, ModalProps, {
      children: slidingDrawer
    }));
  });
  true ? Drawer.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Side from which the drawer will appear.
     * @default 'left'
     */
    anchor: import_prop_types71.default.oneOf(["bottom", "left", "right", "top"]),
    /**
     * @ignore
     */
    BackdropProps: import_prop_types71.default.object,
    /**
     * The content of the component.
     */
    children: import_prop_types71.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types71.default.object,
    /**
     * @ignore
     */
    className: import_prop_types71.default.string,
    /**
     * The elevation of the drawer.
     * @default 16
     */
    elevation: import_integerPropType4.default,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types71.default.bool,
    /**
     * Props applied to the [`Modal`](/material-ui/api/modal/) element.
     * @default {}
     */
    ModalProps: import_prop_types71.default.object,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types71.default.func,
    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: import_prop_types71.default.bool,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: import_prop_types71.default.object,
    /**
     * Props applied to the [`Slide`](/material-ui/api/slide/) element.
     */
    SlideProps: import_prop_types71.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types71.default.oneOfType([import_prop_types71.default.number, import_prop_types71.default.shape({
      appear: import_prop_types71.default.number,
      enter: import_prop_types71.default.number,
      exit: import_prop_types71.default.number
    })]),
    /**
     * The variant to use.
     * @default 'temporary'
     */
    variant: import_prop_types71.default.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  var Drawer_default = Drawer;

  // node_modules/@mui/material/Fab/Fab.js
  init_extends();
  var React105 = __toESM(require_react());
  var import_prop_types72 = __toESM(require_prop_types());
  var import_composeClasses47 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Fab/fabClasses.js
  var import_generateUtilityClasses50 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass55 = __toESM(require_generateUtilityClass2());
  function getFabUtilityClass(slot) {
    return (0, import_generateUtilityClass55.default)("MuiFab", slot);
  }
  var fabClasses = (0, import_generateUtilityClasses50.default)("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge", "info", "error", "warning", "success"]);
  var fabClasses_default = fabClasses;

  // node_modules/@mui/material/Fab/Fab.js
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  var _excluded77 = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];
  var useUtilityClasses45 = (ownerState) => {
    const {
      color: color2,
      variant,
      classes: classes2,
      size
    } = ownerState;
    const slots = {
      root: ["root", variant, `size${capitalize_default(size)}`, color2 === "inherit" ? "colorInherit" : color2]
    };
    const composedClasses = (0, import_composeClasses47.default)(slots, getFabUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var FabRoot = styled_default2(ButtonBase_default, {
    name: "MuiFab",
    slot: "Root",
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], styles8[`size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles8.colorInherit, styles8[capitalize_default(ownerState.size)], styles8[ownerState.color]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    return _extends({}, theme.typography.button, {
      minHeight: 36,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color"], {
        duration: theme.transitions.duration.short
      }),
      borderRadius: "50%",
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      zIndex: (theme.vars || theme).zIndex.fab,
      boxShadow: (theme.vars || theme).shadows[6],
      "&:active": {
        boxShadow: (theme.vars || theme).shadows[12]
      },
      color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: (theme.vars || theme).palette.grey[300],
      "&:hover": {
        backgroundColor: (theme.vars || theme).palette.grey.A100,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette.grey[300]
        },
        textDecoration: "none"
      },
      [`&.${fabClasses_default.focusVisible}`]: {
        boxShadow: (theme.vars || theme).shadows[6]
      }
    }, ownerState.size === "small" && {
      width: 40,
      height: 40
    }, ownerState.size === "medium" && {
      width: 48,
      height: 48
    }, ownerState.variant === "extended" && {
      borderRadius: 48 / 2,
      padding: "0 16px",
      width: "auto",
      minHeight: "auto",
      minWidth: 48,
      height: 48
    }, ownerState.variant === "extended" && ownerState.size === "small" && {
      width: "auto",
      padding: "0 8px",
      borderRadius: 34 / 2,
      minWidth: 34,
      height: 34
    }, ownerState.variant === "extended" && ownerState.size === "medium" && {
      width: "auto",
      padding: "0 16px",
      borderRadius: 40 / 2,
      minWidth: 40,
      height: 40
    }, ownerState.color === "inherit" && {
      color: "inherit"
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.color !== "inherit" && ownerState.color !== "default" && (theme.vars || theme).palette[ownerState.color] != null && {
    color: (theme.vars || theme).palette[ownerState.color].contrastText,
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }), ({
    theme
  }) => ({
    [`&.${fabClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled,
      boxShadow: (theme.vars || theme).shadows[0],
      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
    }
  }));
  var Fab = /* @__PURE__ */ React105.forwardRef(function Fab2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFab"
    });
    const {
      children,
      className,
      color: color2 = "default",
      component = "button",
      disabled = false,
      disableFocusRipple = false,
      focusVisibleClassName,
      size = "large",
      variant = "circular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded77);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableFocusRipple,
      size,
      variant
    });
    const classes2 = useUtilityClasses45(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(FabRoot, _extends({
      className: clsx_default(classes2.root, className),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
      ownerState,
      ref
    }, other, {
      classes: classes2,
      children
    }));
  });
  true ? Fab.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types72.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types72.default.object,
    /**
     * @ignore
     */
    className: import_prop_types72.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types72.default.oneOfType([import_prop_types72.default.oneOf(["default", "error", "info", "inherit", "primary", "secondary", "success", "warning"]), import_prop_types72.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types72.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types72.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types72.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     */
    disableRipple: import_prop_types72.default.bool,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types72.default.string,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types72.default.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'large'
     */
    size: import_prop_types72.default.oneOfType([import_prop_types72.default.oneOf(["small", "medium", "large"]), import_prop_types72.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types72.default.oneOfType([import_prop_types72.default.arrayOf(import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object, import_prop_types72.default.bool])), import_prop_types72.default.func, import_prop_types72.default.object]),
    /**
     * The variant to use.
     * @default 'circular'
     */
    variant: import_prop_types72.default.oneOfType([import_prop_types72.default.oneOf(["circular", "extended"]), import_prop_types72.default.string])
  } : void 0;
  var Fab_default = Fab;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  init_extends();
  var React106 = __toESM(require_react());
  var import_deepmerge14 = __toESM(require_deepmerge2());
  var import_refType6 = __toESM(require_refType2());
  var import_prop_types73 = __toESM(require_prop_types());
  var import_composeClasses48 = __toESM(require_composeClasses2());
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var _excluded78 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses46 = (ownerState) => {
    const {
      classes: classes2,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses48.default)(slots, getFilledInputUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var FilledInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles8), !ownerState.disableUnderline && styles8.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
  });
  var FilledInputInput = styled_default2(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }));
  var FilledInput = /* @__PURE__ */ React106.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes2 = useUtilityClasses46(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge14.default)(filledInputComponentsProps, slotProps != null ? slotProps : componentsPropsProp) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: classes2
    }));
  });
  true ? FilledInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types73.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types73.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types73.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types73.default.oneOfType([import_prop_types73.default.oneOf(["primary", "secondary"]), import_prop_types73.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types73.default.shape({
      Input: import_prop_types73.default.elementType,
      Root: import_prop_types73.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types73.default.shape({
      input: import_prop_types73.default.object,
      root: import_prop_types73.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types73.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types73.default.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: import_prop_types73.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types73.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types73.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types73.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types73.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types73.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types73.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types73.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType6.default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types73.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types73.default.oneOfType([import_prop_types73.default.number, import_prop_types73.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types73.default.oneOfType([import_prop_types73.default.number, import_prop_types73.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types73.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types73.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types73.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types73.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types73.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types73.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types73.default.oneOfType([import_prop_types73.default.number, import_prop_types73.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types73.default.shape({
      input: import_prop_types73.default.object,
      root: import_prop_types73.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types73.default.shape({
      input: import_prop_types73.default.elementType,
      root: import_prop_types73.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types73.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types73.default.oneOfType([import_prop_types73.default.arrayOf(import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object, import_prop_types73.default.bool])), import_prop_types73.default.func, import_prop_types73.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types73.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types73.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/FormControl/FormControl.js
  init_extends();
  var React107 = __toESM(require_react());
  var import_prop_types74 = __toESM(require_prop_types());
  var import_composeClasses49 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/utils/isMuiElement.js
  var import_isMuiElement2 = __toESM(require_isMuiElement2());
  var isMuiElement_default = import_isMuiElement2.default;

  // node_modules/@mui/material/FormControl/formControlClasses.js
  var import_generateUtilityClasses51 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass56 = __toESM(require_generateUtilityClass2());
  function getFormControlUtilityClasses(slot) {
    return (0, import_generateUtilityClass56.default)("MuiFormControl", slot);
  }
  var formControlClasses = (0, import_generateUtilityClasses51.default)("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
  var formControlClasses_default = formControlClasses;

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var _excluded79 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses47 = (ownerState) => {
    const {
      classes: classes2,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return (0, import_composeClasses49.default)(slots, getFormControlUtilityClasses, classes2);
  };
  var FormControlRoot = styled_default2("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles8) => {
      return _extends({}, styles8.root, styles8[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles8.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl = /* @__PURE__ */ React107.forwardRef(function FormControl2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes2 = useUtilityClasses47(ownerState);
    const [adornedStart, setAdornedStart] = React107.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React107.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React107.useState(() => {
      let initialFilled = false;
      if (children) {
        React107.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React107.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React107.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React107.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes2.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types74.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types74.default.object,
    /**
     * @ignore
     */
    className: import_prop_types74.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types74.default.oneOfType([import_prop_types74.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types74.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types74.default.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types74.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types74.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types74.default.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types74.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types74.default.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types74.default.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types74.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types74.default.oneOfType([import_prop_types74.default.oneOf(["medium", "small"]), import_prop_types74.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types74.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  init_extends();
  var React108 = __toESM(require_react());
  var import_prop_types76 = __toESM(require_prop_types());
  var import_refType7 = __toESM(require_refType2());
  var import_composeClasses50 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Stack/Stack.js
  var import_prop_types75 = __toESM(require_prop_types());
  var Stack = createStack({
    createStyledComponent: styled_default2("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles8) => styles8.root
    }),
    useThemeProps: (inProps) => useThemeProps2({
      props: inProps,
      name: "MuiStack"
    })
  });
  true ? Stack.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types75.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types75.default.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types75.default.arrayOf(import_prop_types75.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types75.default.object]),
    /**
     * Add an element between each child.
     */
    divider: import_prop_types75.default.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.number, import_prop_types75.default.string])), import_prop_types75.default.number, import_prop_types75.default.object, import_prop_types75.default.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
     * @default false
     */
    useFlexGap: import_prop_types75.default.bool
  } : void 0;
  var Stack_default = Stack;

  // node_modules/@mui/material/Stack/stackClasses.js
  var import_generateUtilityClasses52 = __toESM(require_generateUtilityClasses2());
  var stackClasses = (0, import_generateUtilityClasses52.default)("MuiStack", ["root"]);
  var stackClasses_default = stackClasses;

  // node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  var import_generateUtilityClasses53 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass57 = __toESM(require_generateUtilityClass2());
  function getFormControlLabelUtilityClasses(slot) {
    return (0, import_generateUtilityClass57.default)("MuiFormControlLabel", slot);
  }
  var formControlLabelClasses = (0, import_generateUtilityClasses53.default)("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
  var formControlLabelClasses_default = formControlLabelClasses;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var _excluded80 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
  var useUtilityClasses48 = (ownerState) => {
    const {
      classes: classes2,
      disabled,
      labelPlacement,
      error,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
      label: ["label", disabled && "disabled"],
      asterisk: ["asterisk", error && "error"]
    };
    return (0, import_composeClasses50.default)(slots, getFormControlLabelUtilityClasses, classes2);
  };
  var FormControlLabelRoot = styled_default2("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles8.label
      }, styles8.root, styles8[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    // used for row presentation of radio/checkbox
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }
  }));
  var AsteriskComponent = styled_default2("span", {
    name: "MuiFormControlLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles8) => styles8.asterisk
  })(({
    theme
  }) => ({
    [`&.${formControlLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormControlLabel = /* @__PURE__ */ React108.forwardRef(function FormControlLabel2(inProps, ref) {
    var _ref, _slotProps$typography;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end",
      required: requiredProp,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
    const muiFormControl = useFormControl();
    const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
    const required = requiredProp != null ? requiredProp : control.props.required;
    const controlProps = {
      disabled,
      required
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      disabled,
      labelPlacement,
      required,
      error: fcs.error
    });
    const classes2 = useUtilityClasses48(ownerState);
    const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(Typography_default, _extends({
        component: "span"
      }, typographySlotProps, {
        className: clsx_default(classes2.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
        children: label
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(FormControlLabelRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ React108.cloneElement(control, controlProps), required ? /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(Stack_default, {
        display: "block",
        children: [label, /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes2.asterisk,
          children: ["\u2009", "*"]
        })]
      }) : label]
    }));
  });
  true ? FormControlLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component appears selected.
     */
    checked: import_prop_types76.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types76.default.object,
    /**
     * @ignore
     */
    className: import_prop_types76.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types76.default.shape({
      typography: import_prop_types76.default.object
    }),
    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: import_prop_types76.default.element.isRequired,
    /**
     * If `true`, the control is disabled.
     */
    disabled: import_prop_types76.default.bool,
    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: import_prop_types76.default.bool,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType7.default,
    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: import_prop_types76.default.node,
    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: import_prop_types76.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * @ignore
     */
    name: import_prop_types76.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types76.default.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types76.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types76.default.shape({
      typography: import_prop_types76.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types76.default.oneOfType([import_prop_types76.default.arrayOf(import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object, import_prop_types76.default.bool])), import_prop_types76.default.func, import_prop_types76.default.object]),
    /**
     * The value of the component.
     */
    value: import_prop_types76.default.any
  } : void 0;
  var FormControlLabel_default = FormControlLabel;

  // node_modules/@mui/material/FormGroup/FormGroup.js
  init_extends();
  var React109 = __toESM(require_react());
  var import_prop_types77 = __toESM(require_prop_types());
  var import_composeClasses51 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/FormGroup/formGroupClasses.js
  var import_generateUtilityClasses54 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass58 = __toESM(require_generateUtilityClass2());
  function getFormGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass58.default)("MuiFormGroup", slot);
  }
  var formGroupClasses = (0, import_generateUtilityClasses54.default)("MuiFormGroup", ["root", "row", "error"]);
  var formGroupClasses_default = formGroupClasses;

  // node_modules/@mui/material/FormGroup/FormGroup.js
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  var _excluded81 = ["className", "row"];
  var useUtilityClasses49 = (ownerState) => {
    const {
      classes: classes2,
      row,
      error
    } = ownerState;
    const slots = {
      root: ["root", row && "row", error && "error"]
    };
    return (0, import_composeClasses51.default)(slots, getFormGroupUtilityClass, classes2);
  };
  var FormGroupRoot = styled_default2("div", {
    name: "MuiFormGroup",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.row && styles8.row];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "column",
    flexWrap: "wrap"
  }, ownerState.row && {
    flexDirection: "row"
  }));
  var FormGroup = /* @__PURE__ */ React109.forwardRef(function FormGroup2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormGroup"
    });
    const {
      className,
      row = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      row,
      error: fcs.error
    });
    const classes2 = useUtilityClasses49(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(FormGroupRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? FormGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types77.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types77.default.object,
    /**
     * @ignore
     */
    className: import_prop_types77.default.string,
    /**
     * Display group of elements in a compact row.
     * @default false
     */
    row: import_prop_types77.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types77.default.oneOfType([import_prop_types77.default.arrayOf(import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object, import_prop_types77.default.bool])), import_prop_types77.default.func, import_prop_types77.default.object])
  } : void 0;
  var FormGroup_default = FormGroup;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  init_extends();
  var React110 = __toESM(require_react());
  var import_prop_types78 = __toESM(require_prop_types());
  var import_composeClasses52 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  var import_generateUtilityClasses55 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass59 = __toESM(require_generateUtilityClass2());
  function getFormHelperTextUtilityClasses(slot) {
    return (0, import_generateUtilityClass59.default)("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = (0, import_generateUtilityClasses55.default)("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  var _span;
  var _excluded82 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses50 = (ownerState) => {
    const {
      classes: classes2,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return (0, import_composeClasses52.default)(slots, getFormHelperTextUtilityClasses, classes2);
  };
  var FormHelperTextRoot = styled_default2("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.size && styles8[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles8.contained, ownerState.filled && styles8.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React110.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes2 = useUtilityClasses50(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        }))
      ) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: import_prop_types78.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types78.default.object,
    /**
     * @ignore
     */
    className: import_prop_types78.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types78.default.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: import_prop_types78.default.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: import_prop_types78.default.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: import_prop_types78.default.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: import_prop_types78.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types78.default.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: import_prop_types78.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object, import_prop_types78.default.bool])), import_prop_types78.default.func, import_prop_types78.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["filled", "outlined", "standard"]), import_prop_types78.default.string])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  init_extends();
  var React111 = __toESM(require_react());
  var import_prop_types79 = __toESM(require_prop_types());
  var import_composeClasses53 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  var import_generateUtilityClasses56 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass60 = __toESM(require_generateUtilityClass2());
  function getFormLabelUtilityClasses(slot) {
    return (0, import_generateUtilityClass60.default)("MuiFormLabel", slot);
  }
  var formLabelClasses = (0, import_generateUtilityClasses56.default)("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var _excluded83 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses51 = (ownerState) => {
    const {
      classes: classes2,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return (0, import_composeClasses53.default)(slots, getFormLabelUtilityClasses, classes2);
  };
  var FormLabelRoot = styled_default2("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles8) => {
      return _extends({}, styles8.root, ownerState.color === "secondary" && styles8.colorSecondary, ownerState.filled && styles8.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var AsteriskComponent2 = styled_default2("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles8) => styles8.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React111.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes2 = useUtilityClasses51(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)(AsteriskComponent2, {
        ownerState,
        "aria-hidden": true,
        className: classes2.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types79.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types79.default.object,
    /**
     * @ignore
     */
    className: import_prop_types79.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types79.default.oneOfType([import_prop_types79.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types79.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types79.default.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: import_prop_types79.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types79.default.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: import_prop_types79.default.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: import_prop_types79.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types79.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types79.default.oneOfType([import_prop_types79.default.arrayOf(import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object, import_prop_types79.default.bool])), import_prop_types79.default.func, import_prop_types79.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/Grid/Grid.js
  init_extends();
  var React113 = __toESM(require_react());
  var import_prop_types80 = __toESM(require_prop_types());
  var import_styleFunctionSx11 = __toESM(require_styleFunctionSx2());
  var import_composeClasses54 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/utils/requirePropFactory.js
  var import_requirePropFactory = __toESM(require_requirePropFactory2());
  var requirePropFactory_default = import_requirePropFactory.default;

  // node_modules/@mui/material/Grid/GridContext.js
  var React112 = __toESM(require_react());
  var GridContext = /* @__PURE__ */ React112.createContext();
  if (true) {
    GridContext.displayName = "GridContext";
  }
  var GridContext_default = GridContext;

  // node_modules/@mui/material/Grid/gridClasses.js
  var import_generateUtilityClasses57 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass61 = __toESM(require_generateUtilityClass2());
  function getGridUtilityClass(slot) {
    return (0, import_generateUtilityClass61.default)("MuiGrid", slot);
  }
  var SPACINGS2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = (0, import_generateUtilityClasses57.default)("MuiGrid", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    // spacings
    ...SPACINGS2.map((spacing2) => `spacing-xs-${spacing2}`),
    // direction values
    ...DIRECTIONS.map((direction2) => `direction-xs-${direction2}`),
    // wrap values
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES.map((size) => `grid-md-${size}`),
    ...GRID_SIZES.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES.map((size) => `grid-xl-${size}`)
  ]);
  var gridClasses_default = gridClasses;

  // node_modules/@mui/material/Grid/Grid.js
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var _excluded84 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
  function getOffset(val) {
    const parse2 = parseFloat(val);
    return `${parse2}${String(val).replace(String(parse2), "") || "px"}`;
  }
  function generateGrid({
    theme,
    ownerState
  }) {
    let size;
    return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
      let styles8 = {};
      if (ownerState[breakpoint]) {
        size = ownerState[breakpoint];
      }
      if (!size) {
        return globalStyles;
      }
      if (size === true) {
        styles8 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      } else if (size === "auto") {
        styles8 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      } else {
        const columnsBreakpointValues = resolveBreakpointValues({
          values: ownerState.columns,
          breakpoints: theme.breakpoints.values
        });
        const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
        if (columnValue === void 0 || columnValue === null) {
          return globalStyles;
        }
        const width2 = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
        let more = {};
        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          const themeSpacing = theme.spacing(ownerState.columnSpacing);
          if (themeSpacing !== "0px") {
            const fullWidth = `calc(${width2} + ${getOffset(themeSpacing)})`;
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        }
        styles8 = _extends({
          flexBasis: width2,
          flexGrow: 0,
          maxWidth: width2
        }, more);
      }
      if (theme.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles8);
      } else {
        globalStyles[theme.breakpoints.up(breakpoint)] = styles8;
      }
      return globalStyles;
    }, {});
  }
  function generateDirection({
    theme,
    ownerState
  }) {
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    });
    return handleBreakpoints({
      theme
    }, directionValues, (propValue) => {
      const output = {
        flexDirection: propValue
      };
      if (propValue.indexOf("column") === 0) {
        output[`& > .${gridClasses_default.item}`] = {
          maxWidth: "none"
        };
      }
      return output;
    });
  }
  function extractZeroValueBreakpointKeys({
    breakpoints: breakpoints2,
    values: values3
  }) {
    let nonZeroKey = "";
    Object.keys(values3).forEach((key) => {
      if (nonZeroKey !== "") {
        return;
      }
      if (values3[key] !== 0) {
        nonZeroKey = key;
      }
    });
    const sortedBreakpointKeysByValue = Object.keys(breakpoints2).sort((a2, b2) => {
      return breakpoints2[a2] - breakpoints2[b2];
    });
    return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
  }
  function generateRowGap({
    theme,
    ownerState
  }) {
    const {
      container,
      rowSpacing
    } = ownerState;
    let styles8 = {};
    if (container && rowSpacing !== 0) {
      const rowSpacingValues = resolveBreakpointValues({
        values: rowSpacing,
        breakpoints: theme.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof rowSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme.breakpoints.values,
          values: rowSpacingValues
        });
      }
      styles8 = handleBreakpoints({
        theme
      }, rowSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK;
        const themeSpacing = theme.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            marginTop: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingTop: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
          return {};
        }
        return {
          marginTop: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingTop: 0
          }
        };
      });
    }
    return styles8;
  }
  function generateColumnGap({
    theme,
    ownerState
  }) {
    const {
      container,
      columnSpacing
    } = ownerState;
    let styles8 = {};
    if (container && columnSpacing !== 0) {
      const columnSpacingValues = resolveBreakpointValues({
        values: columnSpacing,
        breakpoints: theme.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof columnSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme.breakpoints.values,
          values: columnSpacingValues
        });
      }
      styles8 = handleBreakpoints({
        theme
      }, columnSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK2;
        const themeSpacing = theme.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            width: `calc(100% + ${getOffset(themeSpacing)})`,
            marginLeft: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingLeft: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
          return {};
        }
        return {
          width: "100%",
          marginLeft: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingLeft: 0
          }
        };
      });
    }
    return styles8;
  }
  function resolveSpacingStyles(spacing2, breakpoints2, styles8 = {}) {
    if (!spacing2 || spacing2 <= 0) {
      return [];
    }
    if (typeof spacing2 === "string" && !Number.isNaN(Number(spacing2)) || typeof spacing2 === "number") {
      return [styles8[`spacing-xs-${String(spacing2)}`]];
    }
    const spacingStyles = [];
    breakpoints2.forEach((breakpoint) => {
      const value = spacing2[breakpoint];
      if (Number(value) > 0) {
        spacingStyles.push(styles8[`spacing-${breakpoint}-${String(value)}`]);
      }
    });
    return spacingStyles;
  }
  var GridRoot = styled_default2("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      const {
        container,
        direction: direction2,
        item,
        spacing: spacing2,
        wrap,
        zeroMinWidth,
        breakpoints: breakpoints2
      } = ownerState;
      let spacingStyles = [];
      if (container) {
        spacingStyles = resolveSpacingStyles(spacing2, breakpoints2, styles8);
      }
      const breakpointsStyles = [];
      breakpoints2.forEach((breakpoint) => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsStyles.push(styles8[`grid-${breakpoint}-${String(value)}`]);
        }
      });
      return [styles8.root, container && styles8.container, item && styles8.item, zeroMinWidth && styles8.zeroMinWidth, ...spacingStyles, direction2 !== "row" && styles8[`direction-xs-${String(direction2)}`], wrap !== "wrap" && styles8[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
    }
  })(({
    ownerState
  }) => _extends({
    boxSizing: "border-box"
  }, ownerState.container && {
    display: "flex",
    flexWrap: "wrap",
    width: "100%"
  }, ownerState.item && {
    margin: 0
    // For instance, it's useful when used with a `figure` element.
  }, ownerState.zeroMinWidth && {
    minWidth: 0
  }, ownerState.wrap !== "wrap" && {
    flexWrap: ownerState.wrap
  }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
  function resolveSpacingClasses(spacing2, breakpoints2) {
    if (!spacing2 || spacing2 <= 0) {
      return [];
    }
    if (typeof spacing2 === "string" && !Number.isNaN(Number(spacing2)) || typeof spacing2 === "number") {
      return [`spacing-xs-${String(spacing2)}`];
    }
    const classes2 = [];
    breakpoints2.forEach((breakpoint) => {
      const value = spacing2[breakpoint];
      if (Number(value) > 0) {
        const className = `spacing-${breakpoint}-${String(value)}`;
        classes2.push(className);
      }
    });
    return classes2;
  }
  var useUtilityClasses52 = (ownerState) => {
    const {
      classes: classes2,
      container,
      direction: direction2,
      item,
      spacing: spacing2,
      wrap,
      zeroMinWidth,
      breakpoints: breakpoints2
    } = ownerState;
    let spacingClasses = [];
    if (container) {
      spacingClasses = resolveSpacingClasses(spacing2, breakpoints2);
    }
    const breakpointsClasses = [];
    breakpoints2.forEach((breakpoint) => {
      const value = ownerState[breakpoint];
      if (value) {
        breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
      }
    });
    const slots = {
      root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction2 !== "row" && `direction-xs-${String(direction2)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
    };
    return (0, import_composeClasses54.default)(slots, getGridUtilityClass, classes2);
  };
  var Grid = /* @__PURE__ */ React113.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiGrid"
    });
    const {
      breakpoints: breakpoints2
    } = useTheme6();
    const props = (0, import_styleFunctionSx11.extendSxProp)(themeProps);
    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = "div",
      container = false,
      direction: direction2 = "row",
      item = false,
      rowSpacing: rowSpacingProp,
      spacing: spacing2 = 0,
      wrap = "wrap",
      zeroMinWidth = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded84);
    const rowSpacing = rowSpacingProp || spacing2;
    const columnSpacing = columnSpacingProp || spacing2;
    const columnsContext = React113.useContext(GridContext_default);
    const columns = container ? columnsProp || 12 : columnsContext;
    const breakpointsValues = {};
    const otherFiltered = _extends({}, other);
    breakpoints2.keys.forEach((breakpoint) => {
      if (other[breakpoint] != null) {
        breakpointsValues[breakpoint] = other[breakpoint];
        delete otherFiltered[breakpoint];
      }
    });
    const ownerState = _extends({}, props, {
      columns,
      container,
      direction: direction2,
      item,
      rowSpacing,
      columnSpacing,
      wrap,
      zeroMinWidth,
      spacing: spacing2
    }, breakpointsValues, {
      breakpoints: breakpoints2.keys
    });
    const classes2 = useUtilityClasses52(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(GridContext_default.Provider, {
      value: columns,
      children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(GridRoot, _extends({
        ownerState,
        className: clsx_default(classes2.root, className),
        as: component,
        ref
      }, otherFiltered))
    });
  });
  true ? Grid.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types80.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types80.default.object,
    /**
     * @ignore
     */
    className: import_prop_types80.default.string,
    /**
     * The number of columns.
     * @default 12
     */
    columns: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.number), import_prop_types80.default.number, import_prop_types80.default.object]),
    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.string])), import_prop_types80.default.number, import_prop_types80.default.object, import_prop_types80.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types80.default.elementType,
    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: import_prop_types80.default.bool,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types80.default.arrayOf(import_prop_types80.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types80.default.object]),
    /**
     * If `true`, the component will have the flex *item* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    item: import_prop_types80.default.bool,
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["auto"]), import_prop_types80.default.number, import_prop_types80.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["auto"]), import_prop_types80.default.number, import_prop_types80.default.bool]),
    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.string])), import_prop_types80.default.number, import_prop_types80.default.object, import_prop_types80.default.string]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["auto"]), import_prop_types80.default.number, import_prop_types80.default.bool]),
    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.string])), import_prop_types80.default.number, import_prop_types80.default.object, import_prop_types80.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object, import_prop_types80.default.bool])), import_prop_types80.default.func, import_prop_types80.default.object]),
    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: import_prop_types80.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["auto"]), import_prop_types80.default.number, import_prop_types80.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: import_prop_types80.default.oneOfType([import_prop_types80.default.oneOf(["auto"]), import_prop_types80.default.number, import_prop_types80.default.bool]),
    /**
     * If `true`, it sets `min-width: 0` on the item.
     * Refer to the limitations section of the documentation to better understand the use case.
     * @default false
     */
    zeroMinWidth: import_prop_types80.default.bool
  } : void 0;
  if (true) {
    const requireProp = requirePropFactory_default("Grid", Grid);
    Grid["propTypes"] = _extends({}, Grid.propTypes, {
      direction: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var Grid_default = Grid;

  // node_modules/@mui/material/Unstable_Grid2/Grid2.js
  var import_prop_types81 = __toESM(require_prop_types());
  var Grid22 = createGrid({
    createStyledComponent: styled_default2("div", {
      name: "MuiGrid2",
      slot: "Root",
      overridesResolver: (props, styles8) => styles8.root
    }),
    componentName: "MuiGrid2",
    useThemeProps: (inProps) => useThemeProps2({
      props: inProps,
      name: "MuiGrid2"
    })
  });
  true ? Grid22.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types81.default.node,
    /**
     * @ignore
     */
    sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object])
  } : void 0;
  var Grid2_default = Grid22;

  // node_modules/@mui/material/Unstable_Grid2/grid2Classes.js
  var import_generateUtilityClasses58 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass62 = __toESM(require_generateUtilityClass2());
  function getGrid2UtilityClass(slot) {
    return (0, import_generateUtilityClass62.default)("MuiGrid2", slot);
  }
  var SPACINGS3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS2 = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS2 = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES2 = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var grid2Classes = (0, import_generateUtilityClasses58.default)("MuiGrid2", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    // spacings
    ...SPACINGS3.map((spacing2) => `spacing-xs-${spacing2}`),
    // direction values
    ...DIRECTIONS2.map((direction2) => `direction-xs-${direction2}`),
    // wrap values
    ...WRAPS2.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES2.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES2.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES2.map((size) => `grid-md-${size}`),
    ...GRID_SIZES2.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES2.map((size) => `grid-xl-${size}`)
  ]);
  var grid2Classes_default = grid2Classes;

  // node_modules/@mui/material/Grow/Grow.js
  init_extends();
  var React114 = __toESM(require_react());
  var import_prop_types82 = __toESM(require_prop_types());
  var import_useTimeout3 = __toESM(require_useTimeout2());
  var import_elementAcceptingRef4 = __toESM(require_elementAcceptingRef2());
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var _excluded85 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles4 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React114.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout3 = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded85);
    const timer = (0, import_useTimeout3.default)();
    const autoTimeout = React114.useRef();
    const theme = useTheme6();
    const nodeRef = React114.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout3 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout3 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout3 === "auto") {
        timer.start(autoTimeout.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout3 === "auto" ? null : timeout3
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React114.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles4[state], style4, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types82.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types82.default.bool,
    /**
     * A single child content element.
     */
    children: import_elementAcceptingRef4.default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types82.default.oneOfType([import_prop_types82.default.shape({
      enter: import_prop_types82.default.string,
      exit: import_prop_types82.default.string
    }), import_prop_types82.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types82.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types82.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types82.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types82.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types82.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types82.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types82.default.func,
    /**
     * @ignore
     */
    style: import_prop_types82.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: import_prop_types82.default.oneOfType([import_prop_types82.default.oneOf(["auto"]), import_prop_types82.default.number, import_prop_types82.default.shape({
      appear: import_prop_types82.default.number,
      enter: import_prop_types82.default.number,
      exit: import_prop_types82.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Hidden/Hidden.js
  init_extends();
  var React118 = __toESM(require_react());
  var import_prop_types86 = __toESM(require_prop_types());

  // node_modules/@mui/material/Hidden/HiddenJs.js
  var React116 = __toESM(require_react());
  var import_prop_types84 = __toESM(require_prop_types());
  var import_exactProp2 = __toESM(require_exactProp2());

  // node_modules/@mui/material/Hidden/withWidth.js
  init_extends();
  var React115 = __toESM(require_react());
  var import_prop_types83 = __toESM(require_prop_types());
  var import_getDisplayName2 = __toESM(require_getDisplayName2());
  var import_useThemeProps53 = __toESM(require_useThemeProps2());
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var _excluded86 = ["initialWidth", "width"];
  var breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
  var isWidthUp = (breakpoint, width2, inclusive = true) => {
    if (inclusive) {
      return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width2);
    }
    return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width2);
  };
  var isWidthDown = (breakpoint, width2, inclusive = false) => {
    if (inclusive) {
      return breakpointKeys.indexOf(width2) <= breakpointKeys.indexOf(breakpoint);
    }
    return breakpointKeys.indexOf(width2) < breakpointKeys.indexOf(breakpoint);
  };
  var withWidth = (options = {}) => (Component2) => {
    const {
      withTheme: withThemeOption = false,
      noSSR = false,
      initialWidth: initialWidthOption
    } = options;
    function WithWidth(props) {
      const contextTheme = useTheme6();
      const theme = props.theme || contextTheme;
      const _getThemeProps = (0, import_useThemeProps53.getThemeProps)({
        theme,
        name: "MuiWithWidth",
        props
      }), {
        initialWidth,
        width: width2
      } = _getThemeProps, other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded86);
      const [mountedState, setMountedState] = React115.useState(false);
      useEnhancedEffect_default(() => {
        setMountedState(true);
      }, []);
      const keys = theme.breakpoints.keys.slice().reverse();
      const widthComputed = keys.reduce((output, key) => {
        const matches = useMediaQuery(theme.breakpoints.up(key));
        return !output && matches ? key : output;
      }, null);
      const more = _extends({
        width: width2 || (mountedState || noSSR ? widthComputed : void 0) || initialWidth || initialWidthOption
      }, withThemeOption ? {
        theme
      } : {}, other);
      if (more.width === void 0) {
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(Component2, _extends({}, more));
    }
    true ? WithWidth.propTypes = {
      /**
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use a heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: import_prop_types83.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
      /**
       * @ignore
       */
      theme: import_prop_types83.default.object,
      /**
       * Bypass the width calculation logic.
       */
      width: import_prop_types83.default.oneOf(["xs", "sm", "md", "lg", "xl"])
    } : void 0;
    if (true) {
      WithWidth.displayName = `WithWidth(${(0, import_getDisplayName2.default)(Component2)})`;
    }
    return WithWidth;
  };
  var withWidth_default = withWidth;

  // node_modules/@mui/material/Hidden/HiddenJs.js
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  function HiddenJs(props) {
    const {
      children,
      only,
      width: width2
    } = props;
    const theme = useTheme6();
    let visible = true;
    if (only) {
      if (Array.isArray(only)) {
        for (let i2 = 0; i2 < only.length; i2 += 1) {
          const breakpoint = only[i2];
          if (width2 === breakpoint) {
            visible = false;
            break;
          }
        }
      } else if (only && width2 === only) {
        visible = false;
      }
    }
    if (visible) {
      for (let i2 = 0; i2 < theme.breakpoints.keys.length; i2 += 1) {
        const breakpoint = theme.breakpoints.keys[i2];
        const breakpointUp = props[`${breakpoint}Up`];
        const breakpointDown = props[`${breakpoint}Down`];
        if (breakpointUp && isWidthUp(breakpoint, width2) || breakpointDown && isWidthDown(breakpoint, width2)) {
          visible = false;
          break;
        }
      }
    }
    if (!visible) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(React116.Fragment, {
      children
    });
  }
  true ? HiddenJs.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types84.default.node,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    lgDown: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    lgUp: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    mdDown: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    mdUp: import_prop_types84.default.bool,
    /**
     * Hide the given breakpoint(s).
     */
    only: import_prop_types84.default.oneOfType([import_prop_types84.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types84.default.arrayOf(import_prop_types84.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    smDown: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    smUp: import_prop_types84.default.bool,
    /**
     * @ignore
     * width prop provided by withWidth decorator.
     */
    width: import_prop_types84.default.string.isRequired,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xlDown: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xlUp: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xsDown: import_prop_types84.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xsUp: import_prop_types84.default.bool
  } : void 0;
  if (true) {
    true ? HiddenJs.propTypes = (0, import_exactProp2.default)(HiddenJs.propTypes) : void 0;
  }
  var HiddenJs_default = withWidth_default()(HiddenJs);

  // node_modules/@mui/material/Hidden/HiddenCss.js
  init_extends();
  var React117 = __toESM(require_react());
  var import_prop_types85 = __toESM(require_prop_types());
  var import_composeClasses55 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Hidden/hiddenCssClasses.js
  var import_generateUtilityClasses59 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass63 = __toESM(require_generateUtilityClass2());
  function getHiddenCssUtilityClass(slot) {
    return (0, import_generateUtilityClass63.default)("PrivateHiddenCss", slot);
  }
  var hiddenCssClasses = (0, import_generateUtilityClasses59.default)("PrivateHiddenCss", ["root", "xlDown", "xlUp", "onlyXl", "lgDown", "lgUp", "onlyLg", "mdDown", "mdUp", "onlyMd", "smDown", "smUp", "onlySm", "xsDown", "xsUp", "onlyXs"]);

  // node_modules/@mui/material/Hidden/HiddenCss.js
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var _excluded87 = ["children", "className", "only"];
  var useUtilityClasses53 = (ownerState) => {
    const {
      classes: classes2,
      breakpoints: breakpoints2
    } = ownerState;
    const slots = {
      root: ["root", ...breakpoints2.map(({
        breakpoint,
        dir
      }) => {
        return dir === "only" ? `${dir}${capitalize_default(breakpoint)}` : `${breakpoint}${capitalize_default(dir)}`;
      })]
    };
    return (0, import_composeClasses55.default)(slots, getHiddenCssUtilityClass, classes2);
  };
  var HiddenCssRoot = styled_default2("div", {
    name: "PrivateHiddenCss",
    slot: "Root"
  })(({
    theme,
    ownerState
  }) => {
    const hidden = {
      display: "none"
    };
    return _extends({}, ownerState.breakpoints.map(({
      breakpoint,
      dir
    }) => {
      if (dir === "only") {
        return {
          [theme.breakpoints.only(breakpoint)]: hidden
        };
      }
      return dir === "up" ? {
        [theme.breakpoints.up(breakpoint)]: hidden
      } : {
        [theme.breakpoints.down(breakpoint)]: hidden
      };
    }).reduce((r3, o2) => {
      Object.keys(o2).forEach((k) => {
        r3[k] = o2[k];
      });
      return r3;
    }, {}));
  });
  function HiddenCss(props) {
    const {
      children,
      className,
      only
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded87);
    const theme = useTheme6();
    if (true) {
      const unknownProps = Object.keys(other).filter((propName) => {
        const isUndeclaredBreakpoint = !theme.breakpoints.keys.some((breakpoint) => {
          return `${breakpoint}Up` === propName || `${breakpoint}Down` === propName;
        });
        return !["classes", "theme", "isRtl", "sx"].includes(propName) && isUndeclaredBreakpoint;
      });
      if (unknownProps.length > 0) {
        console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${unknownProps.join(", ")}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
      }
    }
    const breakpoints2 = [];
    for (let i2 = 0; i2 < theme.breakpoints.keys.length; i2 += 1) {
      const breakpoint = theme.breakpoints.keys[i2];
      const breakpointUp = other[`${breakpoint}Up`];
      const breakpointDown = other[`${breakpoint}Down`];
      if (breakpointUp) {
        breakpoints2.push({
          breakpoint,
          dir: "up"
        });
      }
      if (breakpointDown) {
        breakpoints2.push({
          breakpoint,
          dir: "down"
        });
      }
    }
    if (only) {
      const onlyBreakpoints = Array.isArray(only) ? only : [only];
      onlyBreakpoints.forEach((breakpoint) => {
        breakpoints2.push({
          breakpoint,
          dir: "only"
        });
      });
    }
    const ownerState = _extends({}, props, {
      breakpoints: breakpoints2
    });
    const classes2 = useUtilityClasses53(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(HiddenCssRoot, {
      className: clsx_default(classes2.root, className),
      ownerState,
      children
    });
  }
  true ? HiddenCss.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types85.default.node,
    /**
     * @ignore
     */
    className: import_prop_types85.default.string,
    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     */
    implementation: import_prop_types85.default.oneOf(["js", "css"]),
    /**
     * If `true`, screens this size and down are hidden.
     */
    lgDown: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    lgUp: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    mdDown: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    mdUp: import_prop_types85.default.bool,
    /**
     * Hide the given breakpoint(s).
     */
    only: import_prop_types85.default.oneOfType([import_prop_types85.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types85.default.arrayOf(import_prop_types85.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    /**
     * If `true`, screens this size and down are hidden.
     */
    smDown: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    smUp: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    xlDown: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    xlUp: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    xsDown: import_prop_types85.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    xsUp: import_prop_types85.default.bool
  } : void 0;
  var HiddenCss_default = HiddenCss;

  // node_modules/@mui/material/Hidden/Hidden.js
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  var _excluded88 = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];
  function Hidden(props) {
    const {
      implementation = "js",
      lgDown = false,
      lgUp = false,
      mdDown = false,
      mdUp = false,
      smDown = false,
      smUp = false,
      xlDown = false,
      xlUp = false,
      xsDown = false,
      xsUp = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded88);
    if (implementation === "js") {
      return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(HiddenJs_default, _extends({
        lgDown,
        lgUp,
        mdDown,
        mdUp,
        smDown,
        smUp,
        xlDown,
        xlUp,
        xsDown,
        xsUp
      }, other));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(HiddenCss_default, _extends({
      lgDown,
      lgUp,
      mdDown,
      mdUp,
      smDown,
      smUp,
      xlDown,
      xlUp,
      xsDown,
      xsUp
    }, other));
  }
  true ? Hidden.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types86.default.node,
    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     * @default 'js'
     */
    implementation: import_prop_types86.default.oneOf(["css", "js"]),
    /**
     * You can use this prop when choosing the `js` implementation with server-side rendering.
     *
     * As `window.innerWidth` is unavailable on the server,
     * we default to rendering an empty component during the first mount.
     * You might want to use a heuristic to approximate
     * the screen width of the client browser screen width.
     *
     * For instance, you could be using the user-agent or the client-hints.
     * https://caniuse.com/#search=client%20hint
     */
    initialWidth: import_prop_types86.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    lgDown: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    lgUp: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    mdDown: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    mdUp: import_prop_types86.default.bool,
    /**
     * Hide the given breakpoint(s).
     */
    only: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types86.default.arrayOf(import_prop_types86.default.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired)]),
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    smDown: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    smUp: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    xlDown: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    xlUp: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    xsDown: import_prop_types86.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    xsUp: import_prop_types86.default.bool
  } : void 0;
  var Hidden_default = Hidden;

  // node_modules/@mui/material/Icon/Icon.js
  init_extends();
  var React119 = __toESM(require_react());
  var import_prop_types87 = __toESM(require_prop_types());
  var import_composeClasses56 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Icon/iconClasses.js
  var import_generateUtilityClasses60 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass64 = __toESM(require_generateUtilityClass2());
  function getIconUtilityClass(slot) {
    return (0, import_generateUtilityClass64.default)("MuiIcon", slot);
  }
  var iconClasses = (0, import_generateUtilityClasses60.default)("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  var iconClasses_default = iconClasses;

  // node_modules/@mui/material/Icon/Icon.js
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  var _excluded89 = ["baseClassName", "className", "color", "component", "fontSize"];
  var useUtilityClasses54 = (ownerState) => {
    const {
      color: color2,
      fontSize,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return (0, import_composeClasses56.default)(slots, getIconUtilityClass, classes2);
  };
  var IconRoot = styled_default2("span", {
    name: "MuiIcon",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.color !== "inherit" && styles8[`color${capitalize_default(ownerState.color)}`], styles8[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => ({
    userSelect: "none",
    width: "1em",
    height: "1em",
    // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
    // To remove at some point.
    overflow: "hidden",
    display: "inline-block",
    // allow overflow hidden to take action
    textAlign: "center",
    // support non-square icon
    flexShrink: 0,
    fontSize: {
      inherit: "inherit",
      small: theme.typography.pxToRem(20),
      medium: theme.typography.pxToRem(24),
      large: theme.typography.pxToRem(36)
    }[ownerState.fontSize],
    // TODO v5 deprecate, v6 remove for sx
    color: {
      primary: (theme.vars || theme).palette.primary.main,
      secondary: (theme.vars || theme).palette.secondary.main,
      info: (theme.vars || theme).palette.info.main,
      success: (theme.vars || theme).palette.success.main,
      warning: (theme.vars || theme).palette.warning.main,
      action: (theme.vars || theme).palette.action.active,
      error: (theme.vars || theme).palette.error.main,
      disabled: (theme.vars || theme).palette.action.disabled,
      inherit: void 0
    }[ownerState.color]
  }));
  var Icon = /* @__PURE__ */ React119.forwardRef(function Icon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiIcon"
    });
    const {
      baseClassName = "material-icons",
      className,
      color: color2 = "inherit",
      component: Component2 = "span",
      fontSize = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
    const ownerState = _extends({}, props, {
      baseClassName,
      color: color2,
      component: Component2,
      fontSize
    });
    const classes2 = useUtilityClasses54(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(IconRoot, _extends({
      as: Component2,
      className: clsx_default(
        baseClassName,
        // Prevent the translation of the text content.
        // The font relies on the exact text content to render the icon.
        "notranslate",
        classes2.root,
        className
      ),
      ownerState,
      "aria-hidden": true,
      ref
    }, other));
  });
  true ? Icon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any
     * other base class that suits the icon font you're using (for example material-icons-rounded, fas, etc).
     * @default 'material-icons'
     */
    baseClassName: import_prop_types87.default.string,
    /**
     * The name of the icon font ligature.
     */
    children: import_prop_types87.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types87.default.object,
    /**
     * @ignore
     */
    className: import_prop_types87.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'inherit'
     */
    color: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types87.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types87.default.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types87.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types87.default.oneOfType([import_prop_types87.default.arrayOf(import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object, import_prop_types87.default.bool])), import_prop_types87.default.func, import_prop_types87.default.object])
  } : void 0;
  Icon.muiName = "Icon";
  var Icon_default = Icon;

  // node_modules/@mui/material/ImageList/ImageList.js
  init_extends();
  var import_composeClasses57 = __toESM(require_composeClasses2());
  var import_integerPropType5 = __toESM(require_integerPropType2());
  var import_prop_types88 = __toESM(require_prop_types());
  var React121 = __toESM(require_react());

  // node_modules/@mui/material/ImageList/imageListClasses.js
  var import_generateUtilityClasses61 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass65 = __toESM(require_generateUtilityClass2());
  function getImageListUtilityClass(slot) {
    return (0, import_generateUtilityClass65.default)("MuiImageList", slot);
  }
  var imageListClasses = (0, import_generateUtilityClasses61.default)("MuiImageList", ["root", "masonry", "quilted", "standard", "woven"]);
  var imageListClasses_default = imageListClasses;

  // node_modules/@mui/material/ImageList/ImageListContext.js
  var React120 = __toESM(require_react());
  var ImageListContext = /* @__PURE__ */ React120.createContext({});
  if (true) {
    ImageListContext.displayName = "ImageListContext";
  }
  var ImageListContext_default = ImageListContext;

  // node_modules/@mui/material/ImageList/ImageList.js
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var _excluded90 = ["children", "className", "cols", "component", "rowHeight", "gap", "style", "variant"];
  var useUtilityClasses55 = (ownerState) => {
    const {
      classes: classes2,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant]
    };
    return (0, import_composeClasses57.default)(slots, getImageListUtilityClass, classes2);
  };
  var ImageListRoot = styled_default2("ul", {
    name: "MuiImageList",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant]];
    }
  })(({
    ownerState
  }) => {
    return _extends({
      display: "grid",
      overflowY: "auto",
      listStyle: "none",
      padding: 0,
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: "touch"
    }, ownerState.variant === "masonry" && {
      display: "block"
    });
  });
  var ImageList = /* @__PURE__ */ React121.forwardRef(function ImageList2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiImageList"
    });
    const {
      children,
      className,
      cols = 2,
      component = "ul",
      rowHeight = "auto",
      gap: gap2 = 4,
      style: styleProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded90);
    const contextValue = React121.useMemo(() => ({
      rowHeight,
      gap: gap2,
      variant
    }), [rowHeight, gap2, variant]);
    React121.useEffect(() => {
      if (true) {
        if (document !== void 0 && "objectFit" in document.documentElement.style === false) {
          console.error(["MUI: ImageList v5+ no longer natively supports Internet Explorer.", "Use v4 of this component instead, or polyfill CSS object-fit."].join("\n"));
        }
      }
    }, []);
    const style4 = variant === "masonry" ? _extends({
      columnCount: cols,
      columnGap: gap2
    }, styleProp) : _extends({
      gridTemplateColumns: `repeat(${cols}, 1fr)`,
      gap: gap2
    }, styleProp);
    const ownerState = _extends({}, props, {
      component,
      gap: gap2,
      rowHeight,
      variant
    });
    const classes2 = useUtilityClasses55(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ImageListRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, classes2[variant], className),
      ref,
      style: style4,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ImageListContext_default.Provider, {
        value: contextValue,
        children
      })
    }));
  });
  true ? ImageList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `ImageListItem`s.
     */
    children: import_prop_types88.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types88.default.object,
    /**
     * @ignore
     */
    className: import_prop_types88.default.string,
    /**
     * Number of columns.
     * @default 2
     */
    cols: import_integerPropType5.default,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types88.default.elementType,
    /**
     * The gap between items in px.
     * @default 4
     */
    gap: import_prop_types88.default.number,
    /**
     * The height of one row in px.
     * @default 'auto'
     */
    rowHeight: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["auto"]), import_prop_types88.default.number]),
    /**
     * @ignore
     */
    style: import_prop_types88.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types88.default.oneOfType([import_prop_types88.default.arrayOf(import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object, import_prop_types88.default.bool])), import_prop_types88.default.func, import_prop_types88.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["masonry", "quilted", "standard", "woven"]), import_prop_types88.default.string])
  } : void 0;
  var ImageList_default = ImageList;

  // node_modules/@mui/material/ImageListItem/ImageListItem.js
  init_extends();
  var import_composeClasses58 = __toESM(require_composeClasses2());
  var import_integerPropType6 = __toESM(require_integerPropType2());
  var import_prop_types89 = __toESM(require_prop_types());
  var React122 = __toESM(require_react());
  var import_react_is5 = __toESM(require_react_is3());

  // node_modules/@mui/material/ImageListItem/imageListItemClasses.js
  var import_generateUtilityClasses62 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass66 = __toESM(require_generateUtilityClass2());
  function getImageListItemUtilityClass(slot) {
    return (0, import_generateUtilityClass66.default)("MuiImageListItem", slot);
  }
  var imageListItemClasses = (0, import_generateUtilityClasses62.default)("MuiImageListItem", ["root", "img", "standard", "woven", "masonry", "quilted"]);
  var imageListItemClasses_default = imageListItemClasses;

  // node_modules/@mui/material/ImageListItem/ImageListItem.js
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());
  var _excluded91 = ["children", "className", "cols", "component", "rows", "style"];
  var useUtilityClasses56 = (ownerState) => {
    const {
      classes: classes2,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant],
      img: ["img"]
    };
    return (0, import_composeClasses58.default)(slots, getImageListItemUtilityClass, classes2);
  };
  var ImageListItemRoot = styled_default2("li", {
    name: "MuiImageListItem",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${imageListItemClasses_default.img}`]: styles8.img
      }, styles8.root, styles8[ownerState.variant]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "block",
    position: "relative"
  }, ownerState.variant === "standard" && {
    // For titlebar under list item
    display: "flex",
    flexDirection: "column"
  }, ownerState.variant === "woven" && {
    height: "100%",
    alignSelf: "center",
    "&:nth-of-type(even)": {
      height: "70%"
    }
  }, {
    [`& .${imageListItemClasses_default.img}`]: _extends({
      objectFit: "cover",
      width: "100%",
      height: "100%",
      display: "block"
    }, ownerState.variant === "standard" && {
      height: "auto",
      flexGrow: 1
    })
  }));
  var ImageListItem = /* @__PURE__ */ React122.forwardRef(function ImageListItem2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiImageListItem"
    });
    const {
      children,
      className,
      cols = 1,
      component = "li",
      rows = 1,
      style: style4
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
    const {
      rowHeight = "auto",
      gap: gap2,
      variant
    } = React122.useContext(ImageListContext_default);
    let height2 = "auto";
    if (variant === "woven") {
      height2 = void 0;
    } else if (rowHeight !== "auto") {
      height2 = rowHeight * rows + gap2 * (rows - 1);
    }
    const ownerState = _extends({}, props, {
      cols,
      component,
      gap: gap2,
      rowHeight,
      rows,
      variant
    });
    const classes2 = useUtilityClasses56(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ImageListItemRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, classes2[variant], className),
      ref,
      style: _extends({
        height: height2,
        gridColumnEnd: variant !== "masonry" ? `span ${cols}` : void 0,
        gridRowEnd: variant !== "masonry" ? `span ${rows}` : void 0,
        marginBottom: variant === "masonry" ? gap2 : void 0,
        breakInside: variant === "masonry" ? "avoid" : void 0
      }, style4),
      ownerState
    }, other, {
      children: React122.Children.map(children, (child) => {
        if (!/* @__PURE__ */ React122.isValidElement(child)) {
          return null;
        }
        if (true) {
          if ((0, import_react_is5.isFragment)(child)) {
            console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        if (child.type === "img" || isMuiElement_default(child, ["Image"])) {
          return /* @__PURE__ */ React122.cloneElement(child, {
            className: clsx_default(classes2.img, child.props.className)
          });
        }
        return child;
      })
    }));
  });
  true ? ImageListItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `<img>`.
     */
    children: import_prop_types89.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types89.default.object,
    /**
     * @ignore
     */
    className: import_prop_types89.default.string,
    /**
     * Width of the item in number of grid columns.
     * @default 1
     */
    cols: import_integerPropType6.default,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types89.default.elementType,
    /**
     * Height of the item in number of grid rows.
     * @default 1
     */
    rows: import_integerPropType6.default,
    /**
     * @ignore
     */
    style: import_prop_types89.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types89.default.oneOfType([import_prop_types89.default.arrayOf(import_prop_types89.default.oneOfType([import_prop_types89.default.func, import_prop_types89.default.object, import_prop_types89.default.bool])), import_prop_types89.default.func, import_prop_types89.default.object])
  } : void 0;
  var ImageListItem_default = ImageListItem;

  // node_modules/@mui/material/ImageListItemBar/ImageListItemBar.js
  init_extends();
  var import_composeClasses59 = __toESM(require_composeClasses2());
  var import_prop_types90 = __toESM(require_prop_types());
  var React123 = __toESM(require_react());

  // node_modules/@mui/material/ImageListItemBar/imageListItemBarClasses.js
  var import_generateUtilityClasses63 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass67 = __toESM(require_generateUtilityClass2());
  function getImageListItemBarUtilityClass(slot) {
    return (0, import_generateUtilityClass67.default)("MuiImageListItemBar", slot);
  }
  var imageListItemBarClasses = (0, import_generateUtilityClasses63.default)("MuiImageListItemBar", ["root", "positionBottom", "positionTop", "positionBelow", "titleWrap", "titleWrapBottom", "titleWrapTop", "titleWrapBelow", "titleWrapActionPosLeft", "titleWrapActionPosRight", "title", "subtitle", "actionIcon", "actionIconActionPosLeft", "actionIconActionPosRight"]);
  var imageListItemBarClasses_default = imageListItemBarClasses;

  // node_modules/@mui/material/ImageListItemBar/ImageListItemBar.js
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  var _excluded92 = ["actionIcon", "actionPosition", "className", "subtitle", "title", "position"];
  var useUtilityClasses57 = (ownerState) => {
    const {
      classes: classes2,
      position: position2,
      actionIcon,
      actionPosition
    } = ownerState;
    const slots = {
      root: ["root", `position${capitalize_default(position2)}`],
      titleWrap: ["titleWrap", `titleWrap${capitalize_default(position2)}`, actionIcon && `titleWrapActionPos${capitalize_default(actionPosition)}`],
      title: ["title"],
      subtitle: ["subtitle"],
      actionIcon: ["actionIcon", `actionIconActionPos${capitalize_default(actionPosition)}`]
    };
    return (0, import_composeClasses59.default)(slots, getImageListItemBarUtilityClass, classes2);
  };
  var ImageListItemBarRoot = styled_default2("div", {
    name: "MuiImageListItemBar",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`position${capitalize_default(ownerState.position)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({
      position: "absolute",
      left: 0,
      right: 0,
      background: "rgba(0, 0, 0, 0.5)",
      display: "flex",
      alignItems: "center",
      fontFamily: theme.typography.fontFamily
    }, ownerState.position === "bottom" && {
      bottom: 0
    }, ownerState.position === "top" && {
      top: 0
    }, ownerState.position === "below" && {
      position: "relative",
      background: "transparent",
      alignItems: "normal"
    });
  });
  var ImageListItemBarTitleWrap = styled_default2("div", {
    name: "MuiImageListItemBar",
    slot: "TitleWrap",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.titleWrap, styles8[`titleWrap${capitalize_default(ownerState.position)}`], ownerState.actionIcon && styles8[`titleWrapActionPos${capitalize_default(ownerState.actionPosition)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({
      flexGrow: 1,
      padding: "12px 16px",
      color: (theme.vars || theme).palette.common.white,
      overflow: "hidden"
    }, ownerState.position === "below" && {
      padding: "6px 0 12px",
      color: "inherit"
    }, ownerState.actionIcon && ownerState.actionPosition === "left" && {
      paddingLeft: 0
    }, ownerState.actionIcon && ownerState.actionPosition === "right" && {
      paddingRight: 0
    });
  });
  var ImageListItemBarTitle = styled_default2("div", {
    name: "MuiImageListItemBar",
    slot: "Title",
    overridesResolver: (props, styles8) => styles8.title
  })(({
    theme
  }) => {
    return {
      fontSize: theme.typography.pxToRem(16),
      lineHeight: "24px",
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    };
  });
  var ImageListItemBarSubtitle = styled_default2("div", {
    name: "MuiImageListItemBar",
    slot: "Subtitle",
    overridesResolver: (props, styles8) => styles8.subtitle
  })(({
    theme
  }) => {
    return {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1,
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    };
  });
  var ImageListItemBarActionIcon = styled_default2("div", {
    name: "MuiImageListItemBar",
    slot: "ActionIcon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.actionIcon, styles8[`actionIconActionPos${capitalize_default(ownerState.actionPosition)}`]];
    }
  })(({
    ownerState
  }) => {
    return _extends({}, ownerState.actionPosition === "left" && {
      order: -1
    });
  });
  var ImageListItemBar = /* @__PURE__ */ React123.forwardRef(function ImageListItemBar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiImageListItemBar"
    });
    const {
      actionIcon,
      actionPosition = "right",
      className,
      subtitle,
      title,
      position: position2 = "bottom"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
    const ownerState = _extends({}, props, {
      position: position2,
      actionPosition
    });
    const classes2 = useUtilityClasses57(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(ImageListItemBarRoot, _extends({
      ownerState,
      className: clsx_default(classes2.root, className),
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(ImageListItemBarTitleWrap, {
        ownerState,
        className: classes2.titleWrap,
        children: [/* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ImageListItemBarTitle, {
          className: classes2.title,
          children: title
        }), subtitle ? /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ImageListItemBarSubtitle, {
          className: classes2.subtitle,
          children: subtitle
        }) : null]
      }), actionIcon ? /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(ImageListItemBarActionIcon, {
        ownerState,
        className: classes2.actionIcon,
        children: actionIcon
      }) : null]
    }));
  });
  true ? ImageListItemBar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An IconButton element to be used as secondary action target
     * (primary action target is the item itself).
     */
    actionIcon: import_prop_types90.default.node,
    /**
     * Position of secondary action IconButton.
     * @default 'right'
     */
    actionPosition: import_prop_types90.default.oneOf(["left", "right"]),
    /**
     * @ignore
     */
    children: import_prop_types90.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types90.default.object,
    /**
     * @ignore
     */
    className: import_prop_types90.default.string,
    /**
     * Position of the title bar.
     * @default 'bottom'
     */
    position: import_prop_types90.default.oneOf(["below", "bottom", "top"]),
    /**
     * String or element serving as subtitle (support text).
     */
    subtitle: import_prop_types90.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types90.default.oneOfType([import_prop_types90.default.arrayOf(import_prop_types90.default.oneOfType([import_prop_types90.default.func, import_prop_types90.default.object, import_prop_types90.default.bool])), import_prop_types90.default.func, import_prop_types90.default.object]),
    /**
     * Title to be displayed.
     */
    title: import_prop_types90.default.node
  } : void 0;
  var ImageListItemBar_default = ImageListItemBar;

  // node_modules/@mui/material/Input/Input.js
  init_extends();
  var React124 = __toESM(require_react());
  var import_prop_types91 = __toESM(require_prop_types());
  var import_composeClasses60 = __toESM(require_composeClasses2());
  var import_deepmerge15 = __toESM(require_deepmerge2());
  var import_refType8 = __toESM(require_refType2());
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  var _excluded93 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses58 = (ownerState) => {
    const {
      classes: classes2,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses60.default)(slots, getInputUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var InputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles8), !ownerState.disableUnderline && styles8.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses_default.disabled}, .${inputClasses_default.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default2(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React124.forwardRef(function Input2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded93);
    const classes2 = useUtilityClasses58(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge15.default)(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: classes2
    }));
  });
  true ? Input.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types91.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types91.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types91.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types91.default.oneOfType([import_prop_types91.default.oneOf(["primary", "secondary"]), import_prop_types91.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types91.default.shape({
      Input: import_prop_types91.default.elementType,
      Root: import_prop_types91.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types91.default.shape({
      input: import_prop_types91.default.object,
      root: import_prop_types91.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types91.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types91.default.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: import_prop_types91.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types91.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types91.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types91.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types91.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types91.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types91.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType8.default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types91.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types91.default.oneOfType([import_prop_types91.default.number, import_prop_types91.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types91.default.oneOfType([import_prop_types91.default.number, import_prop_types91.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types91.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types91.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types91.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types91.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types91.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types91.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types91.default.oneOfType([import_prop_types91.default.number, import_prop_types91.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types91.default.shape({
      input: import_prop_types91.default.object,
      root: import_prop_types91.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types91.default.shape({
      input: import_prop_types91.default.elementType,
      root: import_prop_types91.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types91.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types91.default.oneOfType([import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object, import_prop_types91.default.bool])), import_prop_types91.default.func, import_prop_types91.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types91.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types91.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  init_extends();
  var React125 = __toESM(require_react());
  var import_prop_types92 = __toESM(require_prop_types());
  var import_composeClasses61 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js
  var import_generateUtilityClasses64 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass68 = __toESM(require_generateUtilityClass2());
  function getInputAdornmentUtilityClass(slot) {
    return (0, import_generateUtilityClass68.default)("MuiInputAdornment", slot);
  }
  var inputAdornmentClasses = (0, import_generateUtilityClasses64.default)("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
  var inputAdornmentClasses_default = inputAdornmentClasses;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  var _span2;
  var _excluded94 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
  var overridesResolver3 = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, styles8[`position${capitalize_default(ownerState.position)}`], ownerState.disablePointerEvents === true && styles8.disablePointerEvents, styles8[ownerState.variant]];
  };
  var useUtilityClasses59 = (ownerState) => {
    const {
      classes: classes2,
      disablePointerEvents,
      hiddenLabel,
      position: position2,
      size,
      variant
    } = ownerState;
    const slots = {
      root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize_default(position2)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize_default(size)}`]
    };
    return (0, import_composeClasses61.default)(slots, getInputAdornmentUtilityClass, classes2);
  };
  var InputAdornmentRoot = styled_default2("div", {
    name: "MuiInputAdornment",
    slot: "Root",
    overridesResolver: overridesResolver3
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    height: "0.01em",
    // Fix IE11 flexbox alignment. To remove at some point.
    maxHeight: "2em",
    alignItems: "center",
    whiteSpace: "nowrap",
    color: (theme.vars || theme).palette.action.active
  }, ownerState.variant === "filled" && {
    // Styles applied to the root element if `variant="filled"`.
    [`&.${inputAdornmentClasses_default.positionStart}&:not(.${inputAdornmentClasses_default.hiddenLabel})`]: {
      marginTop: 16
    }
  }, ownerState.position === "start" && {
    // Styles applied to the root element if `position="start"`.
    marginRight: 8
  }, ownerState.position === "end" && {
    // Styles applied to the root element if `position="end"`.
    marginLeft: 8
  }, ownerState.disablePointerEvents === true && {
    // Styles applied to the root element if `disablePointerEvents={true}`.
    pointerEvents: "none"
  }));
  var InputAdornment = /* @__PURE__ */ React125.forwardRef(function InputAdornment2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInputAdornment"
    });
    const {
      children,
      className,
      component = "div",
      disablePointerEvents = false,
      disableTypography = false,
      position: position2,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
    const muiFormControl = useFormControl() || {};
    let variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    const ownerState = _extends({}, props, {
      hiddenLabel: muiFormControl.hiddenLabel,
      size: muiFormControl.size,
      disablePointerEvents,
      position: position2,
      variant
    });
    const classes2 = useUtilityClasses59(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(FormControlContext_default.Provider, {
      value: null,
      children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(InputAdornmentRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes2.root, className),
        ref
      }, other, {
        children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Typography_default, {
          color: "text.secondary",
          children
        }) : /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(React125.Fragment, {
          children: [position2 === "start" ? (
            /* notranslate needed while Google Translate will not fix zero-width space issue */
            _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("span", {
              className: "notranslate",
              children: "\u200B"
            }))
          ) : null, children]
        })
      }))
    });
  });
  true ? InputAdornment.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `IconButton` or string.
     */
    children: import_prop_types92.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types92.default.object,
    /**
     * @ignore
     */
    className: import_prop_types92.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types92.default.elementType,
    /**
     * Disable pointer events on the root.
     * This allows for the content of the adornment to focus the `input` on click.
     * @default false
     */
    disablePointerEvents: import_prop_types92.default.bool,
    /**
     * If children is a string then disable wrapping in a Typography component.
     * @default false
     */
    disableTypography: import_prop_types92.default.bool,
    /**
     * The position this adornment should appear relative to the `Input`.
     */
    position: import_prop_types92.default.oneOf(["end", "start"]).isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types92.default.oneOfType([import_prop_types92.default.arrayOf(import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object, import_prop_types92.default.bool])), import_prop_types92.default.func, import_prop_types92.default.object]),
    /**
     * The variant to use.
     * Note: If you are using the `TextField` component or the `FormControl` component
     * you do not have to set this manually.
     */
    variant: import_prop_types92.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputAdornment_default = InputAdornment;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  init_extends();
  var React126 = __toESM(require_react());
  var import_prop_types93 = __toESM(require_prop_types());
  var import_composeClasses62 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  var import_generateUtilityClasses65 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass69 = __toESM(require_generateUtilityClass2());
  function getInputLabelUtilityClasses(slot) {
    return (0, import_generateUtilityClass69.default)("MuiInputLabel", slot);
  }
  var inputLabelClasses = (0, import_generateUtilityClasses65.default)("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
  var inputLabelClasses_default = inputLabelClasses;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  var _excluded95 = ["disableAnimation", "margin", "shrink", "variant", "className"];
  var useUtilityClasses60 = (ownerState) => {
    const {
      classes: classes2,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size && size !== "normal" && `size${capitalize_default(size)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = (0, import_composeClasses62.default)(slots, getInputLabelUtilityClasses, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var InputLabelRoot = styled_default2(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles8.asterisk
      }, styles8.root, ownerState.formControl && styles8.formControl, ownerState.size === "small" && styles8.sizeSmall, ownerState.shrink && styles8.shrink, !ownerState.disableAnimation && styles8.animated, ownerState.focused && styles8.focused, styles8[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    // Theoretically, we should have (8+5)*2/0.75 = 34px
    // but it feels a better when it bleeds a bit on the left, so 32px.
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React126.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required", "focused"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required,
      focused: fcs.focused
    });
    const classes2 = useUtilityClasses60(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx_default(classes2.root, className)
    }, other, {
      classes: classes2
    }));
  });
  true ? InputLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types93.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types93.default.object,
    /**
     * @ignore
     */
    className: import_prop_types93.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types93.default.oneOfType([import_prop_types93.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types93.default.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: import_prop_types93.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types93.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types93.default.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: import_prop_types93.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types93.default.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types93.default.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: import_prop_types93.default.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: import_prop_types93.default.oneOfType([import_prop_types93.default.oneOf(["normal", "small"]), import_prop_types93.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types93.default.oneOfType([import_prop_types93.default.arrayOf(import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object, import_prop_types93.default.bool])), import_prop_types93.default.func, import_prop_types93.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types93.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/LinearProgress/LinearProgress.js
  init_extends();
  var React127 = __toESM(require_react());
  var import_prop_types94 = __toESM(require_prop_types());
  var import_composeClasses63 = __toESM(require_composeClasses2());
  var import_colorManipulator13 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/LinearProgress/linearProgressClasses.js
  var import_generateUtilityClasses66 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass70 = __toESM(require_generateUtilityClass2());
  function getLinearProgressUtilityClass(slot) {
    return (0, import_generateUtilityClass70.default)("MuiLinearProgress", slot);
  }
  var linearProgressClasses = (0, import_generateUtilityClasses66.default)("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]);
  var linearProgressClasses_default = linearProgressClasses;

  // node_modules/@mui/material/LinearProgress/LinearProgress.js
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  var _excluded96 = ["className", "color", "value", "valueBuffer", "variant"];
  var _3 = (t2) => t2;
  var _t6;
  var _t23;
  var _t33;
  var _t43;
  var _t52;
  var _t62;
  var TRANSITION_DURATION = 4;
  var indeterminate1Keyframe = (0, import_styled_engine7.keyframes)(_t6 || (_t6 = _3`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`));
  var indeterminate2Keyframe = (0, import_styled_engine7.keyframes)(_t23 || (_t23 = _3`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`));
  var bufferKeyframe = (0, import_styled_engine7.keyframes)(_t33 || (_t33 = _3`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`));
  var useUtilityClasses61 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, variant],
      dashed: ["dashed", `dashedColor${capitalize_default(color2)}`],
      bar1: ["bar", `barColor${capitalize_default(color2)}`, (variant === "indeterminate" || variant === "query") && "bar1Indeterminate", variant === "determinate" && "bar1Determinate", variant === "buffer" && "bar1Buffer"],
      bar2: ["bar", variant !== "buffer" && `barColor${capitalize_default(color2)}`, variant === "buffer" && `color${capitalize_default(color2)}`, (variant === "indeterminate" || variant === "query") && "bar2Indeterminate", variant === "buffer" && "bar2Buffer"]
    };
    return (0, import_composeClasses63.default)(slots, getLinearProgressUtilityClass, classes2);
  };
  var getColorShade = (theme, color2) => {
    if (color2 === "inherit") {
      return "currentColor";
    }
    if (theme.vars) {
      return theme.vars.palette.LinearProgress[`${color2}Bg`];
    }
    return theme.palette.mode === "light" ? (0, import_colorManipulator13.lighten)(theme.palette[color2].main, 0.62) : (0, import_colorManipulator13.darken)(theme.palette[color2].main, 0.5);
  };
  var LinearProgressRoot = styled_default2("span", {
    name: "MuiLinearProgress",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`color${capitalize_default(ownerState.color)}`], styles8[ownerState.variant]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    position: "relative",
    overflow: "hidden",
    display: "block",
    height: 4,
    zIndex: 0,
    // Fix Safari's bug during composition of different paint.
    "@media print": {
      colorAdjust: "exact"
    },
    backgroundColor: getColorShade(theme, ownerState.color)
  }, ownerState.color === "inherit" && ownerState.variant !== "buffer" && {
    backgroundColor: "none",
    "&::before": {
      content: '""',
      position: "absolute",
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      backgroundColor: "currentColor",
      opacity: 0.3
    }
  }, ownerState.variant === "buffer" && {
    backgroundColor: "transparent"
  }, ownerState.variant === "query" && {
    transform: "rotate(180deg)"
  }));
  var LinearProgressDashed = styled_default2("span", {
    name: "MuiLinearProgress",
    slot: "Dashed",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.dashed, styles8[`dashedColor${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => {
    const backgroundColor2 = getColorShade(theme, ownerState.color);
    return _extends({
      position: "absolute",
      marginTop: 0,
      height: "100%",
      width: "100%"
    }, ownerState.color === "inherit" && {
      opacity: 0.3
    }, {
      backgroundImage: `radial-gradient(${backgroundColor2} 0%, ${backgroundColor2} 16%, transparent 42%)`,
      backgroundSize: "10px 10px",
      backgroundPosition: "0 -23px"
    });
  }, (0, import_styled_engine7.css)(_t43 || (_t43 = _3`
    animation: ${0} 3s infinite linear;
  `), bufferKeyframe));
  var LinearProgressBar1 = styled_default2("span", {
    name: "MuiLinearProgress",
    slot: "Bar1",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.bar, styles8[`barColor${capitalize_default(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles8.bar1Indeterminate, ownerState.variant === "determinate" && styles8.bar1Determinate, ownerState.variant === "buffer" && styles8.bar1Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    width: "100%",
    position: "absolute",
    left: 0,
    bottom: 0,
    top: 0,
    transition: "transform 0.2s linear",
    transformOrigin: "left",
    backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.variant === "determinate" && {
    transition: `transform .${TRANSITION_DURATION}s linear`
  }, ownerState.variant === "buffer" && {
    zIndex: 1,
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && (0, import_styled_engine7.css)(_t52 || (_t52 = _3`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), indeterminate1Keyframe));
  var LinearProgressBar2 = styled_default2("span", {
    name: "MuiLinearProgress",
    slot: "Bar2",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.bar, styles8[`barColor${capitalize_default(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles8.bar2Indeterminate, ownerState.variant === "buffer" && styles8.bar2Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    width: "100%",
    position: "absolute",
    left: 0,
    bottom: 0,
    top: 0,
    transition: "transform 0.2s linear",
    transformOrigin: "left"
  }, ownerState.variant !== "buffer" && {
    backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.color === "inherit" && {
    opacity: 0.3
  }, ownerState.variant === "buffer" && {
    backgroundColor: getColorShade(theme, ownerState.color),
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && (0, import_styled_engine7.css)(_t62 || (_t62 = _3`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), indeterminate2Keyframe));
  var LinearProgress = /* @__PURE__ */ React127.forwardRef(function LinearProgress2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiLinearProgress"
    });
    const {
      className,
      color: color2 = "primary",
      value,
      valueBuffer,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded96);
    const ownerState = _extends({}, props, {
      color: color2,
      variant
    });
    const classes2 = useUtilityClasses61(ownerState);
    const isRtl = useRtl();
    const rootProps = {};
    const inlineStyles = {
      bar1: {},
      bar2: {}
    };
    if (variant === "determinate" || variant === "buffer") {
      if (value !== void 0) {
        rootProps["aria-valuenow"] = Math.round(value);
        rootProps["aria-valuemin"] = 0;
        rootProps["aria-valuemax"] = 100;
        let transform = value - 100;
        if (isRtl) {
          transform = -transform;
        }
        inlineStyles.bar1.transform = `translateX(${transform}%)`;
      } else if (true) {
        console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
      }
    }
    if (variant === "buffer") {
      if (valueBuffer !== void 0) {
        let transform = (valueBuffer || 0) - 100;
        if (isRtl) {
          transform = -transform;
        }
        inlineStyles.bar2.transform = `translateX(${transform}%)`;
      } else if (true) {
        console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)(LinearProgressRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      role: "progressbar"
    }, rootProps, {
      ref
    }, other, {
      children: [variant === "buffer" ? /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(LinearProgressDashed, {
        className: classes2.dashed,
        ownerState
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(LinearProgressBar1, {
        className: classes2.bar1,
        ownerState,
        style: inlineStyles.bar1
      }), variant === "determinate" ? null : /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(LinearProgressBar2, {
        className: classes2.bar2,
        ownerState,
        style: inlineStyles.bar2
      })]
    }));
  });
  true ? LinearProgress.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types94.default.object,
    /**
     * @ignore
     */
    className: import_prop_types94.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["inherit", "primary", "secondary"]), import_prop_types94.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object, import_prop_types94.default.bool])), import_prop_types94.default.func, import_prop_types94.default.object]),
    /**
     * The value of the progress indicator for the determinate and buffer variants.
     * Value between 0 and 100.
     */
    value: import_prop_types94.default.number,
    /**
     * The value for the buffer variant.
     * Value between 0 and 100.
     */
    valueBuffer: import_prop_types94.default.number,
    /**
     * The variant to use.
     * Use indeterminate or query when there is no progress value.
     * @default 'indeterminate'
     */
    variant: import_prop_types94.default.oneOf(["buffer", "determinate", "indeterminate", "query"])
  } : void 0;
  var LinearProgress_default = LinearProgress;

  // node_modules/@mui/material/Link/Link.js
  init_extends();
  var React128 = __toESM(require_react());
  var import_prop_types95 = __toESM(require_prop_types());
  var import_elementTypeAcceptingRef4 = __toESM(require_elementTypeAcceptingRef2());
  var import_composeClasses64 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Link/linkClasses.js
  var import_generateUtilityClasses67 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass71 = __toESM(require_generateUtilityClass2());
  function getLinkUtilityClass(slot) {
    return (0, import_generateUtilityClass71.default)("MuiLink", slot);
  }
  var linkClasses = (0, import_generateUtilityClasses67.default)("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
  var linkClasses_default = linkClasses;

  // node_modules/@mui/material/Link/getTextDecoration.js
  var import_colorManipulator14 = __toESM(require_colorManipulator());
  var colorTransformations2 = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors2 = (color2) => {
    return colorTransformations2[color2] || color2;
  };
  var getTextDecoration = ({
    theme,
    ownerState
  }) => {
    const transformedColor = transformDeprecatedColors2(ownerState.color);
    const color2 = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;
    const channelColor = getPath(theme, `palette.${transformedColor}Channel`);
    if ("vars" in theme && channelColor) {
      return `rgba(${channelColor} / 0.4)`;
    }
    return (0, import_colorManipulator14.alpha)(color2, 0.4);
  };
  var getTextDecoration_default = getTextDecoration;

  // node_modules/@mui/material/Link/Link.js
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  var _excluded97 = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];
  var useUtilityClasses62 = (ownerState) => {
    const {
      classes: classes2,
      component,
      focusVisible,
      underline
    } = ownerState;
    const slots = {
      root: ["root", `underline${capitalize_default(underline)}`, component === "button" && "button", focusVisible && "focusVisible"]
    };
    return (0, import_composeClasses64.default)(slots, getLinkUtilityClass, classes2);
  };
  var LinkRoot = styled_default2(Typography_default, {
    name: "MuiLink",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`underline${capitalize_default(ownerState.underline)}`], ownerState.component === "button" && styles8.button];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({}, ownerState.underline === "none" && {
      textDecoration: "none"
    }, ownerState.underline === "hover" && {
      textDecoration: "none",
      "&:hover": {
        textDecoration: "underline"
      }
    }, ownerState.underline === "always" && _extends({
      textDecoration: "underline"
    }, ownerState.color !== "inherit" && {
      textDecorationColor: getTextDecoration_default({
        theme,
        ownerState
      })
    }, {
      "&:hover": {
        textDecorationColor: "inherit"
      }
    }), ownerState.component === "button" && {
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      "&::-moz-focus-inner": {
        borderStyle: "none"
        // Remove Firefox dotted outline.
      },
      [`&.${linkClasses_default.focusVisible}`]: {
        outline: "auto"
      }
    });
  });
  var Link = /* @__PURE__ */ React128.forwardRef(function Link2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiLink"
    });
    const {
      className,
      color: color2 = "primary",
      component = "a",
      onBlur,
      onFocus,
      TypographyClasses,
      underline = "always",
      variant = "inherit",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React128.useState(false);
    const handlerRef = useForkRef_default(ref, focusVisibleRef);
    const handleBlur = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    };
    const handleFocus = (event) => {
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      focusVisible,
      underline,
      variant
    });
    const classes2 = useUtilityClasses62(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(LinkRoot, _extends({
      color: color2,
      className: clsx_default(classes2.root, className),
      classes: TypographyClasses,
      component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref: handlerRef,
      ownerState,
      variant,
      sx: [...!Object.keys(colorTransformations2).includes(color2) ? [{
        color: color2
      }] : [], ...Array.isArray(sx) ? sx : [sx]]
    }, other));
  });
  true ? Link.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types95.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types95.default.object,
    /**
     * @ignore
     */
    className: import_prop_types95.default.string,
    /**
     * The color of the link.
     * @default 'primary'
     */
    color: import_prop_types95.default.any,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_elementTypeAcceptingRef4.default,
    /**
     * @ignore
     */
    onBlur: import_prop_types95.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types95.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types95.default.oneOfType([import_prop_types95.default.arrayOf(import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.object, import_prop_types95.default.bool])), import_prop_types95.default.func, import_prop_types95.default.object]),
    /**
     * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
     */
    TypographyClasses: import_prop_types95.default.object,
    /**
     * Controls when the link should have an underline.
     * @default 'always'
     */
    underline: import_prop_types95.default.oneOf(["always", "hover", "none"]),
    /**
     * Applies the theme typography styles.
     * @default 'inherit'
     */
    variant: import_prop_types95.default.oneOfType([import_prop_types95.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types95.default.string])
  } : void 0;
  var Link_default = Link;

  // node_modules/@mui/material/List/List.js
  init_extends();
  var React130 = __toESM(require_react());
  var import_prop_types96 = __toESM(require_prop_types());
  var import_composeClasses65 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/List/ListContext.js
  var React129 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React129.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/List/listClasses.js
  var import_generateUtilityClasses68 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass72 = __toESM(require_generateUtilityClass2());
  function getListUtilityClass(slot) {
    return (0, import_generateUtilityClass72.default)("MuiList", slot);
  }
  var listClasses = (0, import_generateUtilityClasses68.default)("MuiList", ["root", "padding", "dense", "subheader"]);
  var listClasses_default = listClasses;

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  var _excluded98 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses63 = (ownerState) => {
    const {
      classes: classes2,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return (0, import_composeClasses65.default)(slots, getListUtilityClass, classes2);
  };
  var ListRoot = styled_default2("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.disablePadding && styles8.padding, ownerState.dense && styles8.dense, ownerState.subheader && styles8.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React130.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded98);
    const context = React130.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes2 = useUtilityClasses63(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(ListRoot, _extends({
        as: component,
        className: clsx_default(classes2.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types96.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types96.default.object,
    /**
     * @ignore
     */
    className: import_prop_types96.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types96.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types96.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types96.default.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types96.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/ListItem/ListItem.js
  init_extends();
  var React133 = __toESM(require_react());
  var import_prop_types99 = __toESM(require_prop_types());
  var import_composeClasses68 = __toESM(require_composeClasses2());
  var import_elementTypeAcceptingRef5 = __toESM(require_elementTypeAcceptingRef2());
  var import_chainPropTypes10 = __toESM(require_chainPropTypes2());
  var import_colorManipulator16 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/ListItem/listItemClasses.js
  var import_generateUtilityClasses69 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass73 = __toESM(require_generateUtilityClass2());
  function getListItemUtilityClass(slot) {
    return (0, import_generateUtilityClass73.default)("MuiListItem", slot);
  }
  var listItemClasses = (0, import_generateUtilityClasses69.default)("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
  var listItemClasses_default = listItemClasses;

  // node_modules/@mui/material/ListItemButton/ListItemButton.js
  init_extends();
  var React131 = __toESM(require_react());
  var import_prop_types97 = __toESM(require_prop_types());
  var import_composeClasses66 = __toESM(require_composeClasses2());
  var import_colorManipulator15 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/ListItemButton/listItemButtonClasses.js
  var import_generateUtilityClasses70 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass74 = __toESM(require_generateUtilityClass2());
  function getListItemButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass74.default)("MuiListItemButton", slot);
  }
  var listItemButtonClasses = (0, import_generateUtilityClasses70.default)("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
  var listItemButtonClasses_default = listItemButtonClasses;

  // node_modules/@mui/material/ListItemButton/ListItemButton.js
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var _excluded99 = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
  var overridesResolver4 = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, ownerState.dense && styles8.dense, ownerState.alignItems === "flex-start" && styles8.alignItemsFlexStart, ownerState.divider && styles8.divider, !ownerState.disableGutters && styles8.gutters];
  };
  var useUtilityClasses64 = (ownerState) => {
    const {
      alignItems,
      classes: classes2,
      dense,
      disabled,
      disableGutters,
      divider,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", divider && "divider", disabled && "disabled", alignItems === "flex-start" && "alignItemsFlexStart", selected && "selected"]
    };
    const composedClasses = (0, import_composeClasses66.default)(slots, getListItemButtonUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var ListItemButtonRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiListItemButton",
    slot: "Root",
    overridesResolver: overridesResolver4
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexGrow: 1,
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minWidth: 0,
    boxSizing: "border-box",
    textAlign: "left",
    paddingTop: 8,
    paddingBottom: 8,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemButtonClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator15.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${listItemButtonClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator15.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator15.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator15.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${listItemButtonClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }));
  var ListItemButton = /* @__PURE__ */ React131.forwardRef(function ListItemButton2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemButton"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      component = "div",
      children,
      dense = false,
      disableGutters = false,
      divider = false,
      focusVisibleClassName,
      selected = false,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded99);
    const context = React131.useContext(ListContext_default);
    const childContext = React131.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React131.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      alignItems,
      dense: childContext.dense,
      disableGutters,
      divider,
      selected
    });
    const classes2 = useUtilityClasses64(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(ListItemButtonRoot, _extends({
        ref: handleRef,
        href: other.href || other.to,
        component: (other.href || other.to) && component === "div" ? "button" : component,
        focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
        ownerState,
        className: clsx_default(classes2.root, className)
      }, other, {
        classes: classes2,
        children
      }))
    });
  });
  true ? ListItemButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types97.default.oneOf(["center", "flex-start"]),
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types97.default.bool,
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: import_prop_types97.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types97.default.object,
    /**
     * @ignore
     */
    className: import_prop_types97.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types97.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types97.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types97.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types97.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types97.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types97.default.string,
    /**
     * @ignore
     */
    href: import_prop_types97.default.string,
    /**
     * Use to apply selected styling.
     * @default false
     */
    selected: import_prop_types97.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object, import_prop_types97.default.bool])), import_prop_types97.default.func, import_prop_types97.default.object])
  } : void 0;
  var ListItemButton_default = ListItemButton;

  // node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  init_extends();
  var React132 = __toESM(require_react());
  var import_prop_types98 = __toESM(require_prop_types());
  var import_composeClasses67 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js
  var import_generateUtilityClasses71 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass75 = __toESM(require_generateUtilityClass2());
  function getListItemSecondaryActionClassesUtilityClass(slot) {
    return (0, import_generateUtilityClass75.default)("MuiListItemSecondaryAction", slot);
  }
  var listItemSecondaryActionClasses = (0, import_generateUtilityClasses71.default)("MuiListItemSecondaryAction", ["root", "disableGutters"]);
  var listItemSecondaryActionClasses_default = listItemSecondaryActionClasses;

  // node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  var _excluded100 = ["className"];
  var useUtilityClasses65 = (ownerState) => {
    const {
      disableGutters,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", disableGutters && "disableGutters"]
    };
    return (0, import_composeClasses67.default)(slots, getListItemSecondaryActionClassesUtilityClass, classes2);
  };
  var ListItemSecondaryActionRoot = styled_default2("div", {
    name: "MuiListItemSecondaryAction",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.disableGutters && styles8.disableGutters];
    }
  })(({
    ownerState
  }) => _extends({
    position: "absolute",
    right: 16,
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.disableGutters && {
    right: 0
  }));
  var ListItemSecondaryAction = /* @__PURE__ */ React132.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemSecondaryAction"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
    const context = React132.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      disableGutters: context.disableGutters
    });
    const classes2 = useUtilityClasses65(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(ListItemSecondaryActionRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemSecondaryAction.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `IconButton` or selection control.
     */
    children: import_prop_types98.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types98.default.object,
    /**
     * @ignore
     */
    className: import_prop_types98.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types98.default.oneOfType([import_prop_types98.default.arrayOf(import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object, import_prop_types98.default.bool])), import_prop_types98.default.func, import_prop_types98.default.object])
  } : void 0;
  ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
  var ListItemSecondaryAction_default = ListItemSecondaryAction;

  // node_modules/@mui/material/ListItem/ListItem.js
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var _excluded101 = ["className"];
  var _excluded213 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
  var overridesResolver5 = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, ownerState.dense && styles8.dense, ownerState.alignItems === "flex-start" && styles8.alignItemsFlexStart, ownerState.divider && styles8.divider, !ownerState.disableGutters && styles8.gutters, !ownerState.disablePadding && styles8.padding, ownerState.button && styles8.button, ownerState.hasSecondaryAction && styles8.secondaryAction];
  };
  var useUtilityClasses66 = (ownerState) => {
    const {
      alignItems,
      button,
      classes: classes2,
      dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", disabled && "disabled", button && "button", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction", selected && "selected"],
      container: ["container"]
    };
    return (0, import_composeClasses68.default)(slots, getListItemUtilityClass, classes2);
  };
  var ListItemRoot = styled_default2("div", {
    name: "MuiListItem",
    slot: "Root",
    overridesResolver: overridesResolver5
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    width: "100%",
    boxSizing: "border-box",
    textAlign: "left"
  }, !ownerState.disablePadding && _extends({
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, !!ownerState.secondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }), !!ownerState.secondaryAction && {
    [`& > .${listItemButtonClasses_default.root}`]: {
      paddingRight: 48
    }
  }, {
    [`&.${listItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${listItemClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator16.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${listItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator16.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${listItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.button && {
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator16.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator16.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    }
  }, ownerState.hasSecondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }));
  var ListItemContainer = styled_default2("li", {
    name: "MuiListItem",
    slot: "Container",
    overridesResolver: (props, styles8) => styles8.container
  })({
    position: "relative"
  });
  var ListItem = /* @__PURE__ */ React133.forwardRef(function ListItem2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItem"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      button = false,
      children: childrenProp,
      className,
      component: componentProp,
      components = {},
      componentsProps = {},
      ContainerComponent = "li",
      ContainerProps: {
        className: ContainerClassName
      } = {},
      dense = false,
      disabled = false,
      disableGutters = false,
      disablePadding = false,
      divider = false,
      focusVisibleClassName,
      secondaryAction,
      selected = false,
      slotProps = {},
      slots = {}
    } = props, ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded101), other = _objectWithoutPropertiesLoose(props, _excluded213);
    const context = React133.useContext(ListContext_default);
    const childContext = React133.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React133.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const children = React133.Children.toArray(childrenProp);
    const hasSecondaryAction = children.length && isMuiElement_default(children[children.length - 1], ["ListItemSecondaryAction"]);
    const ownerState = _extends({}, props, {
      alignItems,
      autoFocus,
      button,
      dense: childContext.dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    });
    const classes2 = useUtilityClasses66(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    const Root = slots.root || components.Root || ListItemRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const componentProps = _extends({
      className: clsx_default(classes2.root, rootProps.className, className),
      disabled
    }, other);
    let Component2 = componentProp || "li";
    if (button) {
      componentProps.component = componentProp || "div";
      componentProps.focusVisibleClassName = clsx_default(listItemClasses_default.focusVisible, focusVisibleClassName);
      Component2 = ButtonBase_default;
    }
    if (hasSecondaryAction) {
      Component2 = !componentProps.component && !componentProp ? "div" : Component2;
      if (ContainerComponent === "li") {
        if (Component2 === "li") {
          Component2 = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(ListContext_default.Provider, {
        value: childContext,
        children: /* @__PURE__ */ (0, import_jsx_runtime132.jsxs)(ListItemContainer, _extends({
          as: ContainerComponent,
          className: clsx_default(classes2.container, ContainerClassName),
          ref: handleRef,
          ownerState
        }, ContainerProps, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime131.jsx)(Root, _extends({}, rootProps, !isHostComponent(Root) && {
            as: Component2,
            ownerState: _extends({}, ownerState, rootProps.ownerState)
          }, componentProps, {
            children
          })), children.pop()]
        }))
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime132.jsxs)(Root, _extends({}, rootProps, {
        as: Component2,
        ref: handleRef
      }, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, componentProps, {
        children: [children, secondaryAction && /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(ListItemSecondaryAction_default, {
          children: secondaryAction
        })]
      }))
    });
  });
  true ? ListItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types99.default.oneOf(["center", "flex-start"]),
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    autoFocus: import_prop_types99.default.bool,
    /**
     * If `true`, the list item is a button (using `ButtonBase`). Props intended
     * for `ButtonBase` can then be applied to `ListItem`.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    button: import_prop_types99.default.bool,
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: (0, import_chainPropTypes10.default)(import_prop_types99.default.node, (props) => {
      const children = React133.Children.toArray(props.children);
      let secondaryActionIndex = -1;
      for (let i2 = children.length - 1; i2 >= 0; i2 -= 1) {
        const child = children[i2];
        if (isMuiElement_default(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i2;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types99.default.object,
    /**
     * @ignore
     */
    className: import_prop_types99.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types99.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types99.default.shape({
      Root: import_prop_types99.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types99.default.shape({
      root: import_prop_types99.default.object
    }),
    /**
     * The container component used when a `ListItemSecondaryAction` is the last child.
     * @default 'li'
     * @deprecated
     */
    ContainerComponent: import_elementTypeAcceptingRef5.default,
    /**
     * Props applied to the container component if used.
     * @default {}
     * @deprecated
     */
    ContainerProps: import_prop_types99.default.object,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types99.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    disabled: import_prop_types99.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types99.default.bool,
    /**
     * If `true`, all padding is removed.
     * @default false
     */
    disablePadding: import_prop_types99.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types99.default.bool,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types99.default.string,
    /**
     * The element to display at the end of ListItem.
     */
    secondaryAction: import_prop_types99.default.node,
    /**
     * Use to apply selected styling.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    selected: import_prop_types99.default.bool,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types99.default.shape({
      root: import_prop_types99.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types99.default.shape({
      root: import_prop_types99.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types99.default.oneOfType([import_prop_types99.default.arrayOf(import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object, import_prop_types99.default.bool])), import_prop_types99.default.func, import_prop_types99.default.object])
  } : void 0;
  var ListItem_default = ListItem;

  // node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
  init_extends();
  var React134 = __toESM(require_react());
  var import_prop_types100 = __toESM(require_prop_types());
  var import_composeClasses69 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js
  var import_generateUtilityClasses72 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass76 = __toESM(require_generateUtilityClass2());
  function getListItemAvatarUtilityClass(slot) {
    return (0, import_generateUtilityClass76.default)("MuiListItemAvatar", slot);
  }
  var listItemAvatarClasses = (0, import_generateUtilityClasses72.default)("MuiListItemAvatar", ["root", "alignItemsFlexStart"]);
  var listItemAvatarClasses_default = listItemAvatarClasses;

  // node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  var _excluded102 = ["className"];
  var useUtilityClasses67 = (ownerState) => {
    const {
      alignItems,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return (0, import_composeClasses69.default)(slots, getListItemAvatarUtilityClass, classes2);
  };
  var ListItemAvatarRoot = styled_default2("div", {
    name: "MuiListItemAvatar",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.alignItems === "flex-start" && styles8.alignItemsFlexStart];
    }
  })(({
    ownerState
  }) => _extends({
    minWidth: 56,
    flexShrink: 0
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemAvatar = /* @__PURE__ */ React134.forwardRef(function ListItemAvatar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemAvatar"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded102);
    const context = React134.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes2 = useUtilityClasses67(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(ListItemAvatarRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemAvatar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `Avatar`.
     */
    children: import_prop_types100.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types100.default.object,
    /**
     * @ignore
     */
    className: import_prop_types100.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types100.default.oneOfType([import_prop_types100.default.arrayOf(import_prop_types100.default.oneOfType([import_prop_types100.default.func, import_prop_types100.default.object, import_prop_types100.default.bool])), import_prop_types100.default.func, import_prop_types100.default.object])
  } : void 0;
  var ListItemAvatar_default = ListItemAvatar;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  init_extends();
  var React135 = __toESM(require_react());
  var import_prop_types101 = __toESM(require_prop_types());
  var import_composeClasses70 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  var import_generateUtilityClasses73 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass77 = __toESM(require_generateUtilityClass2());
  function getListItemIconUtilityClass(slot) {
    return (0, import_generateUtilityClass77.default)("MuiListItemIcon", slot);
  }
  var listItemIconClasses = (0, import_generateUtilityClasses73.default)("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  var listItemIconClasses_default = listItemIconClasses;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  var _excluded103 = ["className"];
  var useUtilityClasses68 = (ownerState) => {
    const {
      alignItems,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return (0, import_composeClasses70.default)(slots, getListItemIconUtilityClass, classes2);
  };
  var ListItemIconRoot = styled_default2("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.alignItems === "flex-start" && styles8.alignItemsFlexStart];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: (theme.vars || theme).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemIcon = /* @__PURE__ */ React135.forwardRef(function ListItemIcon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded103);
    const context = React135.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes2 = useUtilityClasses68(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ListItemIconRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: import_prop_types101.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types101.default.object,
    /**
     * @ignore
     */
    className: import_prop_types101.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types101.default.oneOfType([import_prop_types101.default.arrayOf(import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object, import_prop_types101.default.bool])), import_prop_types101.default.func, import_prop_types101.default.object])
  } : void 0;
  var ListItemIcon_default = ListItemIcon;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  init_extends();
  var React136 = __toESM(require_react());
  var import_prop_types102 = __toESM(require_prop_types());
  var import_composeClasses71 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ListItemText/listItemTextClasses.js
  var import_generateUtilityClasses74 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass78 = __toESM(require_generateUtilityClass2());
  function getListItemTextUtilityClass(slot) {
    return (0, import_generateUtilityClass78.default)("MuiListItemText", slot);
  }
  var listItemTextClasses = (0, import_generateUtilityClasses74.default)("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  var _excluded104 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  var useUtilityClasses69 = (ownerState) => {
    const {
      classes: classes2,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return (0, import_composeClasses71.default)(slots, getListItemTextUtilityClass, classes2);
  };
  var ListItemTextRoot = styled_default2("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles8.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles8.secondary
      }, styles8.root, ownerState.inset && styles8.inset, ownerState.primary && ownerState.secondary && styles8.multiline, ownerState.dense && styles8.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  var ListItemText = /* @__PURE__ */ React136.forwardRef(function ListItemText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
    const {
      dense
    } = React136.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes2 = useUtilityClasses69(ownerState);
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes2.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(Typography_default, _extends({
        variant: "body2",
        className: classes2.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsxs)(ListItemTextRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  true ? ListItemText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Alias for the `primary` prop.
     */
    children: import_prop_types102.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types102.default.object,
    /**
     * @ignore
     */
    className: import_prop_types102.default.string,
    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types102.default.bool,
    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: import_prop_types102.default.bool,
    /**
     * The main content element.
     */
    primary: import_prop_types102.default.node,
    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     */
    primaryTypographyProps: import_prop_types102.default.object,
    /**
     * The secondary content element.
     */
    secondary: import_prop_types102.default.node,
    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     */
    secondaryTypographyProps: import_prop_types102.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types102.default.oneOfType([import_prop_types102.default.arrayOf(import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object, import_prop_types102.default.bool])), import_prop_types102.default.func, import_prop_types102.default.object])
  } : void 0;
  var ListItemText_default = ListItemText;

  // node_modules/@mui/material/Menu/Menu.js
  init_extends();
  var React139 = __toESM(require_react());
  var import_react_is7 = __toESM(require_react_is3());
  var import_prop_types105 = __toESM(require_prop_types());
  var import_composeClasses73 = __toESM(require_composeClasses2());
  var import_HTMLElementType5 = __toESM(require_HTMLElementType2());

  // node_modules/@mui/material/MenuList/MenuList.js
  init_extends();
  var React137 = __toESM(require_react());
  var import_react_is6 = __toESM(require_react_is3());
  var import_prop_types103 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/ownerDocument.js
  var import_ownerDocument = __toESM(require_ownerDocument2());
  var ownerDocument_default = import_ownerDocument.default;

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var import_getScrollbarSize = __toESM(require_getScrollbarSize2());
  var getScrollbarSize_default = import_getScrollbarSize.default;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var _excluded105 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React137.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded105);
    const listRef = React137.useRef(null);
    const textCriteriaRef = React137.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React137.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, {
        direction: direction2
      }) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[direction2 === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React137.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React137.isValidElement(child)) {
        if (activeItemIndex === index) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (true) {
        if ((0, import_react_is6.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
      if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React137.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React137.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: import_prop_types103.default.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: import_prop_types103.default.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: import_prop_types103.default.node,
    /**
     * @ignore
     */
    className: import_prop_types103.default.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types103.default.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types103.default.bool,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types103.default.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: import_prop_types103.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/material/Popover/Popover.js
  init_extends();
  var React138 = __toESM(require_react());
  var import_prop_types104 = __toESM(require_prop_types());
  var import_composeClasses72 = __toESM(require_composeClasses2());
  var import_HTMLElementType4 = __toESM(require_HTMLElementType2());
  var import_refType9 = __toESM(require_refType2());
  var import_elementTypeAcceptingRef6 = __toESM(require_elementTypeAcceptingRef2());
  var import_integerPropType7 = __toESM(require_integerPropType2());
  var import_chainPropTypes11 = __toESM(require_chainPropTypes2());

  // node_modules/@mui/material/utils/ownerWindow.js
  var import_ownerWindow = __toESM(require_ownerWindow2());
  var ownerWindow_default = import_ownerWindow.default;

  // node_modules/@mui/material/Popover/popoverClasses.js
  var import_generateUtilityClasses75 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass79 = __toESM(require_generateUtilityClass2());
  function getPopoverUtilityClass(slot) {
    return (0, import_generateUtilityClass79.default)("MuiPopover", slot);
  }
  var popoverClasses = (0, import_generateUtilityClasses75.default)("MuiPopover", ["root", "paper"]);
  var popoverClasses_default = popoverClasses;

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  var _excluded106 = ["onEntering"];
  var _excluded214 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"];
  var _excluded311 = ["slotProps"];
  function getOffsetTop(rect, vertical) {
    let offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n2) => typeof n2 === "number" ? `${n2}px` : n2).join(" ");
  }
  function resolveAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses70 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return (0, import_composeClasses72.default)(slots, getPopoverUtilityClass, classes2);
  };
  var PopoverRoot = styled_default2(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({});
  var PopoverPaper = styled_default2(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles8) => styles8.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /* @__PURE__ */ React138.forwardRef(function Popover2(inProps, ref) {
    var _slotProps$paper, _slots$root, _slots$paper;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      slots,
      slotProps,
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {},
      disableScrollLock = false
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded106), other = _objectWithoutPropertiesLoose(props, _excluded214);
    const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
    const paperRef = React138.useRef();
    const handlePaperRef = useForkRef_default(paperRef, externalPaperSlotProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      externalPaperSlotProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes2 = useUtilityClasses70(ownerState);
    const getAnchorOffset = React138.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl2(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React138.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React138.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl2(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React138.useState(open);
    const setPositioningStyles = React138.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React138.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React138.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React138.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React138.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl2(anchorEl)).body : void 0);
    const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
    const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
    const paperProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: _extends({}, externalPaperSlotProps, {
        style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
          opacity: 0
        })
      }),
      additionalProps: {
        elevation,
        ref: handlePaperRef
      },
      ownerState,
      className: clsx_default(classes2.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
    });
    const _useSlotProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
      externalForwardedProps: other,
      additionalProps: {
        ref,
        slotProps: {
          backdrop: {
            invisible: true
          }
        },
        container,
        open
      },
      ownerState,
      className: clsx_default(classes2.root, className)
    }), {
      slotProps: rootSlotPropsProp
    } = _useSlotProps, rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded311);
    return /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(RootSlot, _extends({}, rootProps, !isHostComponent(RootSlot) && {
      slotProps: rootSlotPropsProp,
      disableScrollLock
    }, {
      children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(PaperSlot, _extends({}, paperProps, {
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: import_refType9.default,
    /**
     * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: (0, import_chainPropTypes11.default)(import_prop_types104.default.oneOfType([import_HTMLElementType4.default, import_prop_types104.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: import_prop_types104.default.shape({
      horizontal: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["center", "left", "right"]), import_prop_types104.default.number]).isRequired,
      vertical: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["bottom", "center", "top"]), import_prop_types104.default.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: import_prop_types104.default.shape({
      left: import_prop_types104.default.number.isRequired,
      top: import_prop_types104.default.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: import_prop_types104.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: import_prop_types104.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types104.default.object,
    /**
     * @ignore
     */
    className: import_prop_types104.default.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types104.default.oneOfType([import_HTMLElementType4.default, import_prop_types104.default.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types104.default.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: import_integerPropType7.default,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: import_prop_types104.default.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: import_prop_types104.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types104.default.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: import_prop_types104.default.shape({
      component: import_elementTypeAcceptingRef6.default
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types104.default.shape({
      paper: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
      root: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types104.default.shape({
      paper: import_prop_types104.default.elementType,
      root: import_prop_types104.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types104.default.oneOfType([import_prop_types104.default.arrayOf(import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object, import_prop_types104.default.bool])), import_prop_types104.default.func, import_prop_types104.default.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: import_prop_types104.default.shape({
      horizontal: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["center", "left", "right"]), import_prop_types104.default.number]).isRequired,
      vertical: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["bottom", "center", "top"]), import_prop_types104.default.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types104.default.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["auto"]), import_prop_types104.default.number, import_prop_types104.default.shape({
      appear: import_prop_types104.default.number,
      enter: import_prop_types104.default.number,
      exit: import_prop_types104.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types104.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  var import_generateUtilityClasses76 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass80 = __toESM(require_generateUtilityClass2());
  function getMenuUtilityClass(slot) {
    return (0, import_generateUtilityClass80.default)("MuiMenu", slot);
  }
  var menuClasses = (0, import_generateUtilityClasses76.default)("MuiMenu", ["root", "paper", "list"]);
  var menuClasses_default = menuClasses;

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  var _excluded107 = ["onEntering"];
  var _excluded215 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses71 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return (0, import_composeClasses73.default)(slots, getMenuUtilityClass, classes2);
  };
  var MenuRoot = styled_default2(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({});
  var MenuPaper = styled_default2(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles8) => styles8.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default2(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles8) => styles8.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu = /* @__PURE__ */ React139.forwardRef(function Menu2(inProps, ref) {
    var _slots$paper, _slotProps$paper;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded107), other = _objectWithoutPropertiesLoose(props, _excluded215);
    const isRtl = useRtl();
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes2 = useUtilityClasses71(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React139.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, {
          direction: isRtl ? "rtl" : "ltr"
        });
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React139.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React139.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is7.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
    const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
    const rootSlotProps = useSlotProps({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes2.root, className]
    });
    const paperSlotProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: paperExternalSlotProps,
      ownerState,
      className: classes2.paper
    });
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(MenuRoot, _extends({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        paper: PaperSlot,
        root: slots.root
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps
      },
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_default(classes2.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: import_prop_types105.default.oneOfType([import_HTMLElementType5.default, import_prop_types105.default.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: import_prop_types105.default.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: import_prop_types105.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types105.default.object,
    /**
     * @ignore
     */
    className: import_prop_types105.default.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: import_prop_types105.default.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: import_prop_types105.default.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: import_prop_types105.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types105.default.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: import_prop_types105.default.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: import_prop_types105.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types105.default.shape({
      paper: import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object]),
      root: import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types105.default.shape({
      paper: import_prop_types105.default.elementType,
      root: import_prop_types105.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types105.default.oneOfType([import_prop_types105.default.arrayOf(import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object, import_prop_types105.default.bool])), import_prop_types105.default.func, import_prop_types105.default.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: import_prop_types105.default.oneOfType([import_prop_types105.default.oneOf(["auto"]), import_prop_types105.default.number, import_prop_types105.default.shape({
      appear: import_prop_types105.default.number,
      enter: import_prop_types105.default.number,
      exit: import_prop_types105.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types105.default.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: import_prop_types105.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  init_extends();
  var React140 = __toESM(require_react());
  var import_prop_types106 = __toESM(require_prop_types());
  var import_composeClasses74 = __toESM(require_composeClasses2());
  var import_colorManipulator17 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/MenuItem/menuItemClasses.js
  var import_generateUtilityClasses77 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass81 = __toESM(require_generateUtilityClass2());
  function getMenuItemUtilityClass(slot) {
    return (0, import_generateUtilityClass81.default)("MuiMenuItem", slot);
  }
  var menuItemClasses = (0, import_generateUtilityClasses77.default)("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  var menuItemClasses_default = menuItemClasses;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var _excluded108 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
  var overridesResolver6 = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, ownerState.dense && styles8.dense, ownerState.divider && styles8.divider, !ownerState.disableGutters && styles8.gutters];
  };
  var useUtilityClasses72 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = (0, import_composeClasses74.default)(slots, getMenuItemUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var MenuItemRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver: overridesResolver6
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator17.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator17.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator17.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator17.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${menuItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    // https://m2.material.io/components/menus#specs > Dense
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses_default.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  var MenuItem = /* @__PURE__ */ React140.forwardRef(function MenuItem2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded108);
    const context = React140.useContext(ListContext_default);
    const childContext = React140.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React140.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes2 = useUtilityClasses72(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(MenuItemRoot, _extends({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_default(classes2.focusVisible, focusVisibleClassName),
        className: clsx_default(classes2.root, className)
      }, other, {
        ownerState,
        classes: classes2
      }))
    });
  });
  true ? MenuItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types106.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types106.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types106.default.object,
    /**
     * @ignore
     */
    className: import_prop_types106.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types106.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: import_prop_types106.default.bool,
    /**
     * @ignore
     */
    disabled: import_prop_types106.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types106.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: import_prop_types106.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types106.default.string,
    /**
     * @ignore
     */
    role: import_prop_types106.default.string,
    /**
     * If `true`, the component is selected.
     * @default false
     */
    selected: import_prop_types106.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types106.default.oneOfType([import_prop_types106.default.arrayOf(import_prop_types106.default.oneOfType([import_prop_types106.default.func, import_prop_types106.default.object, import_prop_types106.default.bool])), import_prop_types106.default.func, import_prop_types106.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types106.default.number
  } : void 0;
  var MenuItem_default = MenuItem;

  // node_modules/@mui/material/MobileStepper/MobileStepper.js
  init_extends();
  var React141 = __toESM(require_react());
  var import_prop_types107 = __toESM(require_prop_types());
  var import_integerPropType8 = __toESM(require_integerPropType2());
  var import_composeClasses75 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/MobileStepper/mobileStepperClasses.js
  var import_generateUtilityClasses78 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass82 = __toESM(require_generateUtilityClass2());
  function getMobileStepperUtilityClass(slot) {
    return (0, import_generateUtilityClass82.default)("MuiMobileStepper", slot);
  }
  var mobileStepperClasses = (0, import_generateUtilityClasses78.default)("MuiMobileStepper", ["root", "positionBottom", "positionTop", "positionStatic", "dots", "dot", "dotActive", "progress"]);
  var mobileStepperClasses_default = mobileStepperClasses;

  // node_modules/@mui/material/MobileStepper/MobileStepper.js
  var import_jsx_runtime141 = __toESM(require_jsx_runtime());
  var import_jsx_runtime142 = __toESM(require_jsx_runtime());
  var _excluded109 = ["activeStep", "backButton", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"];
  var useUtilityClasses73 = (ownerState) => {
    const {
      classes: classes2,
      position: position2
    } = ownerState;
    const slots = {
      root: ["root", `position${capitalize_default(position2)}`],
      dots: ["dots"],
      dot: ["dot"],
      dotActive: ["dotActive"],
      progress: ["progress"]
    };
    return (0, import_composeClasses75.default)(slots, getMobileStepperUtilityClass, classes2);
  };
  var MobileStepperRoot = styled_default2(Paper_default, {
    name: "MuiMobileStepper",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`position${capitalize_default(ownerState.position)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    background: (theme.vars || theme).palette.background.default,
    padding: 8
  }, ownerState.position === "bottom" && {
    position: "fixed",
    bottom: 0,
    left: 0,
    right: 0,
    zIndex: (theme.vars || theme).zIndex.mobileStepper
  }, ownerState.position === "top" && {
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    zIndex: (theme.vars || theme).zIndex.mobileStepper
  }));
  var MobileStepperDots = styled_default2("div", {
    name: "MuiMobileStepper",
    slot: "Dots",
    overridesResolver: (props, styles8) => styles8.dots
  })(({
    ownerState
  }) => _extends({}, ownerState.variant === "dots" && {
    display: "flex",
    flexDirection: "row"
  }));
  var MobileStepperDot = styled_default2("div", {
    name: "MuiMobileStepper",
    slot: "Dot",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "dotActive",
    overridesResolver: (props, styles8) => {
      const {
        dotActive
      } = props;
      return [styles8.dot, dotActive && styles8.dotActive];
    }
  })(({
    theme,
    ownerState,
    dotActive
  }) => _extends({}, ownerState.variant === "dots" && _extends({
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: (theme.vars || theme).palette.action.disabled,
    borderRadius: "50%",
    width: 8,
    height: 8,
    margin: "0 2px"
  }, dotActive && {
    backgroundColor: (theme.vars || theme).palette.primary.main
  })));
  var MobileStepperProgress = styled_default2(LinearProgress_default, {
    name: "MuiMobileStepper",
    slot: "Progress",
    overridesResolver: (props, styles8) => styles8.progress
  })(({
    ownerState
  }) => _extends({}, ownerState.variant === "progress" && {
    width: "50%"
  }));
  var MobileStepper = /* @__PURE__ */ React141.forwardRef(function MobileStepper2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMobileStepper"
    });
    const {
      activeStep = 0,
      backButton,
      className,
      LinearProgressProps,
      nextButton,
      position: position2 = "bottom",
      steps,
      variant = "dots"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded109);
    const ownerState = _extends({}, props, {
      activeStep,
      position: position2,
      variant
    });
    let value;
    if (variant === "progress") {
      if (steps === 1) {
        value = 100;
      } else {
        value = Math.ceil(activeStep / (steps - 1) * 100);
      }
    }
    const classes2 = useUtilityClasses73(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(MobileStepperRoot, _extends({
      square: true,
      elevation: 0,
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: [backButton, variant === "text" && /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(React141.Fragment, {
        children: [activeStep + 1, " / ", steps]
      }), variant === "dots" && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(MobileStepperDots, {
        ownerState,
        className: classes2.dots,
        children: [...new Array(steps)].map((_5, index) => /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(MobileStepperDot, {
          className: clsx_default(classes2.dot, index === activeStep && classes2.dotActive),
          ownerState,
          dotActive: index === activeStep
        }, index))
      }), variant === "progress" && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(MobileStepperProgress, _extends({
        ownerState,
        className: classes2.progress,
        variant: "determinate",
        value
      }, LinearProgressProps)), nextButton]
    }));
  });
  true ? MobileStepper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the active step (zero based index).
     * Defines which dot is highlighted when the variant is 'dots'.
     * @default 0
     */
    activeStep: import_integerPropType8.default,
    /**
     * A back button element. For instance, it can be a `Button` or an `IconButton`.
     */
    backButton: import_prop_types107.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types107.default.object,
    /**
     * @ignore
     */
    className: import_prop_types107.default.string,
    /**
     * Props applied to the `LinearProgress` element.
     */
    LinearProgressProps: import_prop_types107.default.object,
    /**
     * A next button element. For instance, it can be a `Button` or an `IconButton`.
     */
    nextButton: import_prop_types107.default.node,
    /**
     * Set the positioning type.
     * @default 'bottom'
     */
    position: import_prop_types107.default.oneOf(["bottom", "static", "top"]),
    /**
     * The total steps.
     */
    steps: import_integerPropType8.default.isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types107.default.oneOfType([import_prop_types107.default.arrayOf(import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object, import_prop_types107.default.bool])), import_prop_types107.default.func, import_prop_types107.default.object]),
    /**
     * The variant to use.
     * @default 'dots'
     */
    variant: import_prop_types107.default.oneOf(["dots", "progress", "text"])
  } : void 0;
  var MobileStepper_default = MobileStepper;

  // node_modules/@mui/material/NativeSelect/NativeSelect.js
  init_extends();
  var React143 = __toESM(require_react());
  var import_prop_types109 = __toESM(require_prop_types());
  var import_composeClasses77 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  init_extends();
  var React142 = __toESM(require_react());
  var import_prop_types108 = __toESM(require_prop_types());
  var import_refType10 = __toESM(require_refType2());
  var import_composeClasses76 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  var import_generateUtilityClasses79 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass83 = __toESM(require_generateUtilityClass2());
  function getNativeSelectUtilityClasses(slot) {
    return (0, import_generateUtilityClass83.default)("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = (0, import_generateUtilityClasses79.default)("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime143 = __toESM(require_jsx_runtime());
  var import_jsx_runtime144 = __toESM(require_jsx_runtime());
  var _excluded110 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses74 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return (0, import_composeClasses76.default)(slots, getNativeSelectUtilityClasses, classes2);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default2("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp_default,
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.select, styles8[ownerState.variant], ownerState.error && styles8.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles8.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default2("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.icon, ownerState.variant && styles8[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles8.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React142.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded110);
    const ownerState = _extends({}, props, {
      disabled,
      variant,
      error
    });
    const classes2 = useUtilityClasses74(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(React142.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime143.jsx)(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_default(classes2.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes2.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types108.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types108.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types108.default.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types108.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types108.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types108.default.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: import_refType10.default,
    /**
     * @ignore
     */
    multiple: import_prop_types108.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types108.default.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types108.default.func,
    /**
     * The input value.
     */
    value: import_prop_types108.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types108.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/NativeSelect/NativeSelect.js
  var import_jsx_runtime145 = __toESM(require_jsx_runtime());
  var _excluded111 = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"];
  var _excluded216 = ["root"];
  var useUtilityClasses75 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses77.default)(slots, getNativeSelectUtilityClasses, classes2);
  };
  var defaultInput = /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(Input_default, {});
  var NativeSelect = /* @__PURE__ */ React143.forwardRef(function NativeSelect2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiNativeSelect",
      props: inProps
    });
    const {
      className,
      children,
      classes: classesProp = {},
      IconComponent = ArrowDropDown_default,
      input = defaultInput,
      inputProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded111);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    const ownerState = _extends({}, props, {
      classes: classesProp
    });
    const classes2 = useUtilityClasses75(ownerState);
    const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded216);
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(React143.Fragment, {
      children: /* @__PURE__ */ React143.cloneElement(input, _extends({
        // Most of the logic is implemented in `NativeSelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: NativeSelectInput_default,
        inputProps: _extends({
          children,
          classes: otherClasses,
          IconComponent,
          variant: fcs.variant,
          type: void 0
        }, inputProps, input ? input.props.inputProps : {}),
        ref
      }, other, {
        className: clsx_default(classes2.root, input.props.className, className)
      }))
    });
  });
  true ? NativeSelect.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types109.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types109.default.object,
    /**
     * @ignore
     */
    className: import_prop_types109.default.string,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types109.default.elementType,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     * @default <Input />
     */
    input: import_prop_types109.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
     */
    inputProps: import_prop_types109.default.object,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types109.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types109.default.oneOfType([import_prop_types109.default.arrayOf(import_prop_types109.default.oneOfType([import_prop_types109.default.func, import_prop_types109.default.object, import_prop_types109.default.bool])), import_prop_types109.default.func, import_prop_types109.default.object]),
    /**
     * The `input` value. The DOM API casts this to a string.
     */
    value: import_prop_types109.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types109.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  NativeSelect.muiName = "Select";
  var NativeSelect_default = NativeSelect;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  init_extends();
  var React145 = __toESM(require_react());
  var import_prop_types111 = __toESM(require_prop_types());
  var import_refType11 = __toESM(require_refType2());
  var import_composeClasses78 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  init_extends();
  var React144 = __toESM(require_react());
  var import_prop_types110 = __toESM(require_prop_types());
  var import_jsx_runtime146 = __toESM(require_jsx_runtime());
  var _span3;
  var _excluded112 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default2("fieldset", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default2("legend", {
    shouldForwardProp: rootShouldForwardProp_default
  })(({
    ownerState,
    theme
  }) => _extends({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded112);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        )
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types110.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types110.default.object,
    /**
     * @ignore
     */
    className: import_prop_types110.default.string,
    /**
     * The label.
     */
    label: import_prop_types110.default.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types110.default.bool.isRequired,
    /**
     * @ignore
     */
    style: import_prop_types110.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime147 = __toESM(require_jsx_runtime());
  var import_jsx_runtime148 = __toESM(require_jsx_runtime());
  var _excluded113 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  var useUtilityClasses76 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses78.default)(slots, getOutlinedInputUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var OutlinedInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default2(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles8) => styles8.notchedOutline
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  });
  var OutlinedInputInput = styled_default2(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React145.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded113);
    const classes2 = useUtilityClasses76(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(NotchedOutlineRoot2, {
        ownerState,
        className: classes2.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)(React145.Fragment, {
          children: [label, "\u2009", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes2, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types111.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types111.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types111.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types111.default.oneOfType([import_prop_types111.default.oneOf(["primary", "secondary"]), import_prop_types111.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types111.default.shape({
      Input: import_prop_types111.default.elementType,
      Root: import_prop_types111.default.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types111.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types111.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types111.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types111.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types111.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types111.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types111.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types111.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType11.default,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: import_prop_types111.default.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types111.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types111.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types111.default.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types111.default.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types111.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types111.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types111.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types111.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types111.default.oneOfType([import_prop_types111.default.number, import_prop_types111.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types111.default.shape({
      input: import_prop_types111.default.elementType,
      root: import_prop_types111.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types111.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.oneOfType([import_prop_types111.default.func, import_prop_types111.default.object, import_prop_types111.default.bool])), import_prop_types111.default.func, import_prop_types111.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types111.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types111.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/Pagination/Pagination.js
  init_extends();
  var React151 = __toESM(require_react());
  var import_prop_types113 = __toESM(require_prop_types());
  var import_composeClasses80 = __toESM(require_composeClasses2());
  var import_integerPropType9 = __toESM(require_integerPropType2());

  // node_modules/@mui/material/Pagination/paginationClasses.js
  var import_generateUtilityClasses80 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass84 = __toESM(require_generateUtilityClass2());
  function getPaginationUtilityClass(slot) {
    return (0, import_generateUtilityClass84.default)("MuiPagination", slot);
  }
  var paginationClasses = (0, import_generateUtilityClasses80.default)("MuiPagination", ["root", "ul", "outlined", "text"]);
  var paginationClasses_default = paginationClasses;

  // node_modules/@mui/material/usePagination/usePagination.js
  init_extends();
  var import_useControlled4 = __toESM(require_useControlled2());
  var _excluded114 = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
  function usePagination(props = {}) {
    const {
      boundaryCount = 1,
      componentName = "usePagination",
      count = 1,
      defaultPage = 1,
      disabled = false,
      hideNextButton = false,
      hidePrevButton = false,
      onChange: handleChange,
      page: pageProp,
      showFirstButton = false,
      showLastButton = false,
      siblingCount = 1
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded114);
    const [page, setPageState] = (0, import_useControlled4.default)({
      controlled: pageProp,
      default: defaultPage,
      name: componentName,
      state: "page"
    });
    const handleClick = (event, value) => {
      if (!pageProp) {
        setPageState(value);
      }
      if (handleChange) {
        handleChange(event, value);
      }
    };
    const range = (start2, end2) => {
      const length2 = end2 - start2 + 1;
      return Array.from({
        length: length2
      }, (_5, i2) => start2 + i2);
    };
    const startPages = range(1, Math.min(boundaryCount, count));
    const endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
    const siblingsStart = Math.max(
      Math.min(
        // Natural start
        page - siblingCount,
        // Lower boundary when page is high
        count - boundaryCount - siblingCount * 2 - 1
      ),
      // Greater than startPages
      boundaryCount + 2
    );
    const siblingsEnd = Math.min(
      Math.max(
        // Natural end
        page + siblingCount,
        // Upper boundary when page is low
        boundaryCount + siblingCount * 2 + 2
      ),
      // Less than endPages
      endPages.length > 0 ? endPages[0] - 2 : count - 1
    );
    const itemList = [
      ...showFirstButton ? ["first"] : [],
      ...hidePrevButton ? [] : ["previous"],
      ...startPages,
      // Start ellipsis
      // eslint-disable-next-line no-nested-ternary
      ...siblingsStart > boundaryCount + 2 ? ["start-ellipsis"] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : [],
      // Sibling pages
      ...range(siblingsStart, siblingsEnd),
      // End ellipsis
      // eslint-disable-next-line no-nested-ternary
      ...siblingsEnd < count - boundaryCount - 1 ? ["end-ellipsis"] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : [],
      ...endPages,
      ...hideNextButton ? [] : ["next"],
      ...showLastButton ? ["last"] : []
    ];
    const buttonPage = (type) => {
      switch (type) {
        case "first":
          return 1;
        case "previous":
          return page - 1;
        case "next":
          return page + 1;
        case "last":
          return count;
        default:
          return null;
      }
    };
    const items = itemList.map((item) => {
      return typeof item === "number" ? {
        onClick: (event) => {
          handleClick(event, item);
        },
        type: "page",
        page: item,
        selected: item === page,
        disabled,
        "aria-current": item === page ? "true" : void 0
      } : {
        onClick: (event) => {
          handleClick(event, buttonPage(item));
        },
        type: item,
        page: buttonPage(item),
        selected: false,
        disabled: disabled || item.indexOf("ellipsis") === -1 && (item === "next" || item === "last" ? page >= count : page <= 1)
      };
    });
    return _extends({
      items
    }, other);
  }

  // node_modules/@mui/material/PaginationItem/PaginationItem.js
  init_extends();
  var React150 = __toESM(require_react());
  var import_prop_types112 = __toESM(require_prop_types());
  var import_composeClasses79 = __toESM(require_composeClasses2());
  var import_colorManipulator18 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/PaginationItem/paginationItemClasses.js
  var import_generateUtilityClasses81 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass85 = __toESM(require_generateUtilityClass2());
  function getPaginationItemUtilityClass(slot) {
    return (0, import_generateUtilityClass85.default)("MuiPaginationItem", slot);
  }
  var paginationItemClasses = (0, import_generateUtilityClasses81.default)("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon", "colorPrimary", "colorSecondary"]);
  var paginationItemClasses_default = paginationItemClasses;

  // node_modules/@mui/material/internal/svg-icons/FirstPage.js
  var React146 = __toESM(require_react());
  var import_jsx_runtime149 = __toESM(require_jsx_runtime());
  var FirstPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime149.jsx)("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");

  // node_modules/@mui/material/internal/svg-icons/LastPage.js
  var React147 = __toESM(require_react());
  var import_jsx_runtime150 = __toESM(require_jsx_runtime());
  var LastPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime150.jsx)("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");

  // node_modules/@mui/material/internal/svg-icons/NavigateBefore.js
  var React148 = __toESM(require_react());
  var import_jsx_runtime151 = __toESM(require_jsx_runtime());
  var NavigateBefore_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime151.jsx)("path", {
    d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
  }), "NavigateBefore");

  // node_modules/@mui/material/internal/svg-icons/NavigateNext.js
  var React149 = __toESM(require_react());
  var import_jsx_runtime152 = __toESM(require_jsx_runtime());
  var NavigateNext_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime152.jsx)("path", {
    d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
  }), "NavigateNext");

  // node_modules/@mui/material/PaginationItem/PaginationItem.js
  var import_jsx_runtime153 = __toESM(require_jsx_runtime());
  var import_jsx_runtime154 = __toESM(require_jsx_runtime());
  var _excluded115 = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "slots", "type", "variant"];
  var overridesResolver7 = (props, styles8) => {
    const {
      ownerState
    } = props;
    return [styles8.root, styles8[ownerState.variant], styles8[`size${capitalize_default(ownerState.size)}`], ownerState.variant === "text" && styles8[`text${capitalize_default(ownerState.color)}`], ownerState.variant === "outlined" && styles8[`outlined${capitalize_default(ownerState.color)}`], ownerState.shape === "rounded" && styles8.rounded, ownerState.type === "page" && styles8.page, (ownerState.type === "start-ellipsis" || ownerState.type === "end-ellipsis") && styles8.ellipsis, (ownerState.type === "previous" || ownerState.type === "next") && styles8.previousNext, (ownerState.type === "first" || ownerState.type === "last") && styles8.firstLast];
  };
  var useUtilityClasses77 = (ownerState) => {
    const {
      classes: classes2,
      color: color2,
      disabled,
      selected,
      size,
      shape: shape2,
      type,
      variant
    } = ownerState;
    const slots = {
      root: ["root", `size${capitalize_default(size)}`, variant, shape2, color2 !== "standard" && `color${capitalize_default(color2)}`, color2 !== "standard" && `${variant}${capitalize_default(color2)}`, disabled && "disabled", selected && "selected", {
        page: "page",
        first: "firstLast",
        last: "firstLast",
        "start-ellipsis": "ellipsis",
        "end-ellipsis": "ellipsis",
        previous: "previousNext",
        next: "previousNext"
      }[type]],
      icon: ["icon"]
    };
    return (0, import_composeClasses79.default)(slots, getPaginationItemUtilityClass, classes2);
  };
  var PaginationItemEllipsis = styled_default2("div", {
    name: "MuiPaginationItem",
    slot: "Root",
    overridesResolver: overridesResolver7
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    borderRadius: 32 / 2,
    textAlign: "center",
    boxSizing: "border-box",
    minWidth: 32,
    padding: "0 6px",
    margin: "0 3px",
    color: (theme.vars || theme).palette.text.primary,
    height: "auto",
    [`&.${paginationItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.size === "small" && {
    minWidth: 26,
    borderRadius: 26 / 2,
    margin: "0 1px",
    padding: "0 4px"
  }, ownerState.size === "large" && {
    minWidth: 40,
    borderRadius: 40 / 2,
    padding: "0 10px",
    fontSize: theme.typography.pxToRem(15)
  }));
  var PaginationItemPage = styled_default2(ButtonBase_default, {
    name: "MuiPaginationItem",
    slot: "Root",
    overridesResolver: overridesResolver7
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    borderRadius: 32 / 2,
    textAlign: "center",
    boxSizing: "border-box",
    minWidth: 32,
    height: 32,
    padding: "0 6px",
    margin: "0 3px",
    color: (theme.vars || theme).palette.text.primary,
    [`&.${paginationItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${paginationItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    transition: theme.transitions.create(["color", "background-color"], {
      duration: theme.transitions.duration.short
    }),
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${paginationItemClasses_default.selected}`]: {
      backgroundColor: (theme.vars || theme).palette.action.selected,
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator18.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette.action.selected
        }
      },
      [`&.${paginationItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator18.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      [`&.${paginationItemClasses_default.disabled}`]: {
        opacity: 1,
        color: (theme.vars || theme).palette.action.disabled,
        backgroundColor: (theme.vars || theme).palette.action.selected
      }
    }
  }, ownerState.size === "small" && {
    minWidth: 26,
    height: 26,
    borderRadius: 26 / 2,
    margin: "0 1px",
    padding: "0 4px"
  }, ownerState.size === "large" && {
    minWidth: 40,
    height: 40,
    borderRadius: 40 / 2,
    padding: "0 10px",
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.shape === "rounded" && {
    borderRadius: (theme.vars || theme).shape.borderRadius
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "text" && {
    [`&.${paginationItemClasses_default.selected}`]: _extends({}, ownerState.color !== "standard" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      "&:hover": {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      },
      [`&.${paginationItemClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }, {
      [`&.${paginationItemClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    })
  }, ownerState.variant === "outlined" && {
    border: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
    [`&.${paginationItemClasses_default.selected}`]: _extends({}, ownerState.color !== "standard" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_colorManipulator18.alpha)(theme.palette[ownerState.color].main, 0.5)}`,
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.activatedOpacity})` : (0, import_colorManipulator18.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator18.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${paginationItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator18.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity)
      }
    }, {
      [`&.${paginationItemClasses_default.disabled}`]: {
        borderColor: (theme.vars || theme).palette.action.disabledBackground,
        color: (theme.vars || theme).palette.action.disabled
      }
    })
  }));
  var PaginationItemPageIcon = styled_default2("div", {
    name: "MuiPaginationItem",
    slot: "Icon",
    overridesResolver: (props, styles8) => styles8.icon
  })(({
    theme,
    ownerState
  }) => _extends({
    fontSize: theme.typography.pxToRem(20),
    margin: "0 -8px"
  }, ownerState.size === "small" && {
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === "large" && {
    fontSize: theme.typography.pxToRem(22)
  }));
  var PaginationItem = /* @__PURE__ */ React150.forwardRef(function PaginationItem2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPaginationItem"
    });
    const {
      className,
      color: color2 = "standard",
      component,
      components = {},
      disabled = false,
      page,
      selected = false,
      shape: shape2 = "circular",
      size = "medium",
      slots = {},
      type = "page",
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded115);
    const ownerState = _extends({}, props, {
      color: color2,
      disabled,
      selected,
      shape: shape2,
      size,
      type,
      variant
    });
    const isRtl = useRtl();
    const classes2 = useUtilityClasses77(ownerState);
    const normalizedIcons = isRtl ? {
      previous: slots.next || components.next || NavigateNext_default,
      next: slots.previous || components.previous || NavigateBefore_default,
      last: slots.first || components.first || FirstPage_default,
      first: slots.last || components.last || LastPage_default
    } : {
      previous: slots.previous || components.previous || NavigateBefore_default,
      next: slots.next || components.next || NavigateNext_default,
      first: slots.first || components.first || FirstPage_default,
      last: slots.last || components.last || LastPage_default
    };
    const Icon3 = normalizedIcons[type];
    return type === "start-ellipsis" || type === "end-ellipsis" ? /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(PaginationItemEllipsis, {
      ref,
      ownerState,
      className: clsx_default(classes2.root, className),
      children: "\u2026"
    }) : /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(PaginationItemPage, _extends({
      ref,
      ownerState,
      component,
      disabled,
      className: clsx_default(classes2.root, className)
    }, other, {
      children: [type === "page" && page, Icon3 ? /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(PaginationItemPageIcon, {
        as: Icon3,
        ownerState,
        className: classes2.icon
      }) : null]
    }));
  });
  true ? PaginationItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types112.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types112.default.object,
    /**
     * @ignore
     */
    className: import_prop_types112.default.string,
    /**
     * The active color.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'standard'
     */
    color: import_prop_types112.default.oneOfType([import_prop_types112.default.oneOf(["primary", "secondary", "standard"]), import_prop_types112.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types112.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types112.default.shape({
      first: import_prop_types112.default.elementType,
      last: import_prop_types112.default.elementType,
      next: import_prop_types112.default.elementType,
      previous: import_prop_types112.default.elementType
    }),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types112.default.bool,
    /**
     * The current page number.
     */
    page: import_prop_types112.default.node,
    /**
     * If `true` the pagination item is selected.
     * @default false
     */
    selected: import_prop_types112.default.bool,
    /**
     * The shape of the pagination item.
     * @default 'circular'
     */
    shape: import_prop_types112.default.oneOf(["circular", "rounded"]),
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types112.default.oneOfType([import_prop_types112.default.oneOf(["small", "medium", "large"]), import_prop_types112.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types112.default.shape({
      first: import_prop_types112.default.elementType,
      last: import_prop_types112.default.elementType,
      next: import_prop_types112.default.elementType,
      previous: import_prop_types112.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types112.default.oneOfType([import_prop_types112.default.arrayOf(import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object, import_prop_types112.default.bool])), import_prop_types112.default.func, import_prop_types112.default.object]),
    /**
     * The type of pagination item.
     * @default 'page'
     */
    type: import_prop_types112.default.oneOf(["end-ellipsis", "first", "last", "next", "page", "previous", "start-ellipsis"]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types112.default.oneOfType([import_prop_types112.default.oneOf(["outlined", "text"]), import_prop_types112.default.string])
  } : void 0;
  var PaginationItem_default = PaginationItem;

  // node_modules/@mui/material/Pagination/Pagination.js
  var import_jsx_runtime155 = __toESM(require_jsx_runtime());
  var _excluded116 = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"];
  var useUtilityClasses78 = (ownerState) => {
    const {
      classes: classes2,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant],
      ul: ["ul"]
    };
    return (0, import_composeClasses80.default)(slots, getPaginationUtilityClass, classes2);
  };
  var PaginationRoot = styled_default2("nav", {
    name: "MuiPagination",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant]];
    }
  })({});
  var PaginationUl = styled_default2("ul", {
    name: "MuiPagination",
    slot: "Ul",
    overridesResolver: (props, styles8) => styles8.ul
  })({
    display: "flex",
    flexWrap: "wrap",
    alignItems: "center",
    padding: 0,
    margin: 0,
    listStyle: "none"
  });
  function defaultGetAriaLabel(type, page, selected) {
    if (type === "page") {
      return `${selected ? "" : "Go to "}page ${page}`;
    }
    return `Go to ${type} page`;
  }
  var Pagination = /* @__PURE__ */ React151.forwardRef(function Pagination2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPagination"
    });
    const {
      boundaryCount = 1,
      className,
      color: color2 = "standard",
      count = 1,
      defaultPage = 1,
      disabled = false,
      getItemAriaLabel = defaultGetAriaLabel,
      hideNextButton = false,
      hidePrevButton = false,
      renderItem = (item) => /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(PaginationItem_default, _extends({}, item)),
      shape: shape2 = "circular",
      showFirstButton = false,
      showLastButton = false,
      siblingCount = 1,
      size = "medium",
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded116);
    const {
      items
    } = usePagination(_extends({}, props, {
      componentName: "Pagination"
    }));
    const ownerState = _extends({}, props, {
      boundaryCount,
      color: color2,
      count,
      defaultPage,
      disabled,
      getItemAriaLabel,
      hideNextButton,
      hidePrevButton,
      renderItem,
      shape: shape2,
      showFirstButton,
      showLastButton,
      siblingCount,
      size,
      variant
    });
    const classes2 = useUtilityClasses78(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(PaginationRoot, _extends({
      "aria-label": "pagination navigation",
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(PaginationUl, {
        className: classes2.ul,
        ownerState,
        children: items.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime155.jsx)("li", {
          children: renderItem(_extends({}, item, {
            color: color2,
            "aria-label": getItemAriaLabel(item.type, item.page, item.selected),
            shape: shape2,
            size,
            variant
          }))
        }, index))
      })
    }));
  });
  true ? Pagination.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Number of always visible pages at the beginning and end.
     * @default 1
     */
    boundaryCount: import_integerPropType9.default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types113.default.object,
    /**
     * @ignore
     */
    className: import_prop_types113.default.string,
    /**
     * The active color.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'standard'
     */
    color: import_prop_types113.default.oneOfType([import_prop_types113.default.oneOf(["primary", "secondary", "standard"]), import_prop_types113.default.string]),
    /**
     * The total number of pages.
     * @default 1
     */
    count: import_integerPropType9.default,
    /**
     * The page selected by default when the component is uncontrolled.
     * @default 1
     */
    defaultPage: import_integerPropType9.default,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types113.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @param {bool} selected If true, the current page is selected.
     * @returns {string}
     */
    getItemAriaLabel: import_prop_types113.default.func,
    /**
     * If `true`, hide the next-page button.
     * @default false
     */
    hideNextButton: import_prop_types113.default.bool,
    /**
     * If `true`, hide the previous-page button.
     * @default false
     */
    hidePrevButton: import_prop_types113.default.bool,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.ChangeEvent<unknown>} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onChange: import_prop_types113.default.func,
    /**
     * The current page. Unlike `TablePagination`, which starts numbering from `0`, this pagination starts from `1`.
     */
    page: import_integerPropType9.default,
    /**
     * Render the item.
     * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
     * @returns {ReactNode}
     * @default (item) => <PaginationItem {...item} />
     */
    renderItem: import_prop_types113.default.func,
    /**
     * The shape of the pagination items.
     * @default 'circular'
     */
    shape: import_prop_types113.default.oneOf(["circular", "rounded"]),
    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: import_prop_types113.default.bool,
    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: import_prop_types113.default.bool,
    /**
     * Number of always visible pages before and after the current page.
     * @default 1
     */
    siblingCount: import_integerPropType9.default,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types113.default.oneOfType([import_prop_types113.default.oneOf(["small", "medium", "large"]), import_prop_types113.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types113.default.oneOfType([import_prop_types113.default.arrayOf(import_prop_types113.default.oneOfType([import_prop_types113.default.func, import_prop_types113.default.object, import_prop_types113.default.bool])), import_prop_types113.default.func, import_prop_types113.default.object]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types113.default.oneOfType([import_prop_types113.default.oneOf(["outlined", "text"]), import_prop_types113.default.string])
  } : void 0;
  var Pagination_default = Pagination;

  // node_modules/@mui/material/Radio/Radio.js
  init_extends();
  var React157 = __toESM(require_react());
  var import_prop_types115 = __toESM(require_prop_types());
  var import_refType12 = __toESM(require_refType2());
  var import_composeClasses81 = __toESM(require_composeClasses2());
  var import_colorManipulator19 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Radio/RadioButtonIcon.js
  init_extends();
  var React154 = __toESM(require_react());
  var import_prop_types114 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js
  var React152 = __toESM(require_react());
  var import_jsx_runtime156 = __toESM(require_jsx_runtime());
  var RadioButtonUnchecked_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime156.jsx)("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "RadioButtonUnchecked");

  // node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js
  var React153 = __toESM(require_react());
  var import_jsx_runtime157 = __toESM(require_jsx_runtime());
  var RadioButtonChecked_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime157.jsx)("path", {
    d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
  }), "RadioButtonChecked");

  // node_modules/@mui/material/Radio/RadioButtonIcon.js
  var import_jsx_runtime158 = __toESM(require_jsx_runtime());
  var import_jsx_runtime159 = __toESM(require_jsx_runtime());
  var RadioButtonIconRoot = styled_default2("span", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    position: "relative",
    display: "flex"
  });
  var RadioButtonIconBackground = styled_default2(RadioButtonUnchecked_default)({
    // Scale applied to prevent dot misalignment in Safari
    transform: "scale(1)"
  });
  var RadioButtonIconDot = styled_default2(RadioButtonChecked_default)(({
    theme,
    ownerState
  }) => _extends({
    left: 0,
    position: "absolute",
    transform: "scale(0)",
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeIn,
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.checked && {
    transform: "scale(1)",
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.shortest
    })
  }));
  function RadioButtonIcon(props) {
    const {
      checked = false,
      classes: classes2 = {},
      fontSize
    } = props;
    const ownerState = _extends({}, props, {
      checked
    });
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)(RadioButtonIconRoot, {
      className: classes2.root,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime158.jsx)(RadioButtonIconBackground, {
        fontSize,
        className: classes2.background,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(RadioButtonIconDot, {
        fontSize,
        className: classes2.dot,
        ownerState
      })]
    });
  }
  true ? RadioButtonIcon.propTypes = {
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types114.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types114.default.object,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     */
    fontSize: import_prop_types114.default.oneOf(["small", "medium"])
  } : void 0;
  var RadioButtonIcon_default = RadioButtonIcon;

  // node_modules/@mui/material/utils/createChainedFunction.js
  var import_createChainedFunction = __toESM(require_createChainedFunction2());
  var createChainedFunction_default = import_createChainedFunction.default;

  // node_modules/@mui/material/RadioGroup/useRadioGroup.js
  var React156 = __toESM(require_react());

  // node_modules/@mui/material/RadioGroup/RadioGroupContext.js
  var React155 = __toESM(require_react());
  var RadioGroupContext = /* @__PURE__ */ React155.createContext(void 0);
  if (true) {
    RadioGroupContext.displayName = "RadioGroupContext";
  }
  var RadioGroupContext_default = RadioGroupContext;

  // node_modules/@mui/material/RadioGroup/useRadioGroup.js
  function useRadioGroup() {
    return React156.useContext(RadioGroupContext_default);
  }

  // node_modules/@mui/material/Radio/radioClasses.js
  var import_generateUtilityClasses82 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass86 = __toESM(require_generateUtilityClass2());
  function getRadioUtilityClass(slot) {
    return (0, import_generateUtilityClass86.default)("MuiRadio", slot);
  }
  var radioClasses = (0, import_generateUtilityClasses82.default)("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]);
  var radioClasses_default = radioClasses;

  // node_modules/@mui/material/Radio/Radio.js
  var import_jsx_runtime160 = __toESM(require_jsx_runtime());
  var _excluded117 = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
  var useUtilityClasses79 = (ownerState) => {
    const {
      classes: classes2,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, size !== "medium" && `size${capitalize_default(size)}`]
    };
    return _extends({}, classes2, (0, import_composeClasses81.default)(slots, getRadioUtilityClass, classes2));
  };
  var RadioRoot = styled_default2(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiRadio",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.size !== "medium" && styles8[`size${capitalize_default(ownerState.size)}`], styles8[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator19.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${radioClasses_default.checked}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    }
  }, {
    [`&.${radioClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  function areEqualValues(a2, b2) {
    if (typeof b2 === "object" && b2 !== null) {
      return a2 === b2;
    }
    return String(a2) === String(b2);
  }
  var defaultCheckedIcon2 = /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(RadioButtonIcon_default, {
    checked: true
  });
  var defaultIcon2 = /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(RadioButtonIcon_default, {});
  var Radio = /* @__PURE__ */ React157.forwardRef(function Radio2(inProps, ref) {
    var _defaultIcon$props$fo, _defaultCheckedIcon$p;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiRadio"
    });
    const {
      checked: checkedProp,
      checkedIcon = defaultCheckedIcon2,
      color: color2 = "primary",
      icon = defaultIcon2,
      name: nameProp,
      onChange: onChangeProp,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded117);
    const ownerState = _extends({}, props, {
      color: color2,
      size
    });
    const classes2 = useUtilityClasses79(ownerState);
    const radioGroup = useRadioGroup();
    let checked = checkedProp;
    const onChange = createChainedFunction_default(onChangeProp, radioGroup && radioGroup.onChange);
    let name = nameProp;
    if (radioGroup) {
      if (typeof checked === "undefined") {
        checked = areEqualValues(radioGroup.value, props.value);
      }
      if (typeof name === "undefined") {
        name = radioGroup.name;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(RadioRoot, _extends({
      type: "radio",
      icon: /* @__PURE__ */ React157.cloneElement(icon, {
        fontSize: (_defaultIcon$props$fo = defaultIcon2.props.fontSize) != null ? _defaultIcon$props$fo : size
      }),
      checkedIcon: /* @__PURE__ */ React157.cloneElement(checkedIcon, {
        fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon2.props.fontSize) != null ? _defaultCheckedIcon$p : size
      }),
      ownerState,
      classes: classes2,
      name,
      checked,
      onChange,
      ref,
      className: clsx_default(classes2.root, className)
    }, other));
  });
  true ? Radio.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types115.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <RadioButtonIcon checked />
     */
    checkedIcon: import_prop_types115.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types115.default.object,
    /**
     * @ignore
     */
    className: import_prop_types115.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types115.default.oneOfType([import_prop_types115.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types115.default.string]),
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types115.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types115.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <RadioButtonIcon />
     */
    icon: import_prop_types115.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types115.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types115.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType12.default,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types115.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types115.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types115.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     * @default 'medium'
     */
    size: import_prop_types115.default.oneOfType([import_prop_types115.default.oneOf(["medium", "small"]), import_prop_types115.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types115.default.oneOfType([import_prop_types115.default.arrayOf(import_prop_types115.default.oneOfType([import_prop_types115.default.func, import_prop_types115.default.object, import_prop_types115.default.bool])), import_prop_types115.default.func, import_prop_types115.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     */
    value: import_prop_types115.default.any
  } : void 0;
  var Radio_default = Radio;

  // node_modules/@mui/material/RadioGroup/RadioGroup.js
  init_extends();
  var React158 = __toESM(require_react());
  var import_prop_types116 = __toESM(require_prop_types());
  var import_composeClasses82 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/RadioGroup/radioGroupClasses.js
  var import_generateUtilityClasses83 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass87 = __toESM(require_generateUtilityClass2());
  function getRadioGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass87.default)("MuiRadioGroup", slot);
  }
  var radioGroupClasses = (0, import_generateUtilityClasses83.default)("MuiRadioGroup", ["root", "row", "error"]);
  var radioGroupClasses_default = radioGroupClasses;

  // node_modules/@mui/material/utils/useId.js
  var import_useId2 = __toESM(require_useId2());
  var useId_default = import_useId2.default;

  // node_modules/@mui/material/RadioGroup/RadioGroup.js
  var import_jsx_runtime161 = __toESM(require_jsx_runtime());
  var _excluded118 = ["actions", "children", "className", "defaultValue", "name", "onChange", "value"];
  var useUtilityClasses80 = (props) => {
    const {
      classes: classes2,
      row,
      error
    } = props;
    const slots = {
      root: ["root", row && "row", error && "error"]
    };
    return (0, import_composeClasses82.default)(slots, getRadioGroupUtilityClass, classes2);
  };
  var RadioGroup = /* @__PURE__ */ React158.forwardRef(function RadioGroup2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      children,
      className,
      defaultValue,
      name: nameProp,
      onChange,
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded118);
    const rootRef = React158.useRef(null);
    const classes2 = useUtilityClasses80(props);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "RadioGroup"
    });
    React158.useImperativeHandle(actions, () => ({
      focus: () => {
        let input = rootRef.current.querySelector("input:not(:disabled):checked");
        if (!input) {
          input = rootRef.current.querySelector("input:not(:disabled)");
        }
        if (input) {
          input.focus();
        }
      }
    }), []);
    const handleRef = useForkRef_default(ref, rootRef);
    const name = useId_default(nameProp);
    const contextValue = React158.useMemo(() => ({
      name,
      onChange(event) {
        setValueState(event.target.value);
        if (onChange) {
          onChange(event, event.target.value);
        }
      },
      value
    }), [name, onChange, setValueState, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(RadioGroupContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(FormGroup_default, _extends({
        role: "radiogroup",
        ref: handleRef,
        className: clsx_default(classes2.root, className)
      }, other, {
        children
      }))
    });
  });
  true ? RadioGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types116.default.node,
    /**
     * @ignore
     */
    className: import_prop_types116.default.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types116.default.any,
    /**
     * The name used to reference the value of the control.
     * If you don't provide this prop, it falls back to a randomly generated name.
     */
    name: import_prop_types116.default.string,
    /**
     * Callback fired when a radio button is selected.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {string} value The value of the selected radio button.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types116.default.func,
    /**
     * Value of the selected radio button. The DOM API casts this to a string.
     */
    value: import_prop_types116.default.any
  } : void 0;
  var RadioGroup_default = RadioGroup;

  // node_modules/@mui/material/Rating/Rating.js
  init_extends();
  var React161 = __toESM(require_react());
  var import_prop_types117 = __toESM(require_prop_types());
  var import_clamp2 = __toESM(require_clamp2());
  var import_visuallyHidden = __toESM(require_visuallyHidden2());
  var import_chainPropTypes12 = __toESM(require_chainPropTypes2());
  var import_composeClasses83 = __toESM(require_composeClasses2());
  var import_utils40 = __toESM(require_utils());

  // node_modules/@mui/material/internal/svg-icons/Star.js
  var React159 = __toESM(require_react());
  var import_jsx_runtime162 = __toESM(require_jsx_runtime());
  var Star_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime162.jsx)("path", {
    d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
  }), "Star");

  // node_modules/@mui/material/internal/svg-icons/StarBorder.js
  var React160 = __toESM(require_react());
  var import_jsx_runtime163 = __toESM(require_jsx_runtime());
  var StarBorder_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime163.jsx)("path", {
    d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
  }), "StarBorder");

  // node_modules/@mui/material/Rating/ratingClasses.js
  var import_generateUtilityClasses84 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass88 = __toESM(require_generateUtilityClass2());
  function getRatingUtilityClass(slot) {
    return (0, import_generateUtilityClass88.default)("MuiRating", slot);
  }
  var ratingClasses = (0, import_generateUtilityClasses84.default)("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]);
  var ratingClasses_default = ratingClasses;

  // node_modules/@mui/material/Rating/Rating.js
  var import_jsx_runtime164 = __toESM(require_jsx_runtime());
  var import_jsx_runtime165 = __toESM(require_jsx_runtime());
  var _excluded119 = ["value"];
  var _excluded217 = ["className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "highlightSelectedOnly", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"];
  function getDecimalPrecision2(num) {
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToPrecision(value, precision) {
    if (value == null) {
      return value;
    }
    const nearest = Math.round(value / precision) * precision;
    return Number(nearest.toFixed(getDecimalPrecision2(precision)));
  }
  var useUtilityClasses81 = (ownerState) => {
    const {
      classes: classes2,
      size,
      readOnly,
      disabled,
      emptyValueFocused,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", `size${(0, import_utils40.capitalize)(size)}`, disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
      label: ["label", "pristine"],
      labelEmptyValue: [emptyValueFocused && "labelEmptyValueActive"],
      icon: ["icon"],
      iconEmpty: ["iconEmpty"],
      iconFilled: ["iconFilled"],
      iconHover: ["iconHover"],
      iconFocus: ["iconFocus"],
      iconActive: ["iconActive"],
      decimal: ["decimal"],
      visuallyHidden: ["visuallyHidden"]
    };
    return (0, import_composeClasses83.default)(slots, getRatingUtilityClass, classes2);
  };
  var RatingRoot = styled_default2("span", {
    name: "MuiRating",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${ratingClasses_default.visuallyHidden}`]: styles8.visuallyHidden
      }, styles8.root, styles8[`size${(0, import_utils40.capitalize)(ownerState.size)}`], ownerState.readOnly && styles8.readOnly];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    // Required to position the pristine input absolutely
    position: "relative",
    fontSize: theme.typography.pxToRem(24),
    color: "#faaf00",
    cursor: "pointer",
    textAlign: "left",
    width: "min-content",
    WebkitTapHighlightColor: "transparent",
    [`&.${ratingClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`&.${ratingClasses_default.focusVisible} .${ratingClasses_default.iconActive}`]: {
      outline: "1px solid #999"
    },
    [`& .${ratingClasses_default.visuallyHidden}`]: import_visuallyHidden.default
  }, ownerState.size === "small" && {
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === "large" && {
    fontSize: theme.typography.pxToRem(30)
  }, ownerState.readOnly && {
    pointerEvents: "none"
  }));
  var RatingLabel = styled_default2("label", {
    name: "MuiRating",
    slot: "Label",
    overridesResolver: ({
      ownerState
    }, styles8) => [styles8.label, ownerState.emptyValueFocused && styles8.labelEmptyValueActive]
  })(({
    ownerState
  }) => _extends({
    cursor: "inherit"
  }, ownerState.emptyValueFocused && {
    top: 0,
    bottom: 0,
    position: "absolute",
    outline: "1px solid #999",
    width: "100%"
  }));
  var RatingIcon = styled_default2("span", {
    name: "MuiRating",
    slot: "Icon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.icon, ownerState.iconEmpty && styles8.iconEmpty, ownerState.iconFilled && styles8.iconFilled, ownerState.iconHover && styles8.iconHover, ownerState.iconFocus && styles8.iconFocus, ownerState.iconActive && styles8.iconActive];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    // Fit wrapper to actual icon size.
    display: "flex",
    transition: theme.transitions.create("transform", {
      duration: theme.transitions.duration.shortest
    }),
    // Fix mouseLeave issue.
    // https://github.com/facebook/react/issues/4492
    pointerEvents: "none"
  }, ownerState.iconActive && {
    transform: "scale(1.2)"
  }, ownerState.iconEmpty && {
    color: (theme.vars || theme).palette.action.disabled
  }));
  var RatingDecimal = styled_default2("span", {
    name: "MuiRating",
    slot: "Decimal",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "iconActive",
    overridesResolver: (props, styles8) => {
      const {
        iconActive
      } = props;
      return [styles8.decimal, iconActive && styles8.iconActive];
    }
  })(({
    iconActive
  }) => _extends({
    position: "relative"
  }, iconActive && {
    transform: "scale(1.2)"
  }));
  function IconContainer(props) {
    const other = _objectWithoutPropertiesLoose(props, _excluded119);
    return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("span", _extends({}, other));
  }
  true ? IconContainer.propTypes = {
    value: import_prop_types117.default.number.isRequired
  } : void 0;
  function RatingItem(props) {
    const {
      classes: classes2,
      disabled,
      emptyIcon,
      focus,
      getLabelText,
      highlightSelectedOnly,
      hover,
      icon,
      IconContainerComponent,
      isActive,
      itemValue,
      labelProps,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      readOnly,
      ownerState,
      ratingValue,
      ratingValueRounded
    } = props;
    const isFilled2 = highlightSelectedOnly ? itemValue === ratingValue : itemValue <= ratingValue;
    const isHovered = itemValue <= hover;
    const isFocused = itemValue <= focus;
    const isChecked = itemValue === ratingValueRounded;
    const id = (0, import_utils40.unstable_useId)();
    const container = /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(RatingIcon, {
      as: IconContainerComponent,
      value: itemValue,
      className: clsx_default(classes2.icon, isFilled2 ? classes2.iconFilled : classes2.iconEmpty, isHovered && classes2.iconHover, isFocused && classes2.iconFocus, isActive && classes2.iconActive),
      ownerState: _extends({}, ownerState, {
        iconEmpty: !isFilled2,
        iconFilled: isFilled2,
        iconHover: isHovered,
        iconFocus: isFocused,
        iconActive: isActive
      }),
      children: emptyIcon && !isFilled2 ? emptyIcon : icon
    });
    if (readOnly) {
      return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("span", _extends({}, labelProps, {
        children: container
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(React161.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(RatingLabel, _extends({
        ownerState: _extends({}, ownerState, {
          emptyValueFocused: void 0
        }),
        htmlFor: id
      }, labelProps, {
        children: [container, /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("span", {
          className: classes2.visuallyHidden,
          children: getLabelText(itemValue)
        })]
      })), /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("input", {
        className: classes2.visuallyHidden,
        onFocus,
        onBlur,
        onChange,
        onClick,
        disabled,
        value: itemValue,
        id,
        type: "radio",
        name,
        checked: isChecked
      })]
    });
  }
  true ? RatingItem.propTypes = {
    classes: import_prop_types117.default.object.isRequired,
    disabled: import_prop_types117.default.bool.isRequired,
    emptyIcon: import_prop_types117.default.node,
    focus: import_prop_types117.default.number.isRequired,
    getLabelText: import_prop_types117.default.func.isRequired,
    highlightSelectedOnly: import_prop_types117.default.bool.isRequired,
    hover: import_prop_types117.default.number.isRequired,
    icon: import_prop_types117.default.node,
    IconContainerComponent: import_prop_types117.default.elementType.isRequired,
    isActive: import_prop_types117.default.bool.isRequired,
    itemValue: import_prop_types117.default.number.isRequired,
    labelProps: import_prop_types117.default.object,
    name: import_prop_types117.default.string,
    onBlur: import_prop_types117.default.func.isRequired,
    onChange: import_prop_types117.default.func.isRequired,
    onClick: import_prop_types117.default.func.isRequired,
    onFocus: import_prop_types117.default.func.isRequired,
    ownerState: import_prop_types117.default.object.isRequired,
    ratingValue: import_prop_types117.default.number,
    ratingValueRounded: import_prop_types117.default.number,
    readOnly: import_prop_types117.default.bool.isRequired
  } : void 0;
  var defaultIcon3 = /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(Star_default, {
    fontSize: "inherit"
  });
  var defaultEmptyIcon = /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(StarBorder_default, {
    fontSize: "inherit"
  });
  function defaultLabelText(value) {
    return `${value} Star${value !== 1 ? "s" : ""}`;
  }
  var Rating = /* @__PURE__ */ React161.forwardRef(function Rating2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiRating",
      props: inProps
    });
    const {
      className,
      defaultValue = null,
      disabled = false,
      emptyIcon = defaultEmptyIcon,
      emptyLabelText = "Empty",
      getLabelText = defaultLabelText,
      highlightSelectedOnly = false,
      icon = defaultIcon3,
      IconContainerComponent = IconContainer,
      max: max2 = 5,
      name: nameProp,
      onChange,
      onChangeActive,
      onMouseLeave,
      onMouseMove,
      precision = 1,
      readOnly = false,
      size = "medium",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded217);
    const name = (0, import_utils40.unstable_useId)(nameProp);
    const [valueDerived, setValueState] = (0, import_utils40.useControlled)({
      controlled: valueProp,
      default: defaultValue,
      name: "Rating"
    });
    const valueRounded = roundValueToPrecision(valueDerived, precision);
    const isRtl = useRtl();
    const [{
      hover,
      focus
    }, setState] = React161.useState({
      hover: -1,
      focus: -1
    });
    let value = valueRounded;
    if (hover !== -1) {
      value = hover;
    }
    if (focus !== -1) {
      value = focus;
    }
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = (0, import_utils40.useIsFocusVisible)();
    const [focusVisible, setFocusVisible] = React161.useState(false);
    const rootRef = React161.useRef();
    const handleRef = (0, import_utils40.useForkRef)(focusVisibleRef, rootRef, ref);
    const handleMouseMove = (event) => {
      if (onMouseMove) {
        onMouseMove(event);
      }
      const rootNode = rootRef.current;
      const {
        right: right2,
        left: left2,
        width: containerWidth
      } = rootNode.getBoundingClientRect();
      let percent;
      if (isRtl) {
        percent = (right2 - event.clientX) / containerWidth;
      } else {
        percent = (event.clientX - left2) / containerWidth;
      }
      let newHover = roundValueToPrecision(max2 * percent + precision / 2, precision);
      newHover = (0, import_clamp2.default)(newHover, precision, max2);
      setState((prev2) => prev2.hover === newHover && prev2.focus === newHover ? prev2 : {
        hover: newHover,
        focus: newHover
      });
      setFocusVisible(false);
      if (onChangeActive && hover !== newHover) {
        onChangeActive(event, newHover);
      }
    };
    const handleMouseLeave = (event) => {
      if (onMouseLeave) {
        onMouseLeave(event);
      }
      const newHover = -1;
      setState({
        hover: newHover,
        focus: newHover
      });
      if (onChangeActive && hover !== newHover) {
        onChangeActive(event, newHover);
      }
    };
    const handleChange = (event) => {
      let newValue = event.target.value === "" ? null : parseFloat(event.target.value);
      if (hover !== -1) {
        newValue = hover;
      }
      setValueState(newValue);
      if (onChange) {
        onChange(event, newValue);
      }
    };
    const handleClear = (event) => {
      if (event.clientX === 0 && event.clientY === 0) {
        return;
      }
      setState({
        hover: -1,
        focus: -1
      });
      setValueState(null);
      if (onChange && parseFloat(event.target.value) === valueRounded) {
        onChange(event, null);
      }
    };
    const handleFocus = (event) => {
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }
      const newFocus = parseFloat(event.target.value);
      setState((prev2) => ({
        hover: prev2.hover,
        focus: newFocus
      }));
    };
    const handleBlur = (event) => {
      if (hover !== -1) {
        return;
      }
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      const newFocus = -1;
      setState((prev2) => ({
        hover: prev2.hover,
        focus: newFocus
      }));
    };
    const [emptyValueFocused, setEmptyValueFocused] = React161.useState(false);
    const ownerState = _extends({}, props, {
      defaultValue,
      disabled,
      emptyIcon,
      emptyLabelText,
      emptyValueFocused,
      focusVisible,
      getLabelText,
      icon,
      IconContainerComponent,
      max: max2,
      precision,
      readOnly,
      size
    });
    const classes2 = useUtilityClasses81(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(RatingRoot, _extends({
      ref: handleRef,
      onMouseMove: handleMouseMove,
      onMouseLeave: handleMouseLeave,
      className: clsx_default(classes2.root, className, readOnly && "MuiRating-readOnly"),
      ownerState,
      role: readOnly ? "img" : null,
      "aria-label": readOnly ? getLabelText(value) : null
    }, other, {
      children: [Array.from(new Array(max2)).map((_5, index) => {
        const itemValue = index + 1;
        const ratingItemProps = {
          classes: classes2,
          disabled,
          emptyIcon,
          focus,
          getLabelText,
          highlightSelectedOnly,
          hover,
          icon,
          IconContainerComponent,
          name,
          onBlur: handleBlur,
          onChange: handleChange,
          onClick: handleClear,
          onFocus: handleFocus,
          ratingValue: value,
          ratingValueRounded: valueRounded,
          readOnly,
          ownerState
        };
        const isActive = itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1);
        if (precision < 1) {
          const items = Array.from(new Array(1 / precision));
          return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(RatingDecimal, {
            className: clsx_default(classes2.decimal, isActive && classes2.iconActive),
            ownerState,
            iconActive: isActive,
            children: items.map(($, indexDecimal) => {
              const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
              return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(RatingItem, _extends({}, ratingItemProps, {
                // The icon is already displayed as active
                isActive: false,
                itemValue: itemDecimalValue,
                labelProps: {
                  style: items.length - 1 === indexDecimal ? {} : {
                    width: itemDecimalValue === value ? `${(indexDecimal + 1) * precision * 100}%` : "0%",
                    overflow: "hidden",
                    position: "absolute"
                  }
                }
              }), itemDecimalValue);
            })
          }, itemValue);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(RatingItem, _extends({}, ratingItemProps, {
          isActive,
          itemValue
        }), itemValue);
      }), !readOnly && !disabled && /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(RatingLabel, {
        className: clsx_default(classes2.label, classes2.labelEmptyValue),
        ownerState,
        children: [/* @__PURE__ */ (0, import_jsx_runtime164.jsx)("input", {
          className: classes2.visuallyHidden,
          value: "",
          id: `${name}-empty`,
          type: "radio",
          name,
          checked: valueRounded == null,
          onFocus: () => setEmptyValueFocused(true),
          onBlur: () => setEmptyValueFocused(false),
          onChange: handleChange
        }), /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("span", {
          className: classes2.visuallyHidden,
          children: emptyLabelText
        })]
      })]
    }));
  });
  true ? Rating.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types117.default.object,
    /**
     * @ignore
     */
    className: import_prop_types117.default.string,
    /**
     * The default value. Use when the component is not controlled.
     * @default null
     */
    defaultValue: import_prop_types117.default.number,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types117.default.bool,
    /**
     * The icon to display when empty.
     * @default <StarBorder fontSize="inherit" />
     */
    emptyIcon: import_prop_types117.default.node,
    /**
     * The label read when the rating input is empty.
     * @default 'Empty'
     */
    emptyLabelText: import_prop_types117.default.node,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {number} value The rating label's value to format.
     * @returns {string}
     * @default function defaultLabelText(value) {
     *   return `${value} Star${value !== 1 ? 's' : ''}`;
     * }
     */
    getLabelText: import_prop_types117.default.func,
    /**
     * If `true`, only the selected icon will be highlighted.
     * @default false
     */
    highlightSelectedOnly: import_prop_types117.default.bool,
    /**
     * The icon to display.
     * @default <Star fontSize="inherit" />
     */
    icon: import_prop_types117.default.node,
    /**
     * The component containing the icon.
     * @default function IconContainer(props) {
     *   const { value, ...other } = props;
     *   return <span {...other} />;
     * }
     */
    IconContainerComponent: import_prop_types117.default.elementType,
    /**
     * Maximum rating.
     * @default 5
     */
    max: import_prop_types117.default.number,
    /**
     * The name attribute of the radio `input` elements.
     * This input `name` should be unique within the page.
     * Being unique within a form is insufficient since the `name` is used to generated IDs.
     */
    name: import_prop_types117.default.string,
    /**
     * Callback fired when the value changes.
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {number|null} value The new value.
     */
    onChange: import_prop_types117.default.func,
    /**
     * Callback function that is fired when the hover state changes.
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {number} value The new value.
     */
    onChangeActive: import_prop_types117.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types117.default.func,
    /**
     * @ignore
     */
    onMouseMove: import_prop_types117.default.func,
    /**
     * The minimum increment value change allowed.
     * @default 1
     */
    precision: (0, import_chainPropTypes12.default)(import_prop_types117.default.number, (props) => {
      if (props.precision < 0.1) {
        return new Error(["MUI: The prop `precision` should be above 0.1.", "A value below this limit has an imperceptible impact."].join("\n"));
      }
      return null;
    }),
    /**
     * Removes all hover effects and pointer events.
     * @default false
     */
    readOnly: import_prop_types117.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types117.default.oneOfType([import_prop_types117.default.oneOf(["small", "medium", "large"]), import_prop_types117.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types117.default.oneOfType([import_prop_types117.default.arrayOf(import_prop_types117.default.oneOfType([import_prop_types117.default.func, import_prop_types117.default.object, import_prop_types117.default.bool])), import_prop_types117.default.func, import_prop_types117.default.object]),
    /**
     * The rating value.
     */
    value: import_prop_types117.default.number
  } : void 0;
  var Rating_default = Rating;

  // node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js
  init_extends();
  var React162 = __toESM(require_react());
  var import_prop_types118 = __toESM(require_prop_types());
  var import_composeClasses84 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.js
  var import_generateUtilityClasses85 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass89 = __toESM(require_generateUtilityClass2());
  function getScopedCssBaselineUtilityClass(slot) {
    return (0, import_generateUtilityClass89.default)("MuiScopedCssBaseline", slot);
  }
  var scopedCssBaselineClasses = (0, import_generateUtilityClasses85.default)("MuiScopedCssBaseline", ["root"]);
  var scopedCssBaselineClasses_default = scopedCssBaselineClasses;

  // node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js
  var import_jsx_runtime166 = __toESM(require_jsx_runtime());
  var _excluded120 = ["className", "component", "enableColorScheme"];
  var useUtilityClasses82 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses84.default)(slots, getScopedCssBaselineUtilityClass, classes2);
  };
  var ScopedCssBaselineRoot = styled_default2("div", {
    name: "MuiScopedCssBaseline",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme,
    ownerState
  }) => {
    const colorSchemeStyles = {};
    if (ownerState.enableColorScheme && theme.colorSchemes) {
      Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
        var _scheme$palette;
        colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
          colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
        };
      });
    }
    return _extends({}, html(theme, ownerState.enableColorScheme), body(theme), {
      "& *, & *::before, & *::after": {
        boxSizing: "inherit"
      },
      "& strong, & b": {
        fontWeight: theme.typography.fontWeightBold
      }
    }, colorSchemeStyles);
  });
  var ScopedCssBaseline = /* @__PURE__ */ React162.forwardRef(function ScopedCssBaseline2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiScopedCssBaseline"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded120);
    const ownerState = _extends({}, props, {
      component
    });
    const classes2 = useUtilityClasses82(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(ScopedCssBaselineRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? ScopedCssBaseline.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types118.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types118.default.object,
    /**
     * @ignore
     */
    className: import_prop_types118.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types118.default.elementType,
    /**
     * Enable `color-scheme` CSS property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     */
    enableColorScheme: import_prop_types118.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types118.default.oneOfType([import_prop_types118.default.arrayOf(import_prop_types118.default.oneOfType([import_prop_types118.default.func, import_prop_types118.default.object, import_prop_types118.default.bool])), import_prop_types118.default.func, import_prop_types118.default.object])
  } : void 0;
  var ScopedCssBaseline_default = ScopedCssBaseline;

  // node_modules/@mui/material/Select/Select.js
  init_extends();
  var React164 = __toESM(require_react());
  var import_prop_types120 = __toESM(require_prop_types());
  var import_deepmerge16 = __toESM(require_deepmerge2());

  // node_modules/@mui/material/Select/SelectInput.js
  init_extends();
  var React163 = __toESM(require_react());
  var import_react_is8 = __toESM(require_react_is3());
  var import_prop_types119 = __toESM(require_prop_types());
  var import_composeClasses85 = __toESM(require_composeClasses2());
  var import_useId4 = __toESM(require_useId2());
  var import_refType13 = __toESM(require_refType2());

  // node_modules/@mui/material/Select/selectClasses.js
  var import_generateUtilityClasses86 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass90 = __toESM(require_generateUtilityClass2());
  function getSelectUtilityClasses(slot) {
    return (0, import_generateUtilityClass90.default)("MuiSelect", slot);
  }
  var selectClasses = (0, import_generateUtilityClasses86.default)("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var selectClasses_default = selectClasses;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime167 = __toESM(require_jsx_runtime());
  var import_jsx_runtime168 = __toESM(require_jsx_runtime());
  var _span4;
  var _excluded121 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default2("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses_default.select}`]: styles8.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles8[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.error}`]: styles8.error
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles8.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default2("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.icon, ownerState.variant && styles8[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles8.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default2("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles8) => styles8.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues2(a2, b2) {
    if (typeof b2 === "object" && b2 !== null) {
      return a2 === b2;
    }
    return String(a2) === String(b2);
  }
  function isEmpty3(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses83 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return (0, import_composeClasses85.default)(slots, getSelectUtilityClasses, classes2);
  };
  var SelectInput = /* @__PURE__ */ React163.forwardRef(function SelectInput2(props, ref) {
    var _MenuProps$slotProps;
    const {
      "aria-describedby": ariaDescribedby2,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded121);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React163.useRef(null);
    const displayRef = React163.useRef(null);
    const [displayNode, setDisplayNode] = React163.useState(null);
    const {
      current: isOpenControlled
    } = React163.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React163.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React163.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React163.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React163.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React163.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React163.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React163.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React163.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is8.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : (0, import_formatMuiErrorMessage.default)(2));
        }
        selected = value.some((v) => areEqualValues2(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues2(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React163.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (true) {
      React163.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values3 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values3.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes2 = useUtilityClasses83(ownerState);
    const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
    const listboxId = (0, import_useId4.default)();
    return /* @__PURE__ */ (0, import_jsx_runtime168.jsxs)(React163.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime167.jsx)(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "combobox",
        "aria-controls": listboxId,
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby2,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_default(SelectDisplayProps.className, classes2.select, className),
        id: buttonId,
        children: isEmpty3(display) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span4 || (_span4 = /* @__PURE__ */ (0, import_jsx_runtime167.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        ) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(SelectNativeInput, _extends({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes2.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes2.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(Menu_default, _extends({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          "aria-multiselectable": multiple ? "true" : void 0,
          disableListWrap: true,
          id: listboxId
        }, MenuProps.MenuListProps),
        slotProps: _extends({}, MenuProps.slotProps, {
          paper: _extends({}, paperProps, {
            style: _extends({
              minWidth: menuMinWidth
            }, paperProps != null ? paperProps.style : null)
          })
        }),
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types119.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types119.default.string,
    /**
     * @ignore
     */
    autoFocus: import_prop_types119.default.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: import_prop_types119.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: import_prop_types119.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types119.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types119.default.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: import_prop_types119.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types119.default.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types119.default.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: import_prop_types119.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types119.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types119.default.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: import_refType13.default,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types119.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types119.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: import_prop_types119.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types119.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types119.default.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: import_prop_types119.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types119.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types119.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types119.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types119.default.bool,
    /**
     * @ignore
     */
    readOnly: import_prop_types119.default.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types119.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types119.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types119.default.oneOfType([import_prop_types119.default.number, import_prop_types119.default.string]),
    /**
     * @ignore
     */
    type: import_prop_types119.default.any,
    /**
     * The input value.
     */
    value: import_prop_types119.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types119.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime169 = __toESM(require_jsx_runtime());
  var _excluded122 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var _excluded218 = ["root"];
  var useUtilityClasses84 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    return classes2;
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles8) => styles8.root,
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default2(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default2(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default2(FilledInput_default, styledRootConfig)("");
  var Select = /* @__PURE__ */ React164.forwardRef(function Select2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded122);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes2 = useUtilityClasses84(ownerState);
    const restOfClasses = _objectWithoutPropertiesLoose(classes2, _excluded218);
    const InputComponent = input || {
      standard: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(React164.Fragment, {
      children: /* @__PURE__ */ React164.cloneElement(InputComponent, _extends({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? (0, import_deepmerge16.default)(restOfClasses, inputProps.classes) : restOfClasses
        }, input ? input.props.inputProps : {})
      }, (multiple && native || displayEmpty) && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx_default(InputComponent.props.className, className, classes2.root)
      }, !input && {
        variant
      }, other))
    });
  });
  true ? Select.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: import_prop_types120.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: import_prop_types120.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types120.default.object,
    /**
     * @ignore
     */
    className: import_prop_types120.default.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: import_prop_types120.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types120.default.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: import_prop_types120.default.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types120.default.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: import_prop_types120.default.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: import_prop_types120.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: import_prop_types120.default.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: import_prop_types120.default.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types120.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types120.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types120.default.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: import_prop_types120.default.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: import_prop_types120.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types120.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types120.default.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: import_prop_types120.default.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types120.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types120.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types120.default.oneOfType([import_prop_types120.default.arrayOf(import_prop_types120.default.oneOfType([import_prop_types120.default.func, import_prop_types120.default.object, import_prop_types120.default.bool])), import_prop_types120.default.func, import_prop_types120.default.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: import_prop_types120.default.oneOfType([import_prop_types120.default.oneOf([""]), import_prop_types120.default.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types120.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // node_modules/@mui/material/Skeleton/Skeleton.js
  init_extends();
  var React165 = __toESM(require_react());
  var import_prop_types121 = __toESM(require_prop_types());
  var import_composeClasses86 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Skeleton/skeletonClasses.js
  var import_generateUtilityClasses87 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass91 = __toESM(require_generateUtilityClass2());
  function getSkeletonUtilityClass(slot) {
    return (0, import_generateUtilityClass91.default)("MuiSkeleton", slot);
  }
  var skeletonClasses = (0, import_generateUtilityClasses87.default)("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);
  var skeletonClasses_default = skeletonClasses;

  // node_modules/@mui/material/Skeleton/Skeleton.js
  var import_jsx_runtime170 = __toESM(require_jsx_runtime());
  var _excluded123 = ["animation", "className", "component", "height", "style", "variant", "width"];
  var _4 = (t2) => t2;
  var _t7;
  var _t24;
  var _t34;
  var _t44;
  var useUtilityClasses85 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      animation,
      hasChildren,
      width: width2,
      height: height2
    } = ownerState;
    const slots = {
      root: ["root", variant, animation, hasChildren && "withChildren", hasChildren && !width2 && "fitContent", hasChildren && !height2 && "heightAuto"]
    };
    return (0, import_composeClasses86.default)(slots, getSkeletonUtilityClass, classes2);
  };
  var pulseKeyframe = (0, import_styled_engine7.keyframes)(_t7 || (_t7 = _4`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
  var waveKeyframe = (0, import_styled_engine7.keyframes)(_t24 || (_t24 = _4`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
  var SkeletonRoot = styled_default2("span", {
    name: "MuiSkeleton",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], ownerState.animation !== false && styles8[ownerState.animation], ownerState.hasChildren && styles8.withChildren, ownerState.hasChildren && !ownerState.width && styles8.fitContent, ownerState.hasChildren && !ownerState.height && styles8.heightAuto];
    }
  })(({
    theme,
    ownerState
  }) => {
    const radiusUnit = getUnit(theme.shape.borderRadius) || "px";
    const radiusValue = toUnitless(theme.shape.borderRadius);
    return _extends({
      display: "block",
      // Create a "on paper" color with sufficient contrast retaining the color
      backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === "light" ? 0.11 : 0.13),
      height: "1.2em"
    }, ownerState.variant === "text" && {
      marginTop: 0,
      marginBottom: 0,
      height: "auto",
      transformOrigin: "0 55%",
      transform: "scale(1, 0.60)",
      borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
      "&:empty:before": {
        content: '"\\00a0"'
      }
    }, ownerState.variant === "circular" && {
      borderRadius: "50%"
    }, ownerState.variant === "rounded" && {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.hasChildren && {
      "& > *": {
        visibility: "hidden"
      }
    }, ownerState.hasChildren && !ownerState.width && {
      maxWidth: "fit-content"
    }, ownerState.hasChildren && !ownerState.height && {
      height: "auto"
    });
  }, ({
    ownerState
  }) => ownerState.animation === "pulse" && (0, import_styled_engine7.css)(_t34 || (_t34 = _4`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && (0, import_styled_engine7.css)(_t44 || (_t44 = _4`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
  var Skeleton = /* @__PURE__ */ React165.forwardRef(function Skeleton2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSkeleton"
    });
    const {
      animation = "pulse",
      className,
      component = "span",
      height: height2,
      style: style4,
      variant = "text",
      width: width2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded123);
    const ownerState = _extends({}, props, {
      animation,
      component,
      variant,
      hasChildren: Boolean(other.children)
    });
    const classes2 = useUtilityClasses85(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(SkeletonRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes2.root, className),
      ownerState
    }, other, {
      style: _extends({
        width: width2,
        height: height2
      }, style4)
    }));
  });
  true ? Skeleton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The animation.
     * If `false` the animation effect is disabled.
     * @default 'pulse'
     */
    animation: import_prop_types121.default.oneOf(["pulse", "wave", false]),
    /**
     * Optional children to infer width and height from.
     */
    children: import_prop_types121.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types121.default.object,
    /**
     * @ignore
     */
    className: import_prop_types121.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types121.default.elementType,
    /**
     * Height of the skeleton.
     * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
     */
    height: import_prop_types121.default.oneOfType([import_prop_types121.default.number, import_prop_types121.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types121.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types121.default.oneOfType([import_prop_types121.default.arrayOf(import_prop_types121.default.oneOfType([import_prop_types121.default.func, import_prop_types121.default.object, import_prop_types121.default.bool])), import_prop_types121.default.func, import_prop_types121.default.object]),
    /**
     * The type of content that will be rendered.
     * @default 'text'
     */
    variant: import_prop_types121.default.oneOfType([import_prop_types121.default.oneOf(["circular", "rectangular", "rounded", "text"]), import_prop_types121.default.string]),
    /**
     * Width of the skeleton.
     * Useful when the skeleton is inside an inline element with no width of its own.
     */
    width: import_prop_types121.default.oneOfType([import_prop_types121.default.number, import_prop_types121.default.string])
  } : void 0;
  var Skeleton_default = Skeleton;

  // node_modules/@mui/material/Slider/Slider.js
  init_extends();
  var React167 = __toESM(require_react());
  var import_prop_types123 = __toESM(require_prop_types());
  var import_chainPropTypes13 = __toESM(require_chainPropTypes2());
  var import_composeClasses87 = __toESM(require_composeClasses2());
  var import_colorManipulator20 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/utils/shouldSpreadAdditionalProps.js
  var shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !isHostComponent(Slot);
  };
  var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

  // node_modules/@mui/material/Slider/SliderValueLabel.js
  var React166 = __toESM(require_react());
  var import_prop_types122 = __toESM(require_prop_types());

  // node_modules/@mui/material/Slider/sliderClasses.js
  var import_generateUtilityClasses88 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass92 = __toESM(require_generateUtilityClass2());
  function getSliderUtilityClass(slot) {
    return (0, import_generateUtilityClass92.default)("MuiSlider", slot);
  }
  var sliderClasses = (0, import_generateUtilityClasses88.default)("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
  var sliderClasses_default = sliderClasses;

  // node_modules/@mui/material/Slider/SliderValueLabel.js
  var import_jsx_runtime171 = __toESM(require_jsx_runtime());
  var import_jsx_runtime172 = __toESM(require_jsx_runtime());
  var useValueLabelClasses = (props) => {
    const {
      open
    } = props;
    const utilityClasses = {
      offset: clsx_default(open && sliderClasses_default.valueLabelOpen),
      circle: sliderClasses_default.valueLabelCircle,
      label: sliderClasses_default.valueLabelLabel
    };
    return utilityClasses;
  };
  function SliderValueLabel(props) {
    const {
      children,
      className,
      value
    } = props;
    const classes2 = useValueLabelClasses(props);
    if (!children) {
      return null;
    }
    return /* @__PURE__ */ React166.cloneElement(children, {
      className: clsx_default(children.props.className)
    }, /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(React166.Fragment, {
      children: [children.props.children, /* @__PURE__ */ (0, import_jsx_runtime171.jsx)("span", {
        className: clsx_default(classes2.offset, className),
        "aria-hidden": true,
        children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)("span", {
          className: classes2.circle,
          children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)("span", {
            className: classes2.label,
            children: value
          })
        })
      })]
    }));
  }
  true ? SliderValueLabel.propTypes = {
    children: import_prop_types122.default.element.isRequired,
    className: import_prop_types122.default.string,
    value: import_prop_types122.default.node
  } : void 0;

  // node_modules/@mui/material/Slider/Slider.js
  var import_jsx_runtime173 = __toESM(require_jsx_runtime());
  var import_jsx_runtime174 = __toESM(require_jsx_runtime());
  var _excluded124 = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "shiftStep", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
  var useThemeProps12 = createUseThemeProps("MuiSlider");
  function Identity2(x) {
    return x;
  }
  var SliderRoot = styled_default2("span", {
    name: "MuiSlider",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles8[`size${capitalize_default(ownerState.size)}`], ownerState.marked && styles8.marked, ownerState.orientation === "vertical" && styles8.vertical, ownerState.track === "inverted" && styles8.trackInverted, ownerState.track === false && styles8.trackFalse];
    }
  })(({
    theme
  }) => {
    var _theme$vars;
    return {
      borderRadius: 12,
      boxSizing: "content-box",
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      touchAction: "none",
      WebkitTapHighlightColor: "transparent",
      "@media print": {
        colorAdjust: "exact"
      },
      [`&.${sliderClasses_default.disabled}`]: {
        pointerEvents: "none",
        cursor: "default",
        color: (theme.vars || theme).palette.grey[400]
      },
      [`&.${sliderClasses_default.dragging}`]: {
        [`& .${sliderClasses_default.thumb}, & .${sliderClasses_default.track}`]: {
          transition: "none"
        }
      },
      variants: [...Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter((key) => {
        var _theme$vars2;
        return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main;
      }).map((color2) => ({
        props: {
          color: color2
        },
        style: {
          color: (theme.vars || theme).palette[color2].main
        }
      })), {
        props: {
          orientation: "horizontal"
        },
        style: {
          height: 4,
          width: "100%",
          padding: "13px 0",
          // The primary input mechanism of the device includes a pointing device of limited accuracy.
          "@media (pointer: coarse)": {
            // Reach 42px touch target, about ~8mm on screen.
            padding: "20px 0"
          }
        }
      }, {
        props: {
          orientation: "horizontal",
          size: "small"
        },
        style: {
          height: 2
        }
      }, {
        props: {
          orientation: "horizontal",
          marked: true
        },
        style: {
          marginBottom: 20
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          height: "100%",
          width: 4,
          padding: "0 13px",
          // The primary input mechanism of the device includes a pointing device of limited accuracy.
          "@media (pointer: coarse)": {
            // Reach 42px touch target, about ~8mm on screen.
            padding: "0 20px"
          }
        }
      }, {
        props: {
          orientation: "vertical",
          size: "small"
        },
        style: {
          width: 2
        }
      }, {
        props: {
          orientation: "vertical",
          marked: true
        },
        style: {
          marginRight: 44
        }
      }]
    };
  });
  var SliderRail = styled_default2("span", {
    name: "MuiSlider",
    slot: "Rail",
    overridesResolver: (props, styles8) => styles8.rail
  })({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    backgroundColor: "currentColor",
    opacity: 0.38,
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        width: "100%",
        height: "inherit",
        top: "50%",
        transform: "translateY(-50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        height: "100%",
        width: "inherit",
        left: "50%",
        transform: "translateX(-50%)"
      }
    }, {
      props: {
        track: "inverted"
      },
      style: {
        opacity: 1
      }
    }]
  });
  var SliderTrack = styled_default2("span", {
    name: "MuiSlider",
    slot: "Track",
    overridesResolver: (props, styles8) => styles8.track
  })(({
    theme
  }) => {
    var _theme$vars3;
    return {
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      border: "1px solid currentColor",
      backgroundColor: "currentColor",
      transition: theme.transitions.create(["left", "width", "bottom", "height"], {
        duration: theme.transitions.duration.shortest
      }),
      variants: [{
        props: {
          size: "small"
        },
        style: {
          border: "none"
        }
      }, {
        props: {
          orientation: "horizontal"
        },
        style: {
          height: "inherit",
          top: "50%",
          transform: "translateY(-50%)"
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          width: "inherit",
          left: "50%",
          transform: "translateX(-50%)"
        }
      }, {
        props: {
          track: false
        },
        style: {
          display: "none"
        }
      }, ...Object.keys(((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette).filter((key) => {
        var _theme$vars4;
        return ((_theme$vars4 = theme.vars) != null ? _theme$vars4 : theme).palette[key].main;
      }).map((color2) => ({
        props: {
          color: color2,
          track: "inverted"
        },
        style: _extends({}, theme.vars ? {
          backgroundColor: theme.vars.palette.Slider[`${color2}Track`],
          borderColor: theme.vars.palette.Slider[`${color2}Track`]
        } : _extends({
          backgroundColor: (0, import_colorManipulator20.lighten)(theme.palette[color2].main, 0.62),
          borderColor: (0, import_colorManipulator20.lighten)(theme.palette[color2].main, 0.62)
        }, theme.applyStyles("dark", {
          backgroundColor: (0, import_colorManipulator20.darken)(theme.palette[color2].main, 0.5)
        }), theme.applyStyles("dark", {
          borderColor: (0, import_colorManipulator20.darken)(theme.palette[color2].main, 0.5)
        })))
      }))]
    };
  });
  var SliderThumb = styled_default2("span", {
    name: "MuiSlider",
    slot: "Thumb",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.thumb, styles8[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles8[`thumbSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme
  }) => {
    var _theme$vars5;
    return {
      position: "absolute",
      width: 20,
      height: 20,
      boxSizing: "border-box",
      borderRadius: "50%",
      outline: 0,
      backgroundColor: "currentColor",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
        duration: theme.transitions.duration.shortest
      }),
      "&::before": {
        position: "absolute",
        content: '""',
        borderRadius: "inherit",
        width: "100%",
        height: "100%",
        boxShadow: (theme.vars || theme).shadows[2]
      },
      "&::after": {
        position: "absolute",
        content: '""',
        borderRadius: "50%",
        // 42px is the hit target
        width: 42,
        height: 42,
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)"
      },
      [`&.${sliderClasses_default.disabled}`]: {
        "&:hover": {
          boxShadow: "none"
        }
      },
      variants: [{
        props: {
          size: "small"
        },
        style: {
          width: 12,
          height: 12,
          "&::before": {
            boxShadow: "none"
          }
        }
      }, {
        props: {
          orientation: "horizontal"
        },
        style: {
          top: "50%",
          transform: "translate(-50%, -50%)"
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          left: "50%",
          transform: "translate(-50%, 50%)"
        }
      }, ...Object.keys(((_theme$vars5 = theme.vars) != null ? _theme$vars5 : theme).palette).filter((key) => {
        var _theme$vars6;
        return ((_theme$vars6 = theme.vars) != null ? _theme$vars6 : theme).palette[key].main;
      }).map((color2) => ({
        props: {
          color: color2
        },
        style: {
          [`&:hover, &.${sliderClasses_default.focusVisible}`]: _extends({}, theme.vars ? {
            boxShadow: `0px 0px 0px 8px rgba(${theme.vars.palette[color2].mainChannel} / 0.16)`
          } : {
            boxShadow: `0px 0px 0px 8px ${(0, import_colorManipulator20.alpha)(theme.palette[color2].main, 0.16)}`
          }, {
            "@media (hover: none)": {
              boxShadow: "none"
            }
          }),
          [`&.${sliderClasses_default.active}`]: _extends({}, theme.vars ? {
            boxShadow: `0px 0px 0px 14px rgba(${theme.vars.palette[color2].mainChannel} / 0.16)`
          } : {
            boxShadow: `0px 0px 0px 14px ${(0, import_colorManipulator20.alpha)(theme.palette[color2].main, 0.16)}`
          })
        }
      }))]
    };
  });
  var SliderValueLabel2 = styled_default2(SliderValueLabel, {
    name: "MuiSlider",
    slot: "ValueLabel",
    overridesResolver: (props, styles8) => styles8.valueLabel
  })(({
    theme
  }) => _extends({
    zIndex: 1,
    whiteSpace: "nowrap"
  }, theme.typography.body2, {
    fontWeight: 500,
    transition: theme.transitions.create(["transform"], {
      duration: theme.transitions.duration.shortest
    }),
    position: "absolute",
    backgroundColor: (theme.vars || theme).palette.grey[600],
    borderRadius: 2,
    color: (theme.vars || theme).palette.common.white,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0.25rem 0.75rem",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        transform: "translateY(-100%) scale(0)",
        top: "-10px",
        transformOrigin: "bottom center",
        "&::before": {
          position: "absolute",
          content: '""',
          width: 8,
          height: 8,
          transform: "translate(-50%, 50%) rotate(45deg)",
          backgroundColor: "inherit",
          bottom: 0,
          left: "50%"
        },
        [`&.${sliderClasses_default.valueLabelOpen}`]: {
          transform: "translateY(-100%) scale(1)"
        }
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        transform: "translateY(-50%) scale(0)",
        right: "30px",
        top: "50%",
        transformOrigin: "right center",
        "&::before": {
          position: "absolute",
          content: '""',
          width: 8,
          height: 8,
          transform: "translate(-50%, -50%) rotate(45deg)",
          backgroundColor: "inherit",
          right: -8,
          top: "50%"
        },
        [`&.${sliderClasses_default.valueLabelOpen}`]: {
          transform: "translateY(-50%) scale(1)"
        }
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        fontSize: theme.typography.pxToRem(12),
        padding: "0.25rem 0.5rem"
      }
    }, {
      props: {
        orientation: "vertical",
        size: "small"
      },
      style: {
        right: "20px"
      }
    }]
  }));
  var SliderMark = styled_default2("span", {
    name: "MuiSlider",
    slot: "Mark",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "markActive",
    overridesResolver: (props, styles8) => {
      const {
        markActive
      } = props;
      return [styles8.mark, markActive && styles8.markActive];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: "currentColor",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        top: "50%",
        transform: "translate(-1px, -50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: "50%",
        transform: "translate(-50%, 1px)"
      }
    }, {
      props: {
        markActive: true
      },
      style: {
        backgroundColor: (theme.vars || theme).palette.background.paper,
        opacity: 0.8
      }
    }]
  }));
  var SliderMarkLabel = styled_default2("span", {
    name: "MuiSlider",
    slot: "MarkLabel",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "markLabelActive",
    overridesResolver: (props, styles8) => styles8.markLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    color: (theme.vars || theme).palette.text.secondary,
    position: "absolute",
    whiteSpace: "nowrap",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        top: 30,
        transform: "translateX(-50%)",
        "@media (pointer: coarse)": {
          top: 40
        }
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: 36,
        transform: "translateY(50%)",
        "@media (pointer: coarse)": {
          left: 44
        }
      }
    }, {
      props: {
        markLabelActive: true
      },
      style: {
        color: (theme.vars || theme).palette.text.primary
      }
    }]
  }));
  var useUtilityClasses86 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes: classes2,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color2 && `color${capitalize_default(color2)}`, size && `size${capitalize_default(size)}`],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize_default(size)}`, color2 && `thumbColor${capitalize_default(color2)}`],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return (0, import_composeClasses87.default)(slots, getSliderUtilityClass, classes2);
  };
  var Forward = ({
    children
  }) => children;
  var Slider = /* @__PURE__ */ React167.forwardRef(function Slider2(inputProps, ref) {
    var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
    const props = useThemeProps12({
      props: inputProps,
      name: "MuiSlider"
    });
    const isRtl = useRtl();
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      // eslint-disable-next-line react/prop-types
      component = "span",
      components = {},
      componentsProps = {},
      color: color2 = "primary",
      classes: classesProp,
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max2 = 100,
      min: min2 = 0,
      orientation = "horizontal",
      shiftStep = 10,
      size = "medium",
      step = 1,
      scale = Identity2,
      slotProps,
      slots,
      track = "normal",
      valueLabelDisplay = "off",
      valueLabelFormat = Identity2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded124);
    const ownerState = _extends({}, props, {
      isRtl,
      max: max2,
      min: min2,
      classes: classesProp,
      disabled,
      disableSwap,
      orientation,
      marks: marksProp,
      color: color2,
      size,
      step,
      shiftStep,
      scale,
      track,
      valueLabelDisplay,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      open,
      active,
      axis,
      focusedThumbIndex,
      range,
      dragging,
      marks,
      values: values3,
      trackOffset,
      trackLeap,
      getThumbStyle
    } = useSlider(_extends({}, ownerState, {
      rootRef: ref
    }));
    ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
    ownerState.dragging = dragging;
    ownerState.focusedThumbIndex = focusedThumbIndex;
    const classes2 = useUtilityClasses86(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
    const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
    const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
    const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
    const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : SliderValueLabel2;
    const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
    const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
    const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
    const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
    const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
    const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
    const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
    const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
    const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      getSlotProps: getRootProps,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: _extends({}, shouldSpreadAdditionalProps_default(RootSlot) && {
        as: component
      }),
      ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
      className: [classes2.root, className]
    });
    const railProps = useSlotProps({
      elementType: RailSlot,
      externalSlotProps: railSlotProps,
      ownerState,
      className: classes2.rail
    });
    const trackProps = useSlotProps({
      elementType: TrackSlot,
      externalSlotProps: trackSlotProps,
      additionalProps: {
        style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState: _extends({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
      className: classes2.track
    });
    const thumbProps = useSlotProps({
      elementType: ThumbSlot,
      getSlotProps: getThumbProps,
      externalSlotProps: thumbSlotProps,
      ownerState: _extends({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
      className: classes2.thumb
    });
    const valueLabelProps = useSlotProps({
      elementType: ValueLabelSlot,
      externalSlotProps: valueLabelSlotProps,
      ownerState: _extends({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
      className: classes2.valueLabel
    });
    const markProps = useSlotProps({
      elementType: MarkSlot,
      externalSlotProps: markSlotProps,
      ownerState,
      className: classes2.mark
    });
    const markLabelProps = useSlotProps({
      elementType: MarkLabelSlot,
      externalSlotProps: markLabelSlotProps,
      ownerState,
      className: classes2.markLabel
    });
    const inputSliderProps = useSlotProps({
      elementType: InputSlot,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: inputSlotProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(RootSlot, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsx)(RailSlot, _extends({}, railProps)), /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(TrackSlot, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index) => {
        const percent = valueToPercent(mark.value, min2, max2);
        const style4 = axisProps2[axis].offset(percent);
        let markActive;
        if (track === false) {
          markActive = values3.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values3[0] && mark.value <= values3[values3.length - 1] : mark.value <= values3[0]) || track === "inverted" && (range ? mark.value <= values3[0] || mark.value >= values3[values3.length - 1] : mark.value >= values3[0]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(React167.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime173.jsx)(MarkSlot, _extends({
            "data-index": index
          }, markProps, !isHostComponent(MarkSlot) && {
            markActive
          }, {
            style: _extends({}, style4, markProps.style),
            className: clsx_default(markProps.className, markActive && classes2.markActive)
          })), mark.label != null ? /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(MarkLabelSlot, _extends({
            "aria-hidden": true,
            "data-index": index
          }, markLabelProps, !isHostComponent(MarkLabelSlot) && {
            markLabelActive: markActive
          }, {
            style: _extends({}, style4, markLabelProps.style),
            className: clsx_default(classes2.markLabel, markLabelProps.className, markActive && classes2.markLabelActive),
            children: mark.label
          })) : null]
        }, index);
      }), values3.map((value, index) => {
        const percent = valueToPercent(value, min2, max2);
        const style4 = axisProps2[axis].offset(percent);
        const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
        return (
          /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
          /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {
            valueLabelFormat,
            valueLabelDisplay,
            value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat,
            index,
            open: open === index || active === index || valueLabelDisplay === "on",
            disabled
          }, valueLabelProps, {
            children: /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(ThumbSlot, _extends({
              "data-index": index
            }, thumbProps, {
              className: clsx_default(classes2.thumb, thumbProps.className, active === index && classes2.active, focusedThumbIndex === index && classes2.focusVisible),
              style: _extends({}, style4, getThumbStyle(index), thumbProps.style),
              children: /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(InputSlot, _extends({
                "data-index": index,
                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                "aria-valuenow": scale(value),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                value: values3[index]
              }, inputSliderProps))
            }))
          }), index)
        );
      })]
    }));
  });
  true ? Slider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The label of the slider.
     */
    "aria-label": (0, import_chainPropTypes13.default)(import_prop_types123.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": import_prop_types123.default.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": (0, import_chainPropTypes13.default)(import_prop_types123.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * @ignore
     */
    children: import_prop_types123.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types123.default.object,
    /**
     * @ignore
     */
    className: import_prop_types123.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types123.default.oneOfType([import_prop_types123.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types123.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    components: import_prop_types123.default.shape({
      Input: import_prop_types123.default.elementType,
      Mark: import_prop_types123.default.elementType,
      MarkLabel: import_prop_types123.default.elementType,
      Rail: import_prop_types123.default.elementType,
      Root: import_prop_types123.default.elementType,
      Thumb: import_prop_types123.default.elementType,
      Track: import_prop_types123.default.elementType,
      ValueLabel: import_prop_types123.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
     *
     * @default {}
     */
    componentsProps: import_prop_types123.default.shape({
      input: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      mark: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      markLabel: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      rail: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      root: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      thumb: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      track: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      valueLabel: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.shape({
        children: import_prop_types123.default.element,
        className: import_prop_types123.default.string,
        open: import_prop_types123.default.bool,
        style: import_prop_types123.default.object,
        value: import_prop_types123.default.number,
        valueLabelDisplay: import_prop_types123.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types123.default.oneOfType([import_prop_types123.default.arrayOf(import_prop_types123.default.number), import_prop_types123.default.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types123.default.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: import_prop_types123.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: import_prop_types123.default.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: import_prop_types123.default.func,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: import_prop_types123.default.oneOfType([import_prop_types123.default.arrayOf(import_prop_types123.default.shape({
      label: import_prop_types123.default.node,
      value: import_prop_types123.default.number.isRequired
    })), import_prop_types123.default.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: import_prop_types123.default.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: import_prop_types123.default.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: import_prop_types123.default.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: import_prop_types123.default.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: import_prop_types123.default.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types123.default.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: import_prop_types123.default.func,
    /**
     * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
     * @default 10
     */
    shiftStep: import_prop_types123.default.number,
    /**
     * The size of the slider.
     * @default 'medium'
     */
    size: import_prop_types123.default.oneOfType([import_prop_types123.default.oneOf(["small", "medium"]), import_prop_types123.default.string]),
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: import_prop_types123.default.shape({
      input: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      mark: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      markLabel: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      rail: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      root: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      thumb: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      track: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object]),
      valueLabel: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.shape({
        children: import_prop_types123.default.element,
        className: import_prop_types123.default.string,
        open: import_prop_types123.default.bool,
        style: import_prop_types123.default.object,
        value: import_prop_types123.default.number,
        valueLabelDisplay: import_prop_types123.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types123.default.shape({
      input: import_prop_types123.default.elementType,
      mark: import_prop_types123.default.elementType,
      markLabel: import_prop_types123.default.elementType,
      rail: import_prop_types123.default.elementType,
      root: import_prop_types123.default.elementType,
      thumb: import_prop_types123.default.elementType,
      track: import_prop_types123.default.elementType,
      valueLabel: import_prop_types123.default.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: import_prop_types123.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types123.default.oneOfType([import_prop_types123.default.arrayOf(import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object, import_prop_types123.default.bool])), import_prop_types123.default.func, import_prop_types123.default.object]),
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: import_prop_types123.default.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: import_prop_types123.default.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: import_prop_types123.default.oneOfType([import_prop_types123.default.arrayOf(import_prop_types123.default.number), import_prop_types123.default.number]),
    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: import_prop_types123.default.oneOf(["auto", "off", "on"]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.string])
  } : void 0;
  var Slider_default = Slider;

  // node_modules/@mui/material/Snackbar/Snackbar.js
  init_extends();
  var React169 = __toESM(require_react());
  var import_prop_types125 = __toESM(require_prop_types());
  var import_composeClasses89 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/SnackbarContent/SnackbarContent.js
  init_extends();
  var React168 = __toESM(require_react());
  var import_prop_types124 = __toESM(require_prop_types());
  var import_composeClasses88 = __toESM(require_composeClasses2());
  var import_colorManipulator21 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js
  var import_generateUtilityClasses89 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass93 = __toESM(require_generateUtilityClass2());
  function getSnackbarContentUtilityClass(slot) {
    return (0, import_generateUtilityClass93.default)("MuiSnackbarContent", slot);
  }
  var snackbarContentClasses = (0, import_generateUtilityClasses89.default)("MuiSnackbarContent", ["root", "message", "action"]);
  var snackbarContentClasses_default = snackbarContentClasses;

  // node_modules/@mui/material/SnackbarContent/SnackbarContent.js
  var import_jsx_runtime175 = __toESM(require_jsx_runtime());
  var import_jsx_runtime176 = __toESM(require_jsx_runtime());
  var _excluded125 = ["action", "className", "message", "role"];
  var useUtilityClasses87 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      action: ["action"],
      message: ["message"]
    };
    return (0, import_composeClasses88.default)(slots, getSnackbarContentUtilityClass, classes2);
  };
  var SnackbarContentRoot = styled_default2(Paper_default, {
    name: "MuiSnackbarContent",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => {
    const emphasis = theme.palette.mode === "light" ? 0.8 : 0.98;
    const backgroundColor2 = (0, import_colorManipulator21.emphasize)(theme.palette.background.default, emphasis);
    return _extends({}, theme.typography.body2, {
      color: theme.vars ? theme.vars.palette.SnackbarContent.color : theme.palette.getContrastText(backgroundColor2),
      backgroundColor: theme.vars ? theme.vars.palette.SnackbarContent.bg : backgroundColor2,
      display: "flex",
      alignItems: "center",
      flexWrap: "wrap",
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      flexGrow: 1,
      [theme.breakpoints.up("sm")]: {
        flexGrow: "initial",
        minWidth: 288
      }
    });
  });
  var SnackbarContentMessage = styled_default2("div", {
    name: "MuiSnackbarContent",
    slot: "Message",
    overridesResolver: (props, styles8) => styles8.message
  })({
    padding: "8px 0"
  });
  var SnackbarContentAction = styled_default2("div", {
    name: "MuiSnackbarContent",
    slot: "Action",
    overridesResolver: (props, styles8) => styles8.action
  })({
    display: "flex",
    alignItems: "center",
    marginLeft: "auto",
    paddingLeft: 16,
    marginRight: -8
  });
  var SnackbarContent = /* @__PURE__ */ React168.forwardRef(function SnackbarContent2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSnackbarContent"
    });
    const {
      action,
      className,
      message,
      role = "alert"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded125);
    const ownerState = props;
    const classes2 = useUtilityClasses87(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)(SnackbarContentRoot, _extends({
      role,
      square: true,
      elevation: 6,
      className: clsx_default(classes2.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime175.jsx)(SnackbarContentMessage, {
        className: classes2.message,
        ownerState,
        children: message
      }), action ? /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(SnackbarContentAction, {
        className: classes2.action,
        ownerState,
        children: action
      }) : null]
    }));
  });
  true ? SnackbarContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: import_prop_types124.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types124.default.object,
    /**
     * @ignore
     */
    className: import_prop_types124.default.string,
    /**
     * The message to display.
     */
    message: import_prop_types124.default.node,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types124.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types124.default.oneOfType([import_prop_types124.default.arrayOf(import_prop_types124.default.oneOfType([import_prop_types124.default.func, import_prop_types124.default.object, import_prop_types124.default.bool])), import_prop_types124.default.func, import_prop_types124.default.object])
  } : void 0;
  var SnackbarContent_default = SnackbarContent;

  // node_modules/@mui/material/Snackbar/snackbarClasses.js
  var import_generateUtilityClasses90 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass94 = __toESM(require_generateUtilityClass2());
  function getSnackbarUtilityClass(slot) {
    return (0, import_generateUtilityClass94.default)("MuiSnackbar", slot);
  }
  var snackbarClasses = (0, import_generateUtilityClasses90.default)("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);
  var snackbarClasses_default = snackbarClasses;

  // node_modules/@mui/material/Snackbar/Snackbar.js
  var import_jsx_runtime177 = __toESM(require_jsx_runtime());
  var _excluded126 = ["onEnter", "onExited"];
  var _excluded219 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var useUtilityClasses88 = (ownerState) => {
    const {
      classes: classes2,
      anchorOrigin
    } = ownerState;
    const slots = {
      root: ["root", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`]
    };
    return (0, import_composeClasses89.default)(slots, getSnackbarUtilityClass, classes2);
  };
  var SnackbarRoot = styled_default2("div", {
    name: "MuiSnackbar",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const center = {
      left: "50%",
      right: "auto",
      transform: "translateX(-50%)"
    };
    return _extends({
      zIndex: (theme.vars || theme).zIndex.snackbar,
      position: "fixed",
      display: "flex",
      left: 8,
      right: 8,
      justifyContent: "center",
      alignItems: "center"
    }, ownerState.anchorOrigin.vertical === "top" ? {
      top: 8
    } : {
      bottom: 8
    }, ownerState.anchorOrigin.horizontal === "left" && {
      justifyContent: "flex-start"
    }, ownerState.anchorOrigin.horizontal === "right" && {
      justifyContent: "flex-end"
    }, {
      [theme.breakpoints.up("sm")]: _extends({}, ownerState.anchorOrigin.vertical === "top" ? {
        top: 24
      } : {
        bottom: 24
      }, ownerState.anchorOrigin.horizontal === "center" && center, ownerState.anchorOrigin.horizontal === "left" && {
        left: 24,
        right: "auto"
      }, ownerState.anchorOrigin.horizontal === "right" && {
        right: 24,
        left: "auto"
      })
    });
  });
  var Snackbar = /* @__PURE__ */ React169.forwardRef(function Snackbar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSnackbar"
    });
    const theme = useTheme6();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      action,
      anchorOrigin: {
        vertical,
        horizontal
      } = {
        vertical: "bottom",
        horizontal: "left"
      },
      autoHideDuration = null,
      children,
      className,
      ClickAwayListenerProps,
      ContentProps,
      disableWindowBlurListener = false,
      message,
      open,
      TransitionComponent = Grow_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps: {
        onEnter,
        onExited
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded126), other = _objectWithoutPropertiesLoose(props, _excluded219);
    const ownerState = _extends({}, props, {
      anchorOrigin: {
        vertical,
        horizontal
      },
      autoHideDuration,
      disableWindowBlurListener,
      TransitionComponent,
      transitionDuration
    });
    const classes2 = useUtilityClasses88(ownerState);
    const {
      getRootProps,
      onClickAway
    } = useSnackbar(_extends({}, ownerState));
    const [exited, setExited] = React169.useState(true);
    const rootProps = useSlotProps({
      elementType: SnackbarRoot,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      ownerState,
      additionalProps: {
        ref
      },
      className: [classes2.root, className]
    });
    const handleExited = (node2) => {
      setExited(true);
      if (onExited) {
        onExited(node2);
      }
    };
    const handleEnter = (node2, isAppearing) => {
      setExited(false);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    };
    if (!open && exited) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(ClickAwayListener, _extends({
      onClickAway
    }, ClickAwayListenerProps, {
      children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(SnackbarRoot, _extends({}, rootProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(TransitionComponent, _extends({
          appear: true,
          in: open,
          timeout: transitionDuration,
          direction: vertical === "top" ? "down" : "up",
          onEnter: handleEnter,
          onExited: handleExited
        }, TransitionProps, {
          children: children || /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(SnackbarContent_default, _extends({
            message,
            action
          }, ContentProps))
        }))
      }))
    }));
  });
  true ? Snackbar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: import_prop_types125.default.node,
    /**
     * The anchor of the `Snackbar`.
     * On smaller screens, the component grows to occupy all the available width,
     * the horizontal alignment is ignored.
     * @default { vertical: 'bottom', horizontal: 'left' }
     */
    anchorOrigin: import_prop_types125.default.shape({
      horizontal: import_prop_types125.default.oneOf(["center", "left", "right"]).isRequired,
      vertical: import_prop_types125.default.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: import_prop_types125.default.number,
    /**
     * Replace the `SnackbarContent` component.
     */
    children: import_prop_types125.default.element,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types125.default.object,
    /**
     * @ignore
     */
    className: import_prop_types125.default.string,
    /**
     * Props applied to the `ClickAwayListener` element.
     */
    ClickAwayListenerProps: import_prop_types125.default.object,
    /**
     * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.
     */
    ContentProps: import_prop_types125.default.object,
    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: import_prop_types125.default.bool,
    /**
     * When displaying multiple consecutive snackbars using a single parent-rendered
     * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
     * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
     * in place, and features like `autoHideDuration` could be affected.
     */
    key: () => null,
    /**
     * The message to display.
     */
    message: import_prop_types125.default.node,
    /**
     * @ignore
     */
    onBlur: import_prop_types125.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
     */
    onClose: import_prop_types125.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types125.default.func,
    /**
     * @ignore
     */
    onMouseEnter: import_prop_types125.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types125.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types125.default.bool,
    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: import_prop_types125.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types125.default.oneOfType([import_prop_types125.default.arrayOf(import_prop_types125.default.oneOfType([import_prop_types125.default.func, import_prop_types125.default.object, import_prop_types125.default.bool])), import_prop_types125.default.func, import_prop_types125.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types125.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types125.default.oneOfType([import_prop_types125.default.number, import_prop_types125.default.shape({
      appear: import_prop_types125.default.number,
      enter: import_prop_types125.default.number,
      exit: import_prop_types125.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types125.default.object
  } : void 0;
  var Snackbar_default = Snackbar;

  // node_modules/@mui/material/SpeedDial/SpeedDial.js
  init_extends();
  var React171 = __toESM(require_react());
  var import_react_is9 = __toESM(require_react_is3());
  var import_prop_types127 = __toESM(require_prop_types());
  var import_composeClasses90 = __toESM(require_composeClasses2());
  var import_useTimeout4 = __toESM(require_useTimeout2());
  var import_clamp3 = __toESM(require_clamp2());

  // node_modules/@mui/material/Zoom/Zoom.js
  init_extends();
  var React170 = __toESM(require_react());
  var import_prop_types126 = __toESM(require_prop_types());
  var import_elementAcceptingRef5 = __toESM(require_elementAcceptingRef2());
  var import_jsx_runtime178 = __toESM(require_jsx_runtime());
  var _excluded127 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles5 = {
    entering: {
      transform: "none"
    },
    entered: {
      transform: "none"
    }
  };
  var Zoom = /* @__PURE__ */ React170.forwardRef(function Zoom2(props, ref) {
    const theme = useTheme6();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout3 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded127);
    const nodeRef = React170.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout3,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout3
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React170.cloneElement(children, _extends({
          style: _extends({
            transform: "scale(0)",
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles5[state], style4, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Zoom.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types126.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types126.default.bool,
    /**
     * A single child content element.
     */
    children: import_elementAcceptingRef5.default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types126.default.oneOfType([import_prop_types126.default.shape({
      enter: import_prop_types126.default.string,
      exit: import_prop_types126.default.string
    }), import_prop_types126.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types126.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types126.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types126.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types126.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types126.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types126.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types126.default.func,
    /**
     * @ignore
     */
    style: import_prop_types126.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types126.default.oneOfType([import_prop_types126.default.number, import_prop_types126.default.shape({
      appear: import_prop_types126.default.number,
      enter: import_prop_types126.default.number,
      exit: import_prop_types126.default.number
    })])
  } : void 0;
  var Zoom_default = Zoom;

  // node_modules/@mui/material/SpeedDial/speedDialClasses.js
  var import_generateUtilityClasses91 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass95 = __toESM(require_generateUtilityClass2());
  function getSpeedDialUtilityClass(slot) {
    return (0, import_generateUtilityClass95.default)("MuiSpeedDial", slot);
  }
  var speedDialClasses = (0, import_generateUtilityClasses91.default)("MuiSpeedDial", ["root", "fab", "directionUp", "directionDown", "directionLeft", "directionRight", "actions", "actionsClosed"]);
  var speedDialClasses_default = speedDialClasses;

  // node_modules/@mui/material/SpeedDial/SpeedDial.js
  var import_jsx_runtime179 = __toESM(require_jsx_runtime());
  var import_jsx_runtime180 = __toESM(require_jsx_runtime());
  var _excluded128 = ["ref"];
  var _excluded220 = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var _excluded312 = ["ref"];
  var useUtilityClasses89 = (ownerState) => {
    const {
      classes: classes2,
      open,
      direction: direction2
    } = ownerState;
    const slots = {
      root: ["root", `direction${capitalize_default(direction2)}`],
      fab: ["fab"],
      actions: ["actions", !open && "actionsClosed"]
    };
    return (0, import_composeClasses90.default)(slots, getSpeedDialUtilityClass, classes2);
  };
  function getOrientation(direction2) {
    if (direction2 === "up" || direction2 === "down") {
      return "vertical";
    }
    if (direction2 === "right" || direction2 === "left") {
      return "horizontal";
    }
    return void 0;
  }
  var dialRadius = 32;
  var spacingActions = 16;
  var SpeedDialRoot = styled_default2("div", {
    name: "MuiSpeedDial",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`direction${capitalize_default(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.speedDial,
    display: "flex",
    alignItems: "center",
    pointerEvents: "none"
  }, ownerState.direction === "up" && {
    flexDirection: "column-reverse",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "column-reverse",
      marginBottom: -dialRadius,
      paddingBottom: spacingActions + dialRadius
    }
  }, ownerState.direction === "down" && {
    flexDirection: "column",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "column",
      marginTop: -dialRadius,
      paddingTop: spacingActions + dialRadius
    }
  }, ownerState.direction === "left" && {
    flexDirection: "row-reverse",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "row-reverse",
      marginRight: -dialRadius,
      paddingRight: spacingActions + dialRadius
    }
  }, ownerState.direction === "right" && {
    flexDirection: "row",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "row",
      marginLeft: -dialRadius,
      paddingLeft: spacingActions + dialRadius
    }
  }));
  var SpeedDialFab = styled_default2(Fab_default, {
    name: "MuiSpeedDial",
    slot: "Fab",
    overridesResolver: (props, styles8) => styles8.fab
  })(() => ({
    pointerEvents: "auto"
  }));
  var SpeedDialActions = styled_default2("div", {
    name: "MuiSpeedDial",
    slot: "Actions",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.actions, !ownerState.open && styles8.actionsClosed];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    pointerEvents: "auto"
  }, !ownerState.open && {
    transition: "top 0s linear 0.2s",
    pointerEvents: "none"
  }));
  var SpeedDial = /* @__PURE__ */ React171.forwardRef(function SpeedDial2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSpeedDial"
    });
    const theme = useTheme6();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      ariaLabel,
      FabProps: {
        ref: origDialButtonRef
      } = {},
      children: childrenProp,
      className,
      direction: direction2 = "up",
      hidden = false,
      icon,
      onBlur,
      onClose,
      onFocus,
      onKeyDown,
      onMouseEnter,
      onMouseLeave,
      onOpen,
      open: openProp,
      TransitionComponent = Zoom_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props, FabProps = _objectWithoutPropertiesLoose(props.FabProps, _excluded128), other = _objectWithoutPropertiesLoose(props, _excluded220);
    const [open, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "SpeedDial",
      state: "open"
    });
    const ownerState = _extends({}, props, {
      open,
      direction: direction2
    });
    const classes2 = useUtilityClasses89(ownerState);
    const eventTimer = (0, import_useTimeout4.default)();
    const focusedAction = React171.useRef(0);
    const nextItemArrowKey = React171.useRef();
    const actions = React171.useRef([]);
    actions.current = [actions.current[0]];
    const handleOwnFabRef = React171.useCallback((fabFef) => {
      actions.current[0] = fabFef;
    }, []);
    const handleFabRef = useForkRef_default(origDialButtonRef, handleOwnFabRef);
    const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {
      return (buttonRef) => {
        actions.current[dialActionIndex + 1] = buttonRef;
        if (origButtonRef) {
          origButtonRef(buttonRef);
        }
      };
    };
    const handleKeyDown = (event) => {
      if (onKeyDown) {
        onKeyDown(event);
      }
      const key = event.key.replace("Arrow", "").toLowerCase();
      const {
        current: nextItemArrowKeyCurrent = key
      } = nextItemArrowKey;
      if (event.key === "Escape") {
        setOpenState(false);
        actions.current[0].focus();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
        return;
      }
      if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== void 0) {
        event.preventDefault();
        const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1;
        const nextAction = (0, import_clamp3.default)(focusedAction.current + actionStep, 0, actions.current.length - 1);
        actions.current[nextAction].focus();
        focusedAction.current = nextAction;
        nextItemArrowKey.current = nextItemArrowKeyCurrent;
      }
    };
    React171.useEffect(() => {
      if (!open) {
        focusedAction.current = 0;
        nextItemArrowKey.current = void 0;
      }
    }, [open]);
    const handleClose = (event) => {
      if (event.type === "mouseleave" && onMouseLeave) {
        onMouseLeave(event);
      }
      if (event.type === "blur" && onBlur) {
        onBlur(event);
      }
      eventTimer.clear();
      if (event.type === "blur") {
        eventTimer.start(0, () => {
          setOpenState(false);
          if (onClose) {
            onClose(event, "blur");
          }
        });
      } else {
        setOpenState(false);
        if (onClose) {
          onClose(event, "mouseLeave");
        }
      }
    };
    const handleClick = (event) => {
      if (FabProps.onClick) {
        FabProps.onClick(event);
      }
      eventTimer.clear();
      if (open) {
        setOpenState(false);
        if (onClose) {
          onClose(event, "toggle");
        }
      } else {
        setOpenState(true);
        if (onOpen) {
          onOpen(event, "toggle");
        }
      }
    };
    const handleOpen = (event) => {
      if (event.type === "mouseenter" && onMouseEnter) {
        onMouseEnter(event);
      }
      if (event.type === "focus" && onFocus) {
        onFocus(event);
      }
      eventTimer.clear();
      if (!open) {
        eventTimer.start(0, () => {
          setOpenState(true);
          if (onOpen) {
            const eventMap = {
              focus: "focus",
              mouseenter: "mouseEnter"
            };
            onOpen(event, eventMap[event.type]);
          }
        });
      }
    };
    const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, "");
    const allItems = React171.Children.toArray(childrenProp).filter((child) => {
      if (true) {
        if ((0, import_react_is9.isFragment)(child)) {
          console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return /* @__PURE__ */ React171.isValidElement(child);
    });
    const children = allItems.map((child, index) => {
      const _child$props = child.props, {
        FabProps: {
          ref: origButtonRef
        } = {},
        tooltipPlacement: tooltipPlacementProp
      } = _child$props, ChildFabProps = _objectWithoutPropertiesLoose(_child$props.FabProps, _excluded312);
      const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction2) === "vertical" ? "left" : "top");
      return /* @__PURE__ */ React171.cloneElement(child, {
        FabProps: _extends({}, ChildFabProps, {
          ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
        }),
        delay: 30 * (open ? index : allItems.length - index),
        open,
        tooltipPlacement,
        id: `${id}-action-${index}`
      });
    });
    return /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(SpeedDialRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      role: "presentation",
      onKeyDown: handleKeyDown,
      onBlur: handleClose,
      onFocus: handleOpen,
      onMouseEnter: handleOpen,
      onMouseLeave: handleClose,
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime179.jsx)(TransitionComponent, _extends({
        in: !hidden,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(SpeedDialFab, _extends({
          color: "primary",
          "aria-label": ariaLabel,
          "aria-haspopup": "true",
          "aria-expanded": open,
          "aria-controls": `${id}-actions`
        }, FabProps, {
          onClick: handleClick,
          className: clsx_default(classes2.fab, FabProps.className),
          ref: handleFabRef,
          ownerState,
          children: /* @__PURE__ */ React171.isValidElement(icon) && isMuiElement_default(icon, ["SpeedDialIcon"]) ? /* @__PURE__ */ React171.cloneElement(icon, {
            open
          }) : icon
        }))
      })), /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(SpeedDialActions, {
        id: `${id}-actions`,
        role: "menu",
        "aria-orientation": getOrientation(direction2),
        className: clsx_default(classes2.actions, !open && classes2.actionsClosed),
        ownerState,
        children
      })]
    }));
  });
  true ? SpeedDial.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The aria-label of the button element.
     * Also used to provide the `id` for the `SpeedDial` element and its children.
     */
    ariaLabel: import_prop_types127.default.string.isRequired,
    /**
     * SpeedDialActions to display when the SpeedDial is `open`.
     */
    children: import_prop_types127.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types127.default.object,
    /**
     * @ignore
     */
    className: import_prop_types127.default.string,
    /**
     * The direction the actions open relative to the floating action button.
     * @default 'up'
     */
    direction: import_prop_types127.default.oneOf(["down", "left", "right", "up"]),
    /**
     * Props applied to the [`Fab`](/material-ui/api/fab/) element.
     * @default {}
     */
    FabProps: import_prop_types127.default.object,
    /**
     * If `true`, the SpeedDial is hidden.
     * @default false
     */
    hidden: import_prop_types127.default.bool,
    /**
     * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
     * provides a default Icon with animation.
     */
    icon: import_prop_types127.default.node,
    /**
     * @ignore
     */
    onBlur: import_prop_types127.default.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
     */
    onClose: import_prop_types127.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types127.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types127.default.func,
    /**
     * @ignore
     */
    onMouseEnter: import_prop_types127.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types127.default.func,
    /**
     * Callback fired when the component requests to be open.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
     */
    onOpen: import_prop_types127.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types127.default.bool,
    /**
     * The icon to display in the SpeedDial Fab when the SpeedDial is open.
     */
    openIcon: import_prop_types127.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types127.default.oneOfType([import_prop_types127.default.arrayOf(import_prop_types127.default.oneOfType([import_prop_types127.default.func, import_prop_types127.default.object, import_prop_types127.default.bool])), import_prop_types127.default.func, import_prop_types127.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Zoom
     */
    TransitionComponent: import_prop_types127.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types127.default.oneOfType([import_prop_types127.default.number, import_prop_types127.default.shape({
      appear: import_prop_types127.default.number,
      enter: import_prop_types127.default.number,
      exit: import_prop_types127.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types127.default.object
  } : void 0;
  var SpeedDial_default = SpeedDial;

  // node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js
  init_extends();
  var React173 = __toESM(require_react());
  var import_prop_types129 = __toESM(require_prop_types());
  var import_composeClasses92 = __toESM(require_composeClasses2());
  var import_colorManipulator23 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Tooltip/Tooltip.js
  init_extends();
  var React172 = __toESM(require_react());
  var import_prop_types128 = __toESM(require_prop_types());
  var import_useTimeout5 = __toESM(require_useTimeout2());
  var import_elementAcceptingRef6 = __toESM(require_elementAcceptingRef2());
  var import_composeClasses91 = __toESM(require_composeClasses2());
  var import_colorManipulator22 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Tooltip/tooltipClasses.js
  var import_generateUtilityClasses92 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass96 = __toESM(require_generateUtilityClass2());
  function getTooltipUtilityClass(slot) {
    return (0, import_generateUtilityClass96.default)("MuiTooltip", slot);
  }
  var tooltipClasses = (0, import_generateUtilityClasses92.default)("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  var tooltipClasses_default = tooltipClasses;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  var import_jsx_runtime181 = __toESM(require_jsx_runtime());
  var import_jsx_runtime182 = __toESM(require_jsx_runtime());
  var _excluded129 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
  function round3(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var useUtilityClasses90 = (ownerState) => {
    const {
      classes: classes2,
      disableInteractive,
      arrow: arrow2,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ["popper", !disableInteractive && "popperInteractive", arrow2 && "popperArrow"],
      tooltip: ["tooltip", arrow2 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize_default(placement.split("-")[0])}`],
      arrow: ["arrow"]
    };
    return (0, import_composeClasses91.default)(slots, getTooltipUtilityClass, classes2);
  };
  var TooltipPopper = styled_default2(Popper_default, {
    name: "MuiTooltip",
    slot: "Popper",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.popper, !ownerState.disableInteractive && styles8.popperInteractive, ownerState.arrow && styles8.popperArrow, !ownerState.open && styles8.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.tooltip,
    pointerEvents: "none"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !open && {
    pointerEvents: "none"
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses_default.arrow}`]: {
      top: 0,
      marginTop: "-0.71em",
      "&::before": {
        transformOrigin: "0 100%"
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses_default.arrow}`]: {
      bottom: 0,
      marginBottom: "-0.71em",
      "&::before": {
        transformOrigin: "100% 0"
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: "-0.71em"
    } : {
      right: 0,
      marginRight: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "100% 100%"
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: "-0.71em"
    } : {
      left: 0,
      marginLeft: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "0 0"
      }
    })
  }));
  var TooltipTooltip = styled_default2("div", {
    name: "MuiTooltip",
    slot: "Tooltip",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.tooltip, ownerState.touch && styles8.touch, ownerState.arrow && styles8.tooltipArrow, styles8[`tooltipPlacement${capitalize_default(ownerState.placement.split("-")[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : (0, import_colorManipulator22.alpha)(theme.palette.grey[700], 0.92),
    borderRadius: (theme.vars || theme).shape.borderRadius,
    color: (theme.vars || theme).palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: "4px 8px",
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: "break-word",
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: "relative",
    margin: 0
  }, ownerState.touch && {
    padding: "8px 16px",
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round3(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: _extends({
      transformOrigin: "right center"
    }, !ownerState.isRtl ? _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    }) : _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: _extends({
      transformOrigin: "left center"
    }, !ownerState.isRtl ? _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    }) : _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: _extends({
      transformOrigin: "center bottom",
      marginBottom: "14px"
    }, ownerState.touch && {
      marginBottom: "24px"
    }),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: _extends({
      transformOrigin: "center top",
      marginTop: "14px"
    }, ownerState.touch && {
      marginTop: "24px"
    })
  }));
  var TooltipArrow = styled_default2("span", {
    name: "MuiTooltip",
    slot: "Arrow",
    overridesResolver: (props, styles8) => styles8.arrow
  })(({
    theme
  }) => ({
    overflow: "hidden",
    position: "absolute",
    width: "1em",
    height: "0.71em",
    boxSizing: "border-box",
    color: theme.vars ? theme.vars.palette.Tooltip.bg : (0, import_colorManipulator22.alpha)(theme.palette.grey[700], 0.9),
    "&::before": {
      content: '""',
      margin: "auto",
      display: "block",
      width: "100%",
      height: "100%",
      backgroundColor: "currentColor",
      transform: "rotate(45deg)"
    }
  }));
  var hystersisOpen = false;
  var hystersisTimer = new import_useTimeout5.Timeout();
  var cursorPosition = {
    x: 0,
    y: 0
  };
  function composeEventHandler(handler, eventHandler) {
    return (event, ...params) => {
      if (eventHandler) {
        eventHandler(event, ...params);
      }
      handler(event, ...params);
    };
  }
  var Tooltip = /* @__PURE__ */ React172.forwardRef(function Tooltip2(inProps, ref) {
    var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTooltip"
    });
    const {
      arrow: arrow2 = false,
      children: childrenProp,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = "bottom",
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      slotProps = {},
      slots = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow_default,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded129);
    const children = /* @__PURE__ */ React172.isValidElement(childrenProp) ? childrenProp : /* @__PURE__ */ (0, import_jsx_runtime181.jsx)("span", {
      children: childrenProp
    });
    const theme = useTheme6();
    const isRtl = useRtl();
    const [childNode, setChildNode] = React172.useState();
    const [arrowRef, setArrowRef] = React172.useState(null);
    const ignoreNonTouchEvents = React172.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = (0, import_useTimeout5.default)();
    const enterTimer = (0, import_useTimeout5.default)();
    const leaveTimer = (0, import_useTimeout5.default)();
    const touchTimer = (0, import_useTimeout5.default)();
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    });
    let open = openState;
    if (true) {
      const {
        current: isControlled
      } = React172.useRef(openProp !== void 0);
      React172.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    const id = useId_default(idProp);
    const prevUserSelect = React172.useRef();
    const stopTouchInteraction = useEventCallback_default(() => {
      if (prevUserSelect.current !== void 0) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = void 0;
      }
      touchTimer.clear();
    });
    React172.useEffect(() => stopTouchInteraction, [stopTouchInteraction]);
    const handleOpen = (event) => {
      hystersisTimer.clear();
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen && !open) {
        onOpen(event);
      }
    };
    const handleClose = useEventCallback_default(
      /**
       * @param {React.SyntheticEvent | Event} event
       */
      (event) => {
        hystersisTimer.start(800 + leaveDelay, () => {
          hystersisOpen = false;
        });
        setOpenState(false);
        if (onClose && open) {
          onClose(event);
        }
        closeTimer.start(theme.transitions.duration.shortest, () => {
          ignoreNonTouchEvents.current = false;
        });
      }
    );
    const handleMouseOver = (event) => {
      if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
        return;
      }
      if (childNode) {
        childNode.removeAttribute("title");
      }
      enterTimer.clear();
      leaveTimer.clear();
      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.start(hystersisOpen ? enterNextDelay : enterDelay, () => {
          handleOpen(event);
        });
      } else {
        handleOpen(event);
      }
    };
    const handleMouseLeave = (event) => {
      enterTimer.clear();
      leaveTimer.start(leaveDelay, () => {
        handleClose(event);
      });
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [, setChildIsFocusVisible] = React172.useState(false);
    const handleBlur = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleMouseLeave(event);
      }
    };
    const handleFocus = (event) => {
      if (!childNode) {
        setChildNode(event.currentTarget);
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleMouseOver(event);
      }
    };
    const detectTouchStart = (event) => {
      ignoreNonTouchEvents.current = true;
      const childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    const handleTouchStart = (event) => {
      detectTouchStart(event);
      leaveTimer.clear();
      closeTimer.clear();
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect;
      document.body.style.WebkitUserSelect = "none";
      touchTimer.start(enterTouchDelay, () => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleMouseOver(event);
      });
    };
    const handleTouchEnd = (event) => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      stopTouchInteraction();
      leaveTimer.start(leaveTouchDelay, () => {
        handleClose(event);
      });
    };
    React172.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown(nativeEvent) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          handleClose(nativeEvent);
        }
      }
      document.addEventListener("keydown", handleKeyDown);
      return () => {
        document.removeEventListener("keydown", handleKeyDown);
      };
    }, [handleClose, open]);
    const handleRef = useForkRef_default(children.ref, focusVisibleRef, setChildNode, ref);
    if (!title && title !== 0) {
      open = false;
    }
    const popperRef = React172.useRef();
    const handleMouseMove = (event) => {
      const childrenProps2 = children.props;
      if (childrenProps2.onMouseMove) {
        childrenProps2.onMouseMove(event);
      }
      cursorPosition = {
        x: event.clientX,
        y: event.clientY
      };
      if (popperRef.current) {
        popperRef.current.update();
      }
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === "string";
    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps["aria-describedby"] = open ? id : null;
    } else {
      nameOrDescProps["aria-label"] = titleIsString ? title : null;
      nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
    }
    const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
      className: clsx_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});
    if (true) {
      childrenProps["data-mui-internal-clone-element"] = true;
      React172.useEffect(() => {
        if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
          console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
        }
      }, [childNode]);
    }
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur;
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
      }
    }
    const popperOptions = React172.useMemo(() => {
      var _PopperProps$popperOp;
      let tooltipModifiers = [{
        name: "arrow",
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];
      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }
      return _extends({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);
    const ownerState = _extends({}, props, {
      isRtl,
      arrow: arrow2,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });
    const classes2 = useUtilityClasses90(ownerState);
    const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
    const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow_default;
    const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
    const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
    const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
      className: clsx_default(classes2.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
    }), ownerState);
    const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
      className: clsx_default(classes2.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
    }), ownerState);
    const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
      className: clsx_default(classes2.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
    }), ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime182.jsxs)(React172.Fragment, {
      children: [/* @__PURE__ */ React172.cloneElement(children, childrenProps), /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(PopperComponent, _extends({
        as: PopperComponentProp != null ? PopperComponentProp : Popper_default,
        placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: cursorPosition.y,
            left: cursorPosition.x,
            right: cursorPosition.x,
            bottom: cursorPosition.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef,
        open: childNode ? open : false,
        id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(TransitionComponent, _extends({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, transitionProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime182.jsxs)(TooltipComponent, _extends({}, tooltipProps, {
            children: [title, arrow2 ? /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(ArrowComponent, _extends({}, tooltipArrowProps, {
              ref: setArrowRef
            })) : null]
          }))
        }))
      }))]
    });
  });
  true ? Tooltip.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, adds an arrow to the tooltip.
     * @default false
     */
    arrow: import_prop_types128.default.bool,
    /**
     * Tooltip reference element.
     */
    children: import_elementAcceptingRef6.default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types128.default.object,
    /**
     * @ignore
     */
    className: import_prop_types128.default.string,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types128.default.shape({
      Arrow: import_prop_types128.default.elementType,
      Popper: import_prop_types128.default.elementType,
      Tooltip: import_prop_types128.default.elementType,
      Transition: import_prop_types128.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types128.default.shape({
      arrow: import_prop_types128.default.object,
      popper: import_prop_types128.default.object,
      tooltip: import_prop_types128.default.object,
      transition: import_prop_types128.default.object
    }),
    /**
     * Set to `true` if the `title` acts as an accessible description.
     * By default the `title` acts as an accessible label for the child.
     * @default false
     */
    describeChild: import_prop_types128.default.bool,
    /**
     * Do not respond to focus-visible events.
     * @default false
     */
    disableFocusListener: import_prop_types128.default.bool,
    /**
     * Do not respond to hover events.
     * @default false
     */
    disableHoverListener: import_prop_types128.default.bool,
    /**
     * Makes a tooltip not interactive, i.e. it will close when the user
     * hovers over the tooltip before the `leaveDelay` is expired.
     * @default false
     */
    disableInteractive: import_prop_types128.default.bool,
    /**
     * Do not respond to long press touch events.
     * @default false
     */
    disableTouchListener: import_prop_types128.default.bool,
    /**
     * The number of milliseconds to wait before showing the tooltip.
     * This prop won't impact the enter touch delay (`enterTouchDelay`).
     * @default 100
     */
    enterDelay: import_prop_types128.default.number,
    /**
     * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
     * @default 0
     */
    enterNextDelay: import_prop_types128.default.number,
    /**
     * The number of milliseconds a user must touch the element before showing the tooltip.
     * @default 700
     */
    enterTouchDelay: import_prop_types128.default.number,
    /**
     * If `true`, the tooltip follow the cursor over the wrapped element.
     * @default false
     */
    followCursor: import_prop_types128.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: import_prop_types128.default.string,
    /**
     * The number of milliseconds to wait before hiding the tooltip.
     * This prop won't impact the leave touch delay (`leaveTouchDelay`).
     * @default 0
     */
    leaveDelay: import_prop_types128.default.number,
    /**
     * The number of milliseconds after the user stops touching an element before hiding the tooltip.
     * @default 1500
     */
    leaveTouchDelay: import_prop_types128.default.number,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types128.default.func,
    /**
     * Callback fired when the component requests to be open.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types128.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types128.default.bool,
    /**
     * Tooltip placement.
     * @default 'bottom'
     */
    placement: import_prop_types128.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The component used for the popper.
     * @default Popper
     */
    PopperComponent: import_prop_types128.default.elementType,
    /**
     * Props applied to the [`Popper`](/material-ui/api/popper/) element.
     * @default {}
     */
    PopperProps: import_prop_types128.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types128.default.shape({
      arrow: import_prop_types128.default.object,
      popper: import_prop_types128.default.object,
      tooltip: import_prop_types128.default.object,
      transition: import_prop_types128.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types128.default.shape({
      arrow: import_prop_types128.default.elementType,
      popper: import_prop_types128.default.elementType,
      tooltip: import_prop_types128.default.elementType,
      transition: import_prop_types128.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types128.default.oneOfType([import_prop_types128.default.arrayOf(import_prop_types128.default.oneOfType([import_prop_types128.default.func, import_prop_types128.default.object, import_prop_types128.default.bool])), import_prop_types128.default.func, import_prop_types128.default.object]),
    /**
     * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
     */
    title: import_prop_types128.default.node,
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types128.default.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types128.default.object
  } : void 0;
  var Tooltip_default = Tooltip;

  // node_modules/@mui/material/SpeedDialAction/speedDialActionClasses.js
  var import_generateUtilityClasses93 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass97 = __toESM(require_generateUtilityClass2());
  function getSpeedDialActionUtilityClass(slot) {
    return (0, import_generateUtilityClass97.default)("MuiSpeedDialAction", slot);
  }
  var speedDialActionClasses = (0, import_generateUtilityClasses93.default)("MuiSpeedDialAction", ["fab", "fabClosed", "staticTooltip", "staticTooltipClosed", "staticTooltipLabel", "tooltipPlacementLeft", "tooltipPlacementRight"]);
  var speedDialActionClasses_default = speedDialActionClasses;

  // node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js
  var import_jsx_runtime183 = __toESM(require_jsx_runtime());
  var import_jsx_runtime184 = __toESM(require_jsx_runtime());
  var _excluded130 = ["className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"];
  var useUtilityClasses91 = (ownerState) => {
    const {
      open,
      tooltipPlacement,
      classes: classes2
    } = ownerState;
    const slots = {
      fab: ["fab", !open && "fabClosed"],
      staticTooltip: ["staticTooltip", `tooltipPlacement${capitalize_default(tooltipPlacement)}`, !open && "staticTooltipClosed"],
      staticTooltipLabel: ["staticTooltipLabel"]
    };
    return (0, import_composeClasses92.default)(slots, getSpeedDialActionUtilityClass, classes2);
  };
  var SpeedDialActionFab = styled_default2(Fab_default, {
    name: "MuiSpeedDialAction",
    slot: "Fab",
    skipVariantsResolver: false,
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.fab, !ownerState.open && styles8.fabClosed];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 8,
    color: (theme.vars || theme).palette.text.secondary,
    backgroundColor: (theme.vars || theme).palette.background.paper,
    "&:hover": {
      backgroundColor: theme.vars ? theme.vars.palette.SpeedDialAction.fabHoverBg : (0, import_colorManipulator23.emphasize)(theme.palette.background.paper, 0.15)
    },
    transition: `${theme.transitions.create("transform", {
      duration: theme.transitions.duration.shorter
    })}, opacity 0.8s`,
    opacity: 1
  }, !ownerState.open && {
    opacity: 0,
    transform: "scale(0)"
  }));
  var SpeedDialActionStaticTooltip = styled_default2("span", {
    name: "MuiSpeedDialAction",
    slot: "StaticTooltip",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.staticTooltip, !ownerState.open && styles8.staticTooltipClosed, styles8[`tooltipPlacement${capitalize_default(ownerState.tooltipPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => ({
    position: "relative",
    display: "flex",
    alignItems: "center",
    [`& .${speedDialActionClasses_default.staticTooltipLabel}`]: _extends({
      transition: theme.transitions.create(["transform", "opacity"], {
        duration: theme.transitions.duration.shorter
      }),
      opacity: 1
    }, !ownerState.open && {
      opacity: 0,
      transform: "scale(0.5)"
    }, ownerState.tooltipPlacement === "left" && {
      transformOrigin: "100% 50%",
      right: "100%",
      marginRight: 8
    }, ownerState.tooltipPlacement === "right" && {
      transformOrigin: "0% 50%",
      left: "100%",
      marginLeft: 8
    })
  }));
  var SpeedDialActionStaticTooltipLabel = styled_default2("span", {
    name: "MuiSpeedDialAction",
    slot: "StaticTooltipLabel",
    overridesResolver: (props, styles8) => styles8.staticTooltipLabel
  })(({
    theme
  }) => _extends({
    position: "absolute"
  }, theme.typography.body1, {
    backgroundColor: (theme.vars || theme).palette.background.paper,
    borderRadius: (theme.vars || theme).shape.borderRadius,
    boxShadow: (theme.vars || theme).shadows[1],
    color: (theme.vars || theme).palette.text.secondary,
    padding: "4px 16px",
    wordBreak: "keep-all"
  }));
  var SpeedDialAction = /* @__PURE__ */ React173.forwardRef(function SpeedDialAction2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSpeedDialAction"
    });
    const {
      className,
      delay = 0,
      FabProps = {},
      icon,
      id,
      open,
      TooltipClasses,
      tooltipOpen: tooltipOpenProp = false,
      tooltipPlacement = "left",
      tooltipTitle
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded130);
    const ownerState = _extends({}, props, {
      tooltipPlacement
    });
    const classes2 = useUtilityClasses91(ownerState);
    const [tooltipOpen, setTooltipOpen] = React173.useState(tooltipOpenProp);
    const handleTooltipClose = () => {
      setTooltipOpen(false);
    };
    const handleTooltipOpen = () => {
      setTooltipOpen(true);
    };
    const transitionStyle = {
      transitionDelay: `${delay}ms`
    };
    const fab = /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(SpeedDialActionFab, _extends({
      size: "small",
      className: clsx_default(classes2.fab, className),
      tabIndex: -1,
      role: "menuitem",
      ownerState
    }, FabProps, {
      style: _extends({}, transitionStyle, FabProps.style),
      children: icon
    }));
    if (tooltipOpenProp) {
      return /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(SpeedDialActionStaticTooltip, _extends({
        id,
        ref,
        className: classes2.staticTooltip,
        ownerState
      }, other, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime183.jsx)(SpeedDialActionStaticTooltipLabel, {
          style: transitionStyle,
          id: `${id}-label`,
          className: classes2.staticTooltipLabel,
          ownerState,
          children: tooltipTitle
        }), /* @__PURE__ */ React173.cloneElement(fab, {
          "aria-labelledby": `${id}-label`
        })]
      }));
    }
    if (!open && tooltipOpen) {
      setTooltipOpen(false);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Tooltip_default, _extends({
      id,
      ref,
      title: tooltipTitle,
      placement: tooltipPlacement,
      onClose: handleTooltipClose,
      onOpen: handleTooltipOpen,
      open: open && tooltipOpen,
      classes: TooltipClasses
    }, other, {
      children: fab
    }));
  });
  true ? SpeedDialAction.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types129.default.object,
    /**
     * @ignore
     */
    className: import_prop_types129.default.string,
    /**
     * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
     * @default 0
     */
    delay: import_prop_types129.default.number,
    /**
     * Props applied to the [`Fab`](/material-ui/api/fab/) component.
     * @default {}
     */
    FabProps: import_prop_types129.default.object,
    /**
     * The icon to display in the SpeedDial Fab.
     */
    icon: import_prop_types129.default.node,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: import_prop_types129.default.string,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types129.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types129.default.oneOfType([import_prop_types129.default.arrayOf(import_prop_types129.default.oneOfType([import_prop_types129.default.func, import_prop_types129.default.object, import_prop_types129.default.bool])), import_prop_types129.default.func, import_prop_types129.default.object]),
    /**
     * `classes` prop applied to the [`Tooltip`](/material-ui/api/tooltip/) element.
     */
    TooltipClasses: import_prop_types129.default.object,
    /**
     * Make the tooltip always visible when the SpeedDial is open.
     * @default false
     */
    tooltipOpen: import_prop_types129.default.bool,
    /**
     * Placement of the tooltip.
     * @default 'left'
     */
    tooltipPlacement: import_prop_types129.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Label to display in the tooltip.
     */
    tooltipTitle: import_prop_types129.default.node
  } : void 0;
  var SpeedDialAction_default = SpeedDialAction;

  // node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js
  init_extends();
  var React175 = __toESM(require_react());
  var import_prop_types130 = __toESM(require_prop_types());
  var import_composeClasses93 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/internal/svg-icons/Add.js
  var React174 = __toESM(require_react());
  var import_utils47 = __toESM(require_utils());
  var import_jsx_runtime185 = __toESM(require_jsx_runtime());
  var Add_default = (0, import_utils47.createSvgIcon)(/* @__PURE__ */ (0, import_jsx_runtime185.jsx)("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), "Add");

  // node_modules/@mui/material/SpeedDialIcon/speedDialIconClasses.js
  var import_generateUtilityClasses94 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass98 = __toESM(require_generateUtilityClass2());
  function getSpeedDialIconUtilityClass(slot) {
    return (0, import_generateUtilityClass98.default)("MuiSpeedDialIcon", slot);
  }
  var speedDialIconClasses = (0, import_generateUtilityClasses94.default)("MuiSpeedDialIcon", ["root", "icon", "iconOpen", "iconWithOpenIconOpen", "openIcon", "openIconOpen"]);
  var speedDialIconClasses_default = speedDialIconClasses;

  // node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js
  var import_jsx_runtime186 = __toESM(require_jsx_runtime());
  var import_jsx_runtime187 = __toESM(require_jsx_runtime());
  var _excluded131 = ["className", "icon", "open", "openIcon"];
  var useUtilityClasses92 = (ownerState) => {
    const {
      classes: classes2,
      open,
      openIcon
    } = ownerState;
    const slots = {
      root: ["root"],
      icon: ["icon", open && "iconOpen", openIcon && open && "iconWithOpenIconOpen"],
      openIcon: ["openIcon", open && "openIconOpen"]
    };
    return (0, import_composeClasses93.default)(slots, getSpeedDialIconUtilityClass, classes2);
  };
  var SpeedDialIconRoot = styled_default2("span", {
    name: "MuiSpeedDialIcon",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${speedDialIconClasses_default.icon}`]: styles8.icon
      }, {
        [`& .${speedDialIconClasses_default.icon}`]: ownerState.open && styles8.iconOpen
      }, {
        [`& .${speedDialIconClasses_default.icon}`]: ownerState.open && ownerState.openIcon && styles8.iconWithOpenIconOpen
      }, {
        [`& .${speedDialIconClasses_default.openIcon}`]: styles8.openIcon
      }, {
        [`& .${speedDialIconClasses_default.openIcon}`]: ownerState.open && styles8.openIconOpen
      }, styles8.root];
    }
  })(({
    theme,
    ownerState
  }) => ({
    height: 24,
    [`& .${speedDialIconClasses_default.icon}`]: _extends({
      transition: theme.transitions.create(["transform", "opacity"], {
        duration: theme.transitions.duration.short
      })
    }, ownerState.open && _extends({
      transform: "rotate(45deg)"
    }, ownerState.openIcon && {
      opacity: 0
    })),
    [`& .${speedDialIconClasses_default.openIcon}`]: _extends({
      position: "absolute",
      transition: theme.transitions.create(["transform", "opacity"], {
        duration: theme.transitions.duration.short
      }),
      opacity: 0,
      transform: "rotate(-45deg)"
    }, ownerState.open && {
      transform: "rotate(0deg)",
      opacity: 1
    })
  }));
  var SpeedDialIcon = /* @__PURE__ */ React175.forwardRef(function SpeedDialIcon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSpeedDialIcon"
    });
    const {
      className,
      icon: iconProp,
      openIcon: openIconProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded131);
    const ownerState = props;
    const classes2 = useUtilityClasses92(ownerState);
    function formatIcon(icon, newClassName) {
      if (/* @__PURE__ */ React175.isValidElement(icon)) {
        return /* @__PURE__ */ React175.cloneElement(icon, {
          className: newClassName
        });
      }
      return icon;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)(SpeedDialIconRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: [openIconProp ? formatIcon(openIconProp, classes2.openIcon) : null, iconProp ? formatIcon(iconProp, classes2.icon) : /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(Add_default, {
        className: classes2.icon
      })]
    }));
  });
  true ? SpeedDialIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types130.default.object,
    /**
     * @ignore
     */
    className: import_prop_types130.default.string,
    /**
     * The icon to display.
     */
    icon: import_prop_types130.default.node,
    /**
     * @ignore
     * If `true`, the component is shown.
     */
    open: import_prop_types130.default.bool,
    /**
     * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
     */
    openIcon: import_prop_types130.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types130.default.oneOfType([import_prop_types130.default.arrayOf(import_prop_types130.default.oneOfType([import_prop_types130.default.func, import_prop_types130.default.object, import_prop_types130.default.bool])), import_prop_types130.default.func, import_prop_types130.default.object])
  } : void 0;
  SpeedDialIcon.muiName = "SpeedDialIcon";
  var SpeedDialIcon_default = SpeedDialIcon;

  // node_modules/@mui/material/Step/Step.js
  init_extends();
  var React178 = __toESM(require_react());
  var import_prop_types131 = __toESM(require_prop_types());
  var import_integerPropType10 = __toESM(require_integerPropType2());
  var import_composeClasses94 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Stepper/StepperContext.js
  var React176 = __toESM(require_react());
  var StepperContext = /* @__PURE__ */ React176.createContext({});
  if (true) {
    StepperContext.displayName = "StepperContext";
  }
  function useStepperContext() {
    return React176.useContext(StepperContext);
  }
  var StepperContext_default = StepperContext;

  // node_modules/@mui/material/Step/StepContext.js
  var React177 = __toESM(require_react());
  var StepContext = /* @__PURE__ */ React177.createContext({});
  if (true) {
    StepContext.displayName = "StepContext";
  }
  function useStepContext() {
    return React177.useContext(StepContext);
  }
  var StepContext_default = StepContext;

  // node_modules/@mui/material/Step/stepClasses.js
  var import_generateUtilityClasses95 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass99 = __toESM(require_generateUtilityClass2());
  function getStepUtilityClass(slot) {
    return (0, import_generateUtilityClass99.default)("MuiStep", slot);
  }
  var stepClasses = (0, import_generateUtilityClasses95.default)("MuiStep", ["root", "horizontal", "vertical", "alternativeLabel", "completed"]);
  var stepClasses_default = stepClasses;

  // node_modules/@mui/material/Step/Step.js
  var import_jsx_runtime188 = __toESM(require_jsx_runtime());
  var import_jsx_runtime189 = __toESM(require_jsx_runtime());
  var _excluded132 = ["active", "children", "className", "component", "completed", "disabled", "expanded", "index", "last"];
  var useUtilityClasses93 = (ownerState) => {
    const {
      classes: classes2,
      orientation,
      alternativeLabel,
      completed
    } = ownerState;
    const slots = {
      root: ["root", orientation, alternativeLabel && "alternativeLabel", completed && "completed"]
    };
    return (0, import_composeClasses94.default)(slots, getStepUtilityClass, classes2);
  };
  var StepRoot = styled_default2("div", {
    name: "MuiStep",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.orientation], ownerState.alternativeLabel && styles8.alternativeLabel, ownerState.completed && styles8.completed];
    }
  })(({
    ownerState
  }) => _extends({}, ownerState.orientation === "horizontal" && {
    paddingLeft: 8,
    paddingRight: 8
  }, ownerState.alternativeLabel && {
    flex: 1,
    position: "relative"
  }));
  var Step = /* @__PURE__ */ React178.forwardRef(function Step2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStep"
    });
    const {
      active: activeProp,
      children,
      className,
      component = "div",
      completed: completedProp,
      disabled: disabledProp,
      expanded = false,
      index,
      last
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded132);
    const {
      activeStep,
      connector,
      alternativeLabel,
      orientation,
      nonLinear
    } = React178.useContext(StepperContext_default);
    let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];
    if (activeStep === index) {
      active = activeProp !== void 0 ? activeProp : true;
    } else if (!nonLinear && activeStep > index) {
      completed = completedProp !== void 0 ? completedProp : true;
    } else if (!nonLinear && activeStep < index) {
      disabled = disabledProp !== void 0 ? disabledProp : true;
    }
    const contextValue = React178.useMemo(() => ({
      index,
      last,
      expanded,
      icon: index + 1,
      active,
      completed,
      disabled
    }), [index, last, expanded, active, completed, disabled]);
    const ownerState = _extends({}, props, {
      active,
      orientation,
      alternativeLabel,
      completed,
      disabled,
      expanded,
      component
    });
    const classes2 = useUtilityClasses93(ownerState);
    const newChildren = /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(StepRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: [connector && alternativeLabel && index !== 0 ? connector : null, children]
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(StepContext_default.Provider, {
      value: contextValue,
      children: connector && !alternativeLabel && index !== 0 ? /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(React178.Fragment, {
        children: [connector, newChildren]
      }) : newChildren
    });
  });
  true ? Step.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Sets the step as active. Is passed to child components.
     */
    active: import_prop_types131.default.bool,
    /**
     * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
     */
    children: import_prop_types131.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types131.default.object,
    /**
     * @ignore
     */
    className: import_prop_types131.default.string,
    /**
     * Mark the step as completed. Is passed to child components.
     */
    completed: import_prop_types131.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types131.default.elementType,
    /**
     * If `true`, the step is disabled, will also disable the button if
     * `StepButton` is a child of `Step`. Is passed to child components.
     */
    disabled: import_prop_types131.default.bool,
    /**
     * Expand the step.
     * @default false
     */
    expanded: import_prop_types131.default.bool,
    /**
     * The position of the step.
     * The prop defaults to the value inherited from the parent Stepper component.
     */
    index: import_integerPropType10.default,
    /**
     * If `true`, the Step is displayed as rendered last.
     * The prop defaults to the value inherited from the parent Stepper component.
     */
    last: import_prop_types131.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types131.default.oneOfType([import_prop_types131.default.arrayOf(import_prop_types131.default.oneOfType([import_prop_types131.default.func, import_prop_types131.default.object, import_prop_types131.default.bool])), import_prop_types131.default.func, import_prop_types131.default.object])
  } : void 0;
  var Step_default = Step;

  // node_modules/@mui/material/StepButton/StepButton.js
  init_extends();
  var React183 = __toESM(require_react());
  var import_prop_types134 = __toESM(require_prop_types());
  var import_composeClasses97 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/StepLabel/StepLabel.js
  init_extends();
  var React182 = __toESM(require_react());
  var import_prop_types133 = __toESM(require_prop_types());
  var import_composeClasses96 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/StepIcon/StepIcon.js
  init_extends();
  var React181 = __toESM(require_react());
  var import_prop_types132 = __toESM(require_prop_types());
  var import_composeClasses95 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/internal/svg-icons/CheckCircle.js
  var React179 = __toESM(require_react());
  var import_jsx_runtime190 = __toESM(require_jsx_runtime());
  var CheckCircle_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime190.jsx)("path", {
    d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
  }), "CheckCircle");

  // node_modules/@mui/material/internal/svg-icons/Warning.js
  var React180 = __toESM(require_react());
  var import_jsx_runtime191 = __toESM(require_jsx_runtime());
  var Warning_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime191.jsx)("path", {
    d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
  }), "Warning");

  // node_modules/@mui/material/StepIcon/StepIcon.js
  var import_SvgIcon2 = __toESM(require_SvgIcon2());

  // node_modules/@mui/material/StepIcon/stepIconClasses.js
  var import_generateUtilityClasses96 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass100 = __toESM(require_generateUtilityClass2());
  function getStepIconUtilityClass(slot) {
    return (0, import_generateUtilityClass100.default)("MuiStepIcon", slot);
  }
  var stepIconClasses = (0, import_generateUtilityClasses96.default)("MuiStepIcon", ["root", "active", "completed", "error", "text"]);
  var stepIconClasses_default = stepIconClasses;

  // node_modules/@mui/material/StepIcon/StepIcon.js
  var import_jsx_runtime192 = __toESM(require_jsx_runtime());
  var import_jsx_runtime193 = __toESM(require_jsx_runtime());
  var _circle;
  var _excluded133 = ["active", "className", "completed", "error", "icon"];
  var useUtilityClasses94 = (ownerState) => {
    const {
      classes: classes2,
      active,
      completed,
      error
    } = ownerState;
    const slots = {
      root: ["root", active && "active", completed && "completed", error && "error"],
      text: ["text"]
    };
    return (0, import_composeClasses95.default)(slots, getStepIconUtilityClass, classes2);
  };
  var StepIconRoot = styled_default2(import_SvgIcon2.default, {
    name: "MuiStepIcon",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => ({
    display: "block",
    transition: theme.transitions.create("color", {
      duration: theme.transitions.duration.shortest
    }),
    color: (theme.vars || theme).palette.text.disabled,
    [`&.${stepIconClasses_default.completed}`]: {
      color: (theme.vars || theme).palette.primary.main
    },
    [`&.${stepIconClasses_default.active}`]: {
      color: (theme.vars || theme).palette.primary.main
    },
    [`&.${stepIconClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var StepIconText = styled_default2("text", {
    name: "MuiStepIcon",
    slot: "Text",
    overridesResolver: (props, styles8) => styles8.text
  })(({
    theme
  }) => ({
    fill: (theme.vars || theme).palette.primary.contrastText,
    fontSize: theme.typography.caption.fontSize,
    fontFamily: theme.typography.fontFamily
  }));
  var StepIcon = /* @__PURE__ */ React181.forwardRef(function StepIcon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStepIcon"
    });
    const {
      active = false,
      className: classNameProp,
      completed = false,
      error = false,
      icon
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded133);
    const ownerState = _extends({}, props, {
      active,
      completed,
      error
    });
    const classes2 = useUtilityClasses94(ownerState);
    if (typeof icon === "number" || typeof icon === "string") {
      const className = clsx_default(classNameProp, classes2.root);
      if (error) {
        return /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(StepIconRoot, _extends({
          as: Warning_default,
          className,
          ref,
          ownerState
        }, other));
      }
      if (completed) {
        return /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(StepIconRoot, _extends({
          as: CheckCircle_default,
          className,
          ref,
          ownerState
        }, other));
      }
      return /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)(StepIconRoot, _extends({
        className,
        ref,
        ownerState
      }, other, {
        children: [_circle || (_circle = /* @__PURE__ */ (0, import_jsx_runtime192.jsx)("circle", {
          cx: "12",
          cy: "12",
          r: "12"
        })), /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(StepIconText, {
          className: classes2.text,
          x: "12",
          y: "12",
          textAnchor: "middle",
          dominantBaseline: "central",
          ownerState,
          children: icon
        })]
      }));
    }
    return icon;
  });
  true ? StepIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Whether this step is active.
     * @default false
     */
    active: import_prop_types132.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types132.default.object,
    /**
     * @ignore
     */
    className: import_prop_types132.default.string,
    /**
     * Mark the step as completed. Is passed to child components.
     * @default false
     */
    completed: import_prop_types132.default.bool,
    /**
     * If `true`, the step is marked as failed.
     * @default false
     */
    error: import_prop_types132.default.bool,
    /**
     * The label displayed in the step icon.
     */
    icon: import_prop_types132.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types132.default.oneOfType([import_prop_types132.default.arrayOf(import_prop_types132.default.oneOfType([import_prop_types132.default.func, import_prop_types132.default.object, import_prop_types132.default.bool])), import_prop_types132.default.func, import_prop_types132.default.object])
  } : void 0;
  var StepIcon_default = StepIcon;

  // node_modules/@mui/material/StepLabel/stepLabelClasses.js
  var import_generateUtilityClasses97 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass101 = __toESM(require_generateUtilityClass2());
  function getStepLabelUtilityClass(slot) {
    return (0, import_generateUtilityClass101.default)("MuiStepLabel", slot);
  }
  var stepLabelClasses = (0, import_generateUtilityClasses97.default)("MuiStepLabel", ["root", "horizontal", "vertical", "label", "active", "completed", "error", "disabled", "iconContainer", "alternativeLabel", "labelContainer"]);
  var stepLabelClasses_default = stepLabelClasses;

  // node_modules/@mui/material/StepLabel/StepLabel.js
  var import_jsx_runtime194 = __toESM(require_jsx_runtime());
  var import_jsx_runtime195 = __toESM(require_jsx_runtime());
  var _excluded134 = ["children", "className", "componentsProps", "error", "icon", "optional", "slotProps", "StepIconComponent", "StepIconProps"];
  var useUtilityClasses95 = (ownerState) => {
    const {
      classes: classes2,
      orientation,
      active,
      completed,
      error,
      disabled,
      alternativeLabel
    } = ownerState;
    const slots = {
      root: ["root", orientation, error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
      label: ["label", active && "active", completed && "completed", error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
      iconContainer: ["iconContainer", active && "active", completed && "completed", error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
      labelContainer: ["labelContainer", alternativeLabel && "alternativeLabel"]
    };
    return (0, import_composeClasses96.default)(slots, getStepLabelUtilityClass, classes2);
  };
  var StepLabelRoot = styled_default2("span", {
    name: "MuiStepLabel",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      flexDirection: "column"
    },
    [`&.${stepLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.orientation === "vertical" && {
    textAlign: "left",
    padding: "8px 0"
  }));
  var StepLabelLabel = styled_default2("span", {
    name: "MuiStepLabel",
    slot: "Label",
    overridesResolver: (props, styles8) => styles8.label
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    display: "block",
    transition: theme.transitions.create("color", {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${stepLabelClasses_default.active}`]: {
      color: (theme.vars || theme).palette.text.primary,
      fontWeight: 500
    },
    [`&.${stepLabelClasses_default.completed}`]: {
      color: (theme.vars || theme).palette.text.primary,
      fontWeight: 500
    },
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      marginTop: 16
    },
    [`&.${stepLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var StepLabelIconContainer = styled_default2("span", {
    name: "MuiStepLabel",
    slot: "IconContainer",
    overridesResolver: (props, styles8) => styles8.iconContainer
  })(() => ({
    flexShrink: 0,
    // Fix IE11 issue
    display: "flex",
    paddingRight: 8,
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      paddingRight: 0
    }
  }));
  var StepLabelLabelContainer = styled_default2("span", {
    name: "MuiStepLabel",
    slot: "LabelContainer",
    overridesResolver: (props, styles8) => styles8.labelContainer
  })(({
    theme
  }) => ({
    width: "100%",
    color: (theme.vars || theme).palette.text.secondary,
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      textAlign: "center"
    }
  }));
  var StepLabel = /* @__PURE__ */ React182.forwardRef(function StepLabel2(inProps, ref) {
    var _slotProps$label;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStepLabel"
    });
    const {
      children,
      className,
      componentsProps = {},
      error = false,
      icon: iconProp,
      optional,
      slotProps = {},
      StepIconComponent: StepIconComponentProp,
      StepIconProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded134);
    const {
      alternativeLabel,
      orientation
    } = React182.useContext(StepperContext_default);
    const {
      active,
      disabled,
      completed,
      icon: iconContext
    } = React182.useContext(StepContext_default);
    const icon = iconProp || iconContext;
    let StepIconComponent = StepIconComponentProp;
    if (icon && !StepIconComponent) {
      StepIconComponent = StepIcon_default;
    }
    const ownerState = _extends({}, props, {
      active,
      alternativeLabel,
      completed,
      disabled,
      error,
      orientation
    });
    const classes2 = useUtilityClasses95(ownerState);
    const labelSlotProps = (_slotProps$label = slotProps.label) != null ? _slotProps$label : componentsProps.label;
    return /* @__PURE__ */ (0, import_jsx_runtime195.jsxs)(StepLabelRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: [icon || StepIconComponent ? /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepLabelIconContainer, {
        className: classes2.iconContainer,
        ownerState,
        children: /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepIconComponent, _extends({
          completed,
          active,
          error,
          icon
        }, StepIconProps))
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime195.jsxs)(StepLabelLabelContainer, {
        className: classes2.labelContainer,
        ownerState,
        children: [children ? /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(StepLabelLabel, _extends({
          ownerState
        }, labelSlotProps, {
          className: clsx_default(classes2.label, labelSlotProps == null ? void 0 : labelSlotProps.className),
          children
        })) : null, optional]
      })]
    }));
  });
  true ? StepLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * In most cases will simply be a string containing a title for the label.
     */
    children: import_prop_types133.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types133.default.object,
    /**
     * @ignore
     */
    className: import_prop_types133.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types133.default.shape({
      label: import_prop_types133.default.object
    }),
    /**
     * If `true`, the step is marked as failed.
     * @default false
     */
    error: import_prop_types133.default.bool,
    /**
     * Override the default label of the step icon.
     */
    icon: import_prop_types133.default.node,
    /**
     * The optional node to display.
     */
    optional: import_prop_types133.default.node,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types133.default.shape({
      label: import_prop_types133.default.object
    }),
    /**
     * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).
     */
    StepIconComponent: import_prop_types133.default.elementType,
    /**
     * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.
     */
    StepIconProps: import_prop_types133.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types133.default.oneOfType([import_prop_types133.default.arrayOf(import_prop_types133.default.oneOfType([import_prop_types133.default.func, import_prop_types133.default.object, import_prop_types133.default.bool])), import_prop_types133.default.func, import_prop_types133.default.object])
  } : void 0;
  StepLabel.muiName = "StepLabel";
  var StepLabel_default = StepLabel;

  // node_modules/@mui/material/StepButton/stepButtonClasses.js
  var import_generateUtilityClasses98 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass102 = __toESM(require_generateUtilityClass2());
  function getStepButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass102.default)("MuiStepButton", slot);
  }
  var stepButtonClasses = (0, import_generateUtilityClasses98.default)("MuiStepButton", ["root", "horizontal", "vertical", "touchRipple"]);
  var stepButtonClasses_default = stepButtonClasses;

  // node_modules/@mui/material/StepButton/StepButton.js
  var import_jsx_runtime196 = __toESM(require_jsx_runtime());
  var _excluded135 = ["children", "className", "icon", "optional"];
  var useUtilityClasses96 = (ownerState) => {
    const {
      classes: classes2,
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation],
      touchRipple: ["touchRipple"]
    };
    return (0, import_composeClasses97.default)(slots, getStepButtonUtilityClass, classes2);
  };
  var StepButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiStepButton",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${stepButtonClasses_default.touchRipple}`]: styles8.touchRipple
      }, styles8.root, styles8[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: "100%",
    padding: "24px 16px",
    margin: "-24px -16px",
    boxSizing: "content-box"
  }, ownerState.orientation === "vertical" && {
    justifyContent: "flex-start",
    padding: "8px",
    margin: "-8px"
  }, {
    [`& .${stepButtonClasses_default.touchRipple}`]: {
      color: "rgba(0, 0, 0, 0.3)"
    }
  }));
  var StepButton = /* @__PURE__ */ React183.forwardRef(function StepButton2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStepButton"
    });
    const {
      children,
      className,
      icon,
      optional
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded135);
    const {
      disabled,
      active
    } = React183.useContext(StepContext_default);
    const {
      orientation
    } = React183.useContext(StepperContext_default);
    const ownerState = _extends({}, props, {
      orientation
    });
    const classes2 = useUtilityClasses96(ownerState);
    const childProps = {
      icon,
      optional
    };
    const child = isMuiElement_default(children, ["StepLabel"]) ? /* @__PURE__ */ React183.cloneElement(children, childProps) : /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(StepLabel_default, _extends({}, childProps, {
      children
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(StepButtonRoot, _extends({
      focusRipple: true,
      disabled,
      TouchRippleProps: {
        className: classes2.touchRipple
      },
      className: clsx_default(classes2.root, className),
      ref,
      ownerState,
      "aria-current": active ? "step" : void 0
    }, other, {
      children: child
    }));
  });
  true ? StepButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
     */
    children: import_prop_types134.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types134.default.object,
    /**
     * @ignore
     */
    className: import_prop_types134.default.string,
    /**
     * The icon displayed by the step label.
     */
    icon: import_prop_types134.default.node,
    /**
     * The optional node to display.
     */
    optional: import_prop_types134.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types134.default.oneOfType([import_prop_types134.default.arrayOf(import_prop_types134.default.oneOfType([import_prop_types134.default.func, import_prop_types134.default.object, import_prop_types134.default.bool])), import_prop_types134.default.func, import_prop_types134.default.object])
  } : void 0;
  var StepButton_default = StepButton;

  // node_modules/@mui/material/StepConnector/StepConnector.js
  init_extends();
  var React184 = __toESM(require_react());
  var import_prop_types135 = __toESM(require_prop_types());
  var import_composeClasses98 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/StepConnector/stepConnectorClasses.js
  var import_generateUtilityClasses99 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass103 = __toESM(require_generateUtilityClass2());
  function getStepConnectorUtilityClass(slot) {
    return (0, import_generateUtilityClass103.default)("MuiStepConnector", slot);
  }
  var stepConnectorClasses = (0, import_generateUtilityClasses99.default)("MuiStepConnector", ["root", "horizontal", "vertical", "alternativeLabel", "active", "completed", "disabled", "line", "lineHorizontal", "lineVertical"]);
  var stepConnectorClasses_default = stepConnectorClasses;

  // node_modules/@mui/material/StepConnector/StepConnector.js
  var import_jsx_runtime197 = __toESM(require_jsx_runtime());
  var _excluded136 = ["className"];
  var useUtilityClasses97 = (ownerState) => {
    const {
      classes: classes2,
      orientation,
      alternativeLabel,
      active,
      completed,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation, alternativeLabel && "alternativeLabel", active && "active", completed && "completed", disabled && "disabled"],
      line: ["line", `line${capitalize_default(orientation)}`]
    };
    return (0, import_composeClasses98.default)(slots, getStepConnectorUtilityClass, classes2);
  };
  var StepConnectorRoot = styled_default2("div", {
    name: "MuiStepConnector",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.orientation], ownerState.alternativeLabel && styles8.alternativeLabel, ownerState.completed && styles8.completed];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto"
  }, ownerState.orientation === "vertical" && {
    marginLeft: 12
    // half icon
  }, ownerState.alternativeLabel && {
    position: "absolute",
    top: 8 + 4,
    left: "calc(-50% + 20px)",
    right: "calc(50% + 20px)"
  }));
  var StepConnectorLine = styled_default2("span", {
    name: "MuiStepConnector",
    slot: "Line",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.line, styles8[`line${capitalize_default(ownerState.orientation)}`]];
    }
  })(({
    ownerState,
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600];
    return _extends({
      display: "block",
      borderColor: theme.vars ? theme.vars.palette.StepConnector.border : borderColor2
    }, ownerState.orientation === "horizontal" && {
      borderTopStyle: "solid",
      borderTopWidth: 1
    }, ownerState.orientation === "vertical" && {
      borderLeftStyle: "solid",
      borderLeftWidth: 1,
      minHeight: 24
    });
  });
  var StepConnector = /* @__PURE__ */ React184.forwardRef(function StepConnector2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStepConnector"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded136);
    const {
      alternativeLabel,
      orientation = "horizontal"
    } = React184.useContext(StepperContext_default);
    const {
      active,
      disabled,
      completed
    } = React184.useContext(StepContext_default);
    const ownerState = _extends({}, props, {
      alternativeLabel,
      orientation,
      active,
      completed,
      disabled
    });
    const classes2 = useUtilityClasses97(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(StepConnectorRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(StepConnectorLine, {
        className: classes2.line,
        ownerState
      })
    }));
  });
  true ? StepConnector.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types135.default.object,
    /**
     * @ignore
     */
    className: import_prop_types135.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types135.default.oneOfType([import_prop_types135.default.arrayOf(import_prop_types135.default.oneOfType([import_prop_types135.default.func, import_prop_types135.default.object, import_prop_types135.default.bool])), import_prop_types135.default.func, import_prop_types135.default.object])
  } : void 0;
  var StepConnector_default = StepConnector;

  // node_modules/@mui/material/StepContent/StepContent.js
  init_extends();
  var React185 = __toESM(require_react());
  var import_prop_types136 = __toESM(require_prop_types());
  var import_composeClasses99 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/StepContent/stepContentClasses.js
  var import_generateUtilityClasses100 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass104 = __toESM(require_generateUtilityClass2());
  function getStepContentUtilityClass(slot) {
    return (0, import_generateUtilityClass104.default)("MuiStepContent", slot);
  }
  var stepContentClasses = (0, import_generateUtilityClasses100.default)("MuiStepContent", ["root", "last", "transition"]);
  var stepContentClasses_default = stepContentClasses;

  // node_modules/@mui/material/StepContent/StepContent.js
  var import_jsx_runtime198 = __toESM(require_jsx_runtime());
  var _excluded137 = ["children", "className", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var useUtilityClasses98 = (ownerState) => {
    const {
      classes: classes2,
      last
    } = ownerState;
    const slots = {
      root: ["root", last && "last"],
      transition: ["transition"]
    };
    return (0, import_composeClasses99.default)(slots, getStepContentUtilityClass, classes2);
  };
  var StepContentRoot = styled_default2("div", {
    name: "MuiStepContent",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.last && styles8.last];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    marginLeft: 12,
    // half icon
    paddingLeft: 8 + 12,
    // margin + half icon
    paddingRight: 8,
    borderLeft: theme.vars ? `1px solid ${theme.vars.palette.StepContent.border}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600]}`
  }, ownerState.last && {
    borderLeft: "none"
  }));
  var StepContentTransition = styled_default2(Collapse_default, {
    name: "MuiStepContent",
    slot: "Transition",
    overridesResolver: (props, styles8) => styles8.transition
  })({});
  var StepContent = /* @__PURE__ */ React185.forwardRef(function StepContent2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStepContent"
    });
    const {
      children,
      className,
      TransitionComponent = Collapse_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded137);
    const {
      orientation
    } = React185.useContext(StepperContext_default);
    const {
      active,
      last,
      expanded
    } = React185.useContext(StepContext_default);
    const ownerState = _extends({}, props, {
      last
    });
    const classes2 = useUtilityClasses98(ownerState);
    if (true) {
      if (orientation !== "vertical") {
        console.error("MUI: <StepContent /> is only designed for use with the vertical stepper.");
      }
    }
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(StepContentRoot, _extends({
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(StepContentTransition, _extends({
        as: TransitionComponent,
        in: active || expanded,
        className: classes2.transition,
        ownerState,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps, {
        children
      }))
    }));
  });
  true ? StepContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types136.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types136.default.object,
    /**
     * @ignore
     */
    className: import_prop_types136.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types136.default.oneOfType([import_prop_types136.default.arrayOf(import_prop_types136.default.oneOfType([import_prop_types136.default.func, import_prop_types136.default.object, import_prop_types136.default.bool])), import_prop_types136.default.func, import_prop_types136.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Collapse
     */
    TransitionComponent: import_prop_types136.default.elementType,
    /**
     * Adjust the duration of the content expand transition.
     * Passed as a prop to the transition component.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types136.default.oneOfType([import_prop_types136.default.oneOf(["auto"]), import_prop_types136.default.number, import_prop_types136.default.shape({
      appear: import_prop_types136.default.number,
      enter: import_prop_types136.default.number,
      exit: import_prop_types136.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types136.default.object
  } : void 0;
  var StepContent_default = StepContent;

  // node_modules/@mui/material/Stepper/Stepper.js
  init_extends();
  var React186 = __toESM(require_react());
  var import_prop_types137 = __toESM(require_prop_types());
  var import_integerPropType11 = __toESM(require_integerPropType2());
  var import_composeClasses100 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Stepper/stepperClasses.js
  var import_generateUtilityClasses101 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass105 = __toESM(require_generateUtilityClass2());
  function getStepperUtilityClass(slot) {
    return (0, import_generateUtilityClass105.default)("MuiStepper", slot);
  }
  var stepperClasses = (0, import_generateUtilityClasses101.default)("MuiStepper", ["root", "horizontal", "vertical", "alternativeLabel"]);
  var stepperClasses_default = stepperClasses;

  // node_modules/@mui/material/Stepper/Stepper.js
  var import_jsx_runtime199 = __toESM(require_jsx_runtime());
  var _excluded138 = ["activeStep", "alternativeLabel", "children", "className", "component", "connector", "nonLinear", "orientation"];
  var useUtilityClasses99 = (ownerState) => {
    const {
      orientation,
      alternativeLabel,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", orientation, alternativeLabel && "alternativeLabel"]
    };
    return (0, import_composeClasses100.default)(slots, getStepperUtilityClass, classes2);
  };
  var StepperRoot = styled_default2("div", {
    name: "MuiStepper",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.orientation], ownerState.alternativeLabel && styles8.alternativeLabel];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex"
  }, ownerState.orientation === "horizontal" && {
    flexDirection: "row",
    alignItems: "center"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, ownerState.alternativeLabel && {
    alignItems: "flex-start"
  }));
  var defaultConnector = /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(StepConnector_default, {});
  var Stepper = /* @__PURE__ */ React186.forwardRef(function Stepper2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiStepper"
    });
    const {
      activeStep = 0,
      alternativeLabel = false,
      children,
      className,
      component = "div",
      connector = defaultConnector,
      nonLinear = false,
      orientation = "horizontal"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded138);
    const ownerState = _extends({}, props, {
      alternativeLabel,
      orientation,
      component
    });
    const classes2 = useUtilityClasses99(ownerState);
    const childrenArray = React186.Children.toArray(children).filter(Boolean);
    const steps = childrenArray.map((step, index) => {
      return /* @__PURE__ */ React186.cloneElement(step, _extends({
        index,
        last: index + 1 === childrenArray.length
      }, step.props));
    });
    const contextValue = React186.useMemo(() => ({
      activeStep,
      alternativeLabel,
      connector,
      nonLinear,
      orientation
    }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
    return /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(StepperContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(StepperRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes2.root, className),
        ref
      }, other, {
        children: steps
      }))
    });
  });
  true ? Stepper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the active step (zero based index).
     * Set to -1 to disable all the steps.
     * @default 0
     */
    activeStep: import_integerPropType11.default,
    /**
     * If set to 'true' and orientation is horizontal,
     * then the step label will be positioned under the icon.
     * @default false
     */
    alternativeLabel: import_prop_types137.default.bool,
    /**
     * Two or more `<Step />` components.
     */
    children: import_prop_types137.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types137.default.object,
    /**
     * @ignore
     */
    className: import_prop_types137.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types137.default.elementType,
    /**
     * An element to be placed between each step.
     * @default <StepConnector />
     */
    connector: import_prop_types137.default.element,
    /**
     * If set the `Stepper` will not assist in controlling steps for linear flow.
     * @default false
     */
    nonLinear: import_prop_types137.default.bool,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types137.default.oneOf(["horizontal", "vertical"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types137.default.oneOfType([import_prop_types137.default.arrayOf(import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object, import_prop_types137.default.bool])), import_prop_types137.default.func, import_prop_types137.default.object])
  } : void 0;
  var Stepper_default = Stepper;

  // node_modules/@mui/material/index.js
  var import_SvgIcon3 = __toESM(require_SvgIcon2());
  __reExport(material_exports, __toESM(require_SvgIcon2()));

  // node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js
  init_extends();
  var React188 = __toESM(require_react());
  var ReactDOM3 = __toESM(require_react_dom());
  var import_prop_types139 = __toESM(require_prop_types());
  var import_elementTypeAcceptingRef7 = __toESM(require_elementTypeAcceptingRef2());
  var import_useThemeProps96 = __toESM(require_useThemeProps2());

  // node_modules/@mui/material/SwipeableDrawer/SwipeArea.js
  init_extends();
  var React187 = __toESM(require_react());
  var import_prop_types138 = __toESM(require_prop_types());
  var import_jsx_runtime200 = __toESM(require_jsx_runtime());
  var _excluded139 = ["anchor", "classes", "className", "width", "style"];
  var SwipeAreaRoot = styled_default2("div", {
    shouldForwardProp: rootShouldForwardProp_default
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    top: 0,
    left: 0,
    bottom: 0,
    zIndex: theme.zIndex.drawer - 1
  }, ownerState.anchor === "left" && {
    right: "auto"
  }, ownerState.anchor === "right" && {
    left: "auto",
    right: 0
  }, ownerState.anchor === "top" && {
    bottom: "auto",
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    bottom: 0,
    right: 0
  }));
  var SwipeArea = /* @__PURE__ */ React187.forwardRef(function SwipeArea2(props, ref) {
    const {
      anchor,
      classes: classes2 = {},
      className,
      width: width2,
      style: style4
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded139);
    const ownerState = props;
    return /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(SwipeAreaRoot, _extends({
      className: clsx_default("PrivateSwipeArea-root", classes2.root, classes2[`anchor${capitalize_default(anchor)}`], className),
      ref,
      style: _extends({
        [isHorizontal(anchor) ? "width" : "height"]: width2
      }, style4),
      ownerState
    }, other));
  });
  true ? SwipeArea.propTypes = {
    /**
     * Side on which to attach the discovery area.
     */
    anchor: import_prop_types138.default.oneOf(["left", "top", "right", "bottom"]).isRequired,
    /**
     * @ignore
     */
    classes: import_prop_types138.default.object,
    /**
     * @ignore
     */
    className: import_prop_types138.default.string,
    /**
     * @ignore
     */
    style: import_prop_types138.default.object,
    /**
     * The width of the left most (or right most) area in `px` where the
     * drawer can be swiped open from.
     */
    width: import_prop_types138.default.number.isRequired
  } : void 0;
  var SwipeArea_default = SwipeArea;

  // node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js
  var import_jsx_runtime201 = __toESM(require_jsx_runtime());
  var import_jsx_runtime202 = __toESM(require_jsx_runtime());
  var _excluded140 = ["BackdropProps"];
  var _excluded221 = ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "allowSwipeInChildren", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"];
  var UNCERTAINTY_THRESHOLD = 3;
  var DRAG_STARTED_SIGNAL = 20;
  var claimedSwipeInstance = null;
  function calculateCurrentX(anchor, touches, doc) {
    return anchor === "right" ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;
  }
  function calculateCurrentY(anchor, touches, containerWindow) {
    return anchor === "bottom" ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;
  }
  function getMaxTranslate(horizontalSwipe, paperInstance) {
    return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
  }
  function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
    return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
  }
  function getDomTreeShapes(element, rootNode) {
    const domTreeShapes = [];
    while (element && element !== rootNode.parentElement) {
      const style4 = ownerWindow_default(rootNode).getComputedStyle(element);
      if (
        // Ignore the scroll children if the element is absolute positioned.
        style4.getPropertyValue("position") === "absolute" || // Ignore the scroll children if the element has an overflowX hidden
        style4.getPropertyValue("overflow-x") === "hidden"
      ) {
      } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
        domTreeShapes.push(element);
      }
      element = element.parentElement;
    }
    return domTreeShapes;
  }
  function computeHasNativeHandler({
    domTreeShapes,
    start: start2,
    current,
    anchor
  }) {
    const axisProperties = {
      scrollPosition: {
        x: "scrollLeft",
        y: "scrollTop"
      },
      scrollLength: {
        x: "scrollWidth",
        y: "scrollHeight"
      },
      clientLength: {
        x: "clientWidth",
        y: "clientHeight"
      }
    };
    return domTreeShapes.some((shape2) => {
      let goingForward = current >= start2;
      if (anchor === "top" || anchor === "left") {
        goingForward = !goingForward;
      }
      const axis = anchor === "left" || anchor === "right" ? "x" : "y";
      const scrollPosition = Math.round(shape2[axisProperties.scrollPosition[axis]]);
      const areNotAtStart = scrollPosition > 0;
      const areNotAtEnd = scrollPosition + shape2[axisProperties.clientLength[axis]] < shape2[axisProperties.scrollLength[axis]];
      if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
        return true;
      }
      return false;
    });
  }
  var iOS = typeof navigator !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent);
  var SwipeableDrawer = /* @__PURE__ */ React188.forwardRef(function SwipeableDrawer2(inProps, ref) {
    const props = (0, import_useThemeProps96.default)({
      name: "MuiSwipeableDrawer",
      props: inProps
    });
    const theme = useTheme6();
    const transitionDurationDefault = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      anchor = "left",
      disableBackdropTransition = false,
      disableDiscovery = false,
      disableSwipeToOpen = iOS,
      hideBackdrop,
      hysteresis = 0.52,
      allowSwipeInChildren = false,
      minFlingVelocity = 450,
      ModalProps: {
        BackdropProps
      } = {},
      onClose,
      onOpen,
      open = false,
      PaperProps = {},
      SwipeAreaProps,
      swipeAreaWidth = 20,
      transitionDuration = transitionDurationDefault,
      variant = "temporary"
      // Mobile first.
    } = props, ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded140), other = _objectWithoutPropertiesLoose(props, _excluded221);
    const [maybeSwiping, setMaybeSwiping] = React188.useState(false);
    const swipeInstance = React188.useRef({
      isSwiping: null
    });
    const swipeAreaRef = React188.useRef();
    const backdropRef = React188.useRef();
    const paperRef = React188.useRef();
    const handleRef = useForkRef_default(PaperProps.ref, paperRef);
    const touchDetected = React188.useRef(false);
    const calculatedDurationRef = React188.useRef();
    useEnhancedEffect_default(() => {
      calculatedDurationRef.current = null;
    }, [open]);
    const setPosition = React188.useCallback((translate, options = {}) => {
      const {
        mode = null,
        changeTransition = true
      } = options;
      const anchorRtl = getAnchor(theme, anchor);
      const rtlTranslateMultiplier = ["right", "bottom"].indexOf(anchorRtl) !== -1 ? 1 : -1;
      const horizontalSwipe = isHorizontal(anchor);
      const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;
      const drawerStyle = paperRef.current.style;
      drawerStyle.webkitTransform = transform;
      drawerStyle.transform = transform;
      let transition = "";
      if (mode) {
        transition = theme.transitions.create("all", getTransitionProps({
          easing: void 0,
          style: void 0,
          timeout: transitionDuration
        }, {
          mode
        }));
      }
      if (changeTransition) {
        drawerStyle.webkitTransition = transition;
        drawerStyle.transition = transition;
      }
      if (!disableBackdropTransition && !hideBackdrop) {
        const backdropStyle = backdropRef.current.style;
        backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);
        if (changeTransition) {
          backdropStyle.webkitTransition = transition;
          backdropStyle.transition = transition;
        }
      }
    }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
    const handleBodyTouchEnd = useEventCallback_default((nativeEvent) => {
      if (!touchDetected.current) {
        return;
      }
      claimedSwipeInstance = null;
      touchDetected.current = false;
      ReactDOM3.flushSync(() => {
        setMaybeSwiping(false);
      });
      if (!swipeInstance.current.isSwiping) {
        swipeInstance.current.isSwiping = null;
        return;
      }
      swipeInstance.current.isSwiping = null;
      const anchorRtl = getAnchor(theme, anchor);
      const horizontal = isHorizontal(anchor);
      let current;
      if (horizontal) {
        current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument_default(nativeEvent.currentTarget));
      } else {
        current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow_default(nativeEvent.currentTarget));
      }
      const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
      const maxTranslate = getMaxTranslate(horizontal, paperRef.current);
      const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
      const translateRatio = currentTranslate / maxTranslate;
      if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
        calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1e3;
      }
      if (open) {
        if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
          onClose();
        } else {
          setPosition(0, {
            mode: "exit"
          });
        }
        return;
      }
      if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
        onOpen();
      } else {
        setPosition(getMaxTranslate(horizontal, paperRef.current), {
          mode: "enter"
        });
      }
    });
    const startMaybeSwiping = (force = false) => {
      if (!maybeSwiping) {
        if (force || !(disableDiscovery && allowSwipeInChildren)) {
          ReactDOM3.flushSync(() => {
            setMaybeSwiping(true);
          });
        }
        const horizontalSwipe = isHorizontal(anchor);
        if (!open && paperRef.current) {
          setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {
            changeTransition: false
          });
        }
        swipeInstance.current.velocity = 0;
        swipeInstance.current.lastTime = null;
        swipeInstance.current.lastTranslate = null;
        swipeInstance.current.paperHit = false;
        touchDetected.current = true;
      }
    };
    const handleBodyTouchMove = useEventCallback_default((nativeEvent) => {
      if (!paperRef.current || !touchDetected.current) {
        return;
      }
      if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {
        return;
      }
      startMaybeSwiping(true);
      const anchorRtl = getAnchor(theme, anchor);
      const horizontalSwipe = isHorizontal(anchor);
      const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument_default(nativeEvent.currentTarget));
      const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow_default(nativeEvent.currentTarget));
      if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {
        const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);
        const hasNativeHandler = computeHasNativeHandler({
          domTreeShapes,
          start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
          current: horizontalSwipe ? currentX : currentY,
          anchor
        });
        if (hasNativeHandler) {
          claimedSwipeInstance = true;
          return;
        }
        claimedSwipeInstance = swipeInstance.current;
      }
      if (swipeInstance.current.isSwiping == null) {
        const dx = Math.abs(currentX - swipeInstance.current.startX);
        const dy = Math.abs(currentY - swipeInstance.current.startY);
        const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;
        if (definitelySwiping && nativeEvent.cancelable) {
          nativeEvent.preventDefault();
        }
        if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
          swipeInstance.current.isSwiping = definitelySwiping;
          if (!definitelySwiping) {
            handleBodyTouchEnd(nativeEvent);
            return;
          }
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
          if (!disableDiscovery && !open) {
            if (horizontalSwipe) {
              swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;
            } else {
              swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;
            }
          }
        }
      }
      if (!swipeInstance.current.isSwiping) {
        return;
      }
      const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
      let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;
      if (open && !swipeInstance.current.paperHit) {
        startLocation = Math.min(startLocation, maxTranslate);
      }
      const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);
      if (open) {
        if (!swipeInstance.current.paperHit) {
          const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;
          if (paperHit) {
            swipeInstance.current.paperHit = true;
            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY;
          } else {
            return;
          }
        } else if (translate === 0) {
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
        }
      }
      if (swipeInstance.current.lastTranslate === null) {
        swipeInstance.current.lastTranslate = translate;
        swipeInstance.current.lastTime = performance.now() + 1;
      }
      const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;
      swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
      swipeInstance.current.lastTranslate = translate;
      swipeInstance.current.lastTime = performance.now();
      if (nativeEvent.cancelable) {
        nativeEvent.preventDefault();
      }
      setPosition(translate);
    });
    const handleBodyTouchStart = useEventCallback_default((nativeEvent) => {
      if (nativeEvent.defaultPrevented) {
        return;
      }
      if (nativeEvent.defaultMuiPrevented) {
        return;
      }
      if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {
        return;
      }
      const anchorRtl = getAnchor(theme, anchor);
      const horizontalSwipe = isHorizontal(anchor);
      const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument_default(nativeEvent.currentTarget));
      const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow_default(nativeEvent.currentTarget));
      if (!open) {
        var _paperRef$current;
        if (disableSwipeToOpen || !(nativeEvent.target === swipeAreaRef.current || (_paperRef$current = paperRef.current) != null && _paperRef$current.contains(nativeEvent.target) && (typeof allowSwipeInChildren === "function" ? allowSwipeInChildren(nativeEvent, swipeAreaRef.current, paperRef.current) : allowSwipeInChildren))) {
          return;
        }
        if (horizontalSwipe) {
          if (currentX > swipeAreaWidth) {
            return;
          }
        } else if (currentY > swipeAreaWidth) {
          return;
        }
      }
      nativeEvent.defaultMuiPrevented = true;
      claimedSwipeInstance = null;
      swipeInstance.current.startX = currentX;
      swipeInstance.current.startY = currentY;
      startMaybeSwiping();
    });
    React188.useEffect(() => {
      if (variant === "temporary") {
        const doc = ownerDocument_default(paperRef.current);
        doc.addEventListener("touchstart", handleBodyTouchStart);
        doc.addEventListener("touchmove", handleBodyTouchMove, {
          passive: !open
        });
        doc.addEventListener("touchend", handleBodyTouchEnd);
        return () => {
          doc.removeEventListener("touchstart", handleBodyTouchStart);
          doc.removeEventListener("touchmove", handleBodyTouchMove, {
            passive: !open
          });
          doc.removeEventListener("touchend", handleBodyTouchEnd);
        };
      }
      return void 0;
    }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
    React188.useEffect(() => () => {
      if (claimedSwipeInstance === swipeInstance.current) {
        claimedSwipeInstance = null;
      }
    }, []);
    React188.useEffect(() => {
      if (!open) {
        setMaybeSwiping(false);
      }
    }, [open]);
    return /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(React188.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime201.jsx)(Drawer_default, _extends({
        open: variant === "temporary" && maybeSwiping ? true : open,
        variant,
        ModalProps: _extends({
          BackdropProps: _extends({}, BackdropProps, {
            ref: backdropRef
          })
        }, variant === "temporary" && {
          keepMounted: true
        }, ModalPropsProp),
        hideBackdrop,
        PaperProps: _extends({}, PaperProps, {
          style: _extends({
            pointerEvents: variant === "temporary" && !open && !allowSwipeInChildren ? "none" : ""
          }, PaperProps.style),
          ref: handleRef
        }),
        anchor,
        transitionDuration: calculatedDurationRef.current || transitionDuration,
        onClose,
        ref
      }, other)), !disableSwipeToOpen && variant === "temporary" && /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(NoSsr, {
        children: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(SwipeArea_default, _extends({
          anchor,
          ref: swipeAreaRef,
          width: swipeAreaWidth
        }, SwipeAreaProps))
      })]
    });
  });
  true ? SwipeableDrawer.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.
     * This can be useful in scenarios where the drawer is partially visible.
     * You can customize it further with a callback that determines which children the user can drag over to open the drawer
     * (for example, to ignore other elements that handle touch move events, like sliders).
     *
     * @param {TouchEvent} event The 'touchstart' event
     * @param {HTMLDivElement} swipeArea The swipe area element
     * @param {HTMLDivElement} paper The drawer's paper element
     *
     * @default false
     */
    allowSwipeInChildren: import_prop_types139.default.oneOfType([import_prop_types139.default.func, import_prop_types139.default.bool]),
    /**
     * @ignore
     */
    anchor: import_prop_types139.default.oneOf(["bottom", "left", "right", "top"]),
    /**
     * The content of the component.
     */
    children: import_prop_types139.default.node,
    /**
     * Disable the backdrop transition.
     * This can improve the FPS on low-end devices.
     * @default false
     */
    disableBackdropTransition: import_prop_types139.default.bool,
    /**
     * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
     * to promote accidental discovery of the swipe gesture.
     * @default false
     */
    disableDiscovery: import_prop_types139.default.bool,
    /**
     * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
     * navigation actions. Swipe to open is disabled on iOS browsers by default.
     * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)
     */
    disableSwipeToOpen: import_prop_types139.default.bool,
    /**
     * @ignore
     */
    hideBackdrop: import_prop_types139.default.bool,
    /**
     * Affects how far the drawer must be opened/closed to change its state.
     * Specified as percent (0-1) of the width of the drawer
     * @default 0.52
     */
    hysteresis: import_prop_types139.default.number,
    /**
     * Defines, from which (average) velocity on, the swipe is
     * defined as complete although hysteresis isn't reached.
     * Good threshold is between 250 - 1000 px/s
     * @default 450
     */
    minFlingVelocity: import_prop_types139.default.number,
    /**
     * @ignore
     */
    ModalProps: import_prop_types139.default.shape({
      BackdropProps: import_prop_types139.default.shape({
        component: import_elementTypeAcceptingRef7.default
      })
    }),
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent<{}>} event The event source of the callback.
     */
    onClose: import_prop_types139.default.func.isRequired,
    /**
     * Callback fired when the component requests to be opened.
     *
     * @param {React.SyntheticEvent<{}>} event The event source of the callback.
     */
    onOpen: import_prop_types139.default.func.isRequired,
    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: import_prop_types139.default.bool,
    /**
     * @ignore
     */
    PaperProps: import_prop_types139.default.shape({
      component: import_elementTypeAcceptingRef7.default,
      style: import_prop_types139.default.object
    }),
    /**
     * The element is used to intercept the touch events on the edge.
     */
    SwipeAreaProps: import_prop_types139.default.object,
    /**
     * The width of the left most (or right most) area in `px` that
     * the drawer can be swiped open from.
     * @default 20
     */
    swipeAreaWidth: import_prop_types139.default.number,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types139.default.oneOfType([import_prop_types139.default.number, import_prop_types139.default.shape({
      appear: import_prop_types139.default.number,
      enter: import_prop_types139.default.number,
      exit: import_prop_types139.default.number
    })]),
    /**
     * @ignore
     */
    variant: import_prop_types139.default.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  var SwipeableDrawer_default = SwipeableDrawer;

  // node_modules/@mui/material/Switch/Switch.js
  init_extends();
  var React189 = __toESM(require_react());
  var import_prop_types140 = __toESM(require_prop_types());
  var import_refType14 = __toESM(require_refType2());
  var import_composeClasses101 = __toESM(require_composeClasses2());
  var import_colorManipulator24 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Switch/switchClasses.js
  var import_generateUtilityClasses102 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass106 = __toESM(require_generateUtilityClass2());
  function getSwitchUtilityClass(slot) {
    return (0, import_generateUtilityClass106.default)("MuiSwitch", slot);
  }
  var switchClasses = (0, import_generateUtilityClasses102.default)("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  var switchClasses_default = switchClasses;

  // node_modules/@mui/material/Switch/Switch.js
  var import_jsx_runtime203 = __toESM(require_jsx_runtime());
  var import_jsx_runtime204 = __toESM(require_jsx_runtime());
  var _excluded141 = ["className", "color", "edge", "size", "sx"];
  var useThemeProps14 = createUseThemeProps("MuiSwitch");
  var useUtilityClasses100 = (ownerState) => {
    const {
      classes: classes2,
      edge,
      size,
      color: color2,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
      switchBase: ["switchBase", `color${capitalize_default(color2)}`, checked && "checked", disabled && "disabled"],
      thumb: ["thumb"],
      track: ["track"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses101.default)(slots, getSwitchUtilityClass, classes2);
    return _extends({}, classes2, composedClasses);
  };
  var SwitchRoot = styled_default2("span", {
    name: "MuiSwitch",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.edge && styles8[`edge${capitalize_default(ownerState.edge)}`], styles8[`size${capitalize_default(ownerState.size)}`]];
    }
  })({
    display: "inline-flex",
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: "hidden",
    padding: 12,
    boxSizing: "border-box",
    position: "relative",
    flexShrink: 0,
    zIndex: 0,
    // Reset the stacking context.
    verticalAlign: "middle",
    // For correct alignment with the text.
    "@media print": {
      colorAdjust: "exact"
    },
    variants: [{
      props: {
        edge: "start"
      },
      style: {
        marginLeft: -8
      }
    }, {
      props: {
        edge: "end"
      },
      style: {
        marginRight: -8
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        width: 40,
        height: 24,
        padding: 7,
        [`& .${switchClasses_default.thumb}`]: {
          width: 16,
          height: 16
        },
        [`& .${switchClasses_default.switchBase}`]: {
          padding: 4,
          [`&.${switchClasses_default.checked}`]: {
            transform: "translateX(16px)"
          }
        }
      }
    }]
  });
  var SwitchSwitchBase = styled_default2(SwitchBase_default, {
    name: "MuiSwitch",
    slot: "SwitchBase",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.switchBase, {
        [`& .${switchClasses_default.input}`]: styles8.input
      }, ownerState.color !== "default" && styles8[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1,
    // Render above the focus ripple.
    color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
    transition: theme.transitions.create(["left", "transform"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses_default.checked}`]: {
      transform: "translateX(20px)"
    },
    [`&.${switchClasses_default.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
    },
    [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses_default.disabled} + .${switchClasses_default.track}`]: {
      opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
    },
    [`& .${switchClasses_default.input}`]: {
      left: "-100%",
      width: "300%"
    }
  }), ({
    theme
  }) => ({
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator24.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    variants: [...Object.entries(theme.palette).filter(([, value]) => value.main && value.light).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        [`&.${switchClasses_default.checked}`]: {
          color: (theme.vars || theme).palette[color2].main,
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color2].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator24.alpha)(theme.palette[color2].main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          [`&.${switchClasses_default.disabled}`]: {
            color: theme.vars ? theme.vars.palette.Switch[`${color2}DisabledColor`] : `${theme.palette.mode === "light" ? (0, import_colorManipulator24.lighten)(theme.palette[color2].main, 0.62) : (0, import_colorManipulator24.darken)(theme.palette[color2].main, 0.55)}`
          }
        },
        [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
          backgroundColor: (theme.vars || theme).palette[color2].main
        }
      }
    }))]
  }));
  var SwitchTrack = styled_default2("span", {
    name: "MuiSwitch",
    slot: "Track",
    overridesResolver: (props, styles8) => styles8.track
  })(({
    theme
  }) => ({
    height: "100%",
    width: "100%",
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(["opacity", "background-color"], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
    opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
  }));
  var SwitchThumb = styled_default2("span", {
    name: "MuiSwitch",
    slot: "Thumb",
    overridesResolver: (props, styles8) => styles8.thumb
  })(({
    theme
  }) => ({
    boxShadow: (theme.vars || theme).shadows[1],
    backgroundColor: "currentColor",
    width: 20,
    height: 20,
    borderRadius: "50%"
  }));
  var Switch = /* @__PURE__ */ React189.forwardRef(function Switch2(inProps, ref) {
    const props = useThemeProps14({
      props: inProps,
      name: "MuiSwitch"
    });
    const {
      className,
      color: color2 = "primary",
      edge = false,
      size = "medium",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded141);
    const ownerState = _extends({}, props, {
      color: color2,
      edge,
      size
    });
    const classes2 = useUtilityClasses100(ownerState);
    const icon = /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(SwitchThumb, {
      className: classes2.thumb,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime204.jsxs)(SwitchRoot, {
      className: clsx_default(classes2.root, className),
      sx,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime203.jsx)(SwitchSwitchBase, _extends({
        type: "checkbox",
        icon,
        checkedIcon: icon,
        ref,
        ownerState
      }, other, {
        classes: _extends({}, classes2, {
          root: classes2.switchBase
        })
      })), /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(SwitchTrack, {
        className: classes2.track,
        ownerState
      })]
    });
  });
  true ? Switch.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types140.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types140.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types140.default.object,
    /**
     * @ignore
     */
    className: import_prop_types140.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types140.default.oneOfType([import_prop_types140.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types140.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types140.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types140.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types140.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types140.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types140.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types140.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types140.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType14.default,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types140.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types140.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense switch styling.
     * @default 'medium'
     */
    size: import_prop_types140.default.oneOfType([import_prop_types140.default.oneOf(["medium", "small"]), import_prop_types140.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types140.default.oneOfType([import_prop_types140.default.arrayOf(import_prop_types140.default.oneOfType([import_prop_types140.default.func, import_prop_types140.default.object, import_prop_types140.default.bool])), import_prop_types140.default.func, import_prop_types140.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types140.default.any
  } : void 0;
  var Switch_default = Switch;

  // node_modules/@mui/material/Tab/Tab.js
  init_extends();
  var React190 = __toESM(require_react());
  var import_prop_types141 = __toESM(require_prop_types());
  var import_composeClasses102 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Tab/tabClasses.js
  var import_generateUtilityClasses103 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass107 = __toESM(require_generateUtilityClass2());
  function getTabUtilityClass(slot) {
    return (0, import_generateUtilityClass107.default)("MuiTab", slot);
  }
  var tabClasses = (0, import_generateUtilityClasses103.default)("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]);
  var tabClasses_default = tabClasses;

  // node_modules/@mui/material/Tab/Tab.js
  var import_jsx_runtime205 = __toESM(require_jsx_runtime());
  var _excluded142 = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
  var useUtilityClasses101 = (ownerState) => {
    const {
      classes: classes2,
      textColor,
      fullWidth,
      wrapped,
      icon,
      label,
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", icon && label && "labelIcon", `textColor${capitalize_default(textColor)}`, fullWidth && "fullWidth", wrapped && "wrapped", selected && "selected", disabled && "disabled"],
      iconWrapper: ["iconWrapper"]
    };
    return (0, import_composeClasses102.default)(slots, getTabUtilityClass, classes2);
  };
  var TabRoot = styled_default2(ButtonBase_default, {
    name: "MuiTab",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.label && ownerState.icon && styles8.labelIcon, styles8[`textColor${capitalize_default(ownerState.textColor)}`], ownerState.fullWidth && styles8.fullWidth, ownerState.wrapped && styles8.wrapped, {
        [`& .${tabClasses_default.iconWrapper}`]: styles8.iconWrapper
      }];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.button, {
    maxWidth: 360,
    minWidth: 90,
    position: "relative",
    minHeight: 48,
    flexShrink: 0,
    padding: "12px 16px",
    overflow: "hidden",
    whiteSpace: "normal",
    textAlign: "center"
  }, ownerState.label && {
    flexDirection: ownerState.iconPosition === "top" || ownerState.iconPosition === "bottom" ? "column" : "row"
  }, {
    lineHeight: 1.25
  }, ownerState.icon && ownerState.label && {
    minHeight: 72,
    paddingTop: 9,
    paddingBottom: 9,
    [`& > .${tabClasses_default.iconWrapper}`]: _extends({}, ownerState.iconPosition === "top" && {
      marginBottom: 6
    }, ownerState.iconPosition === "bottom" && {
      marginTop: 6
    }, ownerState.iconPosition === "start" && {
      marginRight: theme.spacing(1)
    }, ownerState.iconPosition === "end" && {
      marginLeft: theme.spacing(1)
    })
  }, ownerState.textColor === "inherit" && {
    color: "inherit",
    opacity: 0.6,
    // same opacity as theme.palette.text.secondary
    [`&.${tabClasses_default.selected}`]: {
      opacity: 1
    },
    [`&.${tabClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.textColor === "primary" && {
    color: (theme.vars || theme).palette.text.secondary,
    [`&.${tabClasses_default.selected}`]: {
      color: (theme.vars || theme).palette.primary.main
    },
    [`&.${tabClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    }
  }, ownerState.textColor === "secondary" && {
    color: (theme.vars || theme).palette.text.secondary,
    [`&.${tabClasses_default.selected}`]: {
      color: (theme.vars || theme).palette.secondary.main
    },
    [`&.${tabClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    }
  }, ownerState.fullWidth && {
    flexShrink: 1,
    flexGrow: 1,
    flexBasis: 0,
    maxWidth: "none"
  }, ownerState.wrapped && {
    fontSize: theme.typography.pxToRem(12)
  }));
  var Tab = /* @__PURE__ */ React190.forwardRef(function Tab2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTab"
    });
    const {
      className,
      disabled = false,
      disableFocusRipple = false,
      // eslint-disable-next-line react/prop-types
      fullWidth,
      icon: iconProp,
      iconPosition = "top",
      // eslint-disable-next-line react/prop-types
      indicator,
      label,
      onChange,
      onClick,
      onFocus,
      // eslint-disable-next-line react/prop-types
      selected,
      // eslint-disable-next-line react/prop-types
      selectionFollowsFocus,
      // eslint-disable-next-line react/prop-types
      textColor = "inherit",
      value,
      wrapped = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded142);
    const ownerState = _extends({}, props, {
      disabled,
      disableFocusRipple,
      selected,
      icon: !!iconProp,
      iconPosition,
      label: !!label,
      fullWidth,
      textColor,
      wrapped
    });
    const classes2 = useUtilityClasses101(ownerState);
    const icon = iconProp && label && /* @__PURE__ */ React190.isValidElement(iconProp) ? /* @__PURE__ */ React190.cloneElement(iconProp, {
      className: clsx_default(classes2.iconWrapper, iconProp.props.className)
    }) : iconProp;
    const handleClick = (event) => {
      if (!selected && onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    const handleFocus = (event) => {
      if (selectionFollowsFocus && !selected && onChange) {
        onChange(event, value);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(TabRoot, _extends({
      focusRipple: !disableFocusRipple,
      className: clsx_default(classes2.root, className),
      ref,
      role: "tab",
      "aria-selected": selected,
      disabled,
      onClick: handleClick,
      onFocus: handleFocus,
      ownerState,
      tabIndex: selected ? 0 : -1
    }, other, {
      children: [iconPosition === "top" || iconPosition === "start" ? /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(React190.Fragment, {
        children: [icon, label]
      }) : /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)(React190.Fragment, {
        children: [label, icon]
      }), indicator]
    }));
  });
  true ? Tab.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types141.default.object,
    /**
     * @ignore
     */
    className: import_prop_types141.default.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types141.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types141.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types141.default.bool,
    /**
     * The icon to display.
     */
    icon: import_prop_types141.default.oneOfType([import_prop_types141.default.element, import_prop_types141.default.string]),
    /**
     * The position of the icon relative to the label.
     * @default 'top'
     */
    iconPosition: import_prop_types141.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * The label element.
     */
    label: import_prop_types141.default.node,
    /**
     * @ignore
     */
    onChange: import_prop_types141.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types141.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types141.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types141.default.oneOfType([import_prop_types141.default.arrayOf(import_prop_types141.default.oneOfType([import_prop_types141.default.func, import_prop_types141.default.object, import_prop_types141.default.bool])), import_prop_types141.default.func, import_prop_types141.default.object]),
    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: import_prop_types141.default.any,
    /**
     * Tab labels appear in a single row.
     * They can use a second line if needed.
     * @default false
     */
    wrapped: import_prop_types141.default.bool
  } : void 0;
  var Tab_default = Tab;

  // node_modules/@mui/material/Table/Table.js
  init_extends();
  var React192 = __toESM(require_react());
  var import_prop_types142 = __toESM(require_prop_types());
  var import_composeClasses103 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Table/TableContext.js
  var React191 = __toESM(require_react());
  var TableContext = /* @__PURE__ */ React191.createContext();
  if (true) {
    TableContext.displayName = "TableContext";
  }
  var TableContext_default = TableContext;

  // node_modules/@mui/material/Table/tableClasses.js
  var import_generateUtilityClasses104 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass108 = __toESM(require_generateUtilityClass2());
  function getTableUtilityClass(slot) {
    return (0, import_generateUtilityClass108.default)("MuiTable", slot);
  }
  var tableClasses = (0, import_generateUtilityClasses104.default)("MuiTable", ["root", "stickyHeader"]);
  var tableClasses_default = tableClasses;

  // node_modules/@mui/material/Table/Table.js
  var import_jsx_runtime206 = __toESM(require_jsx_runtime());
  var _excluded143 = ["className", "component", "padding", "size", "stickyHeader"];
  var useUtilityClasses102 = (ownerState) => {
    const {
      classes: classes2,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", stickyHeader && "stickyHeader"]
    };
    return (0, import_composeClasses103.default)(slots, getTableUtilityClass, classes2);
  };
  var TableRoot = styled_default2("table", {
    name: "MuiTable",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.stickyHeader && styles8.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "table",
    width: "100%",
    borderCollapse: "collapse",
    borderSpacing: 0,
    "& caption": _extends({}, theme.typography.body2, {
      padding: theme.spacing(2),
      color: (theme.vars || theme).palette.text.secondary,
      textAlign: "left",
      captionSide: "bottom"
    })
  }, ownerState.stickyHeader && {
    borderCollapse: "separate"
  }));
  var defaultComponent = "table";
  var Table = /* @__PURE__ */ React192.forwardRef(function Table2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTable"
    });
    const {
      className,
      component = defaultComponent,
      padding: padding2 = "normal",
      size = "medium",
      stickyHeader = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded143);
    const ownerState = _extends({}, props, {
      component,
      padding: padding2,
      size,
      stickyHeader
    });
    const classes2 = useUtilityClasses102(ownerState);
    const table = React192.useMemo(() => ({
      padding: padding2,
      size,
      stickyHeader
    }), [padding2, size, stickyHeader]);
    return /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableContext_default.Provider, {
      value: table,
      children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(TableRoot, _extends({
        as: component,
        role: component === defaultComponent ? null : "table",
        ref,
        className: clsx_default(classes2.root, className),
        ownerState
      }, other))
    });
  });
  true ? Table.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the table, normally `TableHead` and `TableBody`.
     */
    children: import_prop_types142.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types142.default.object,
    /**
     * @ignore
     */
    className: import_prop_types142.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types142.default.elementType,
    /**
     * Allows TableCells to inherit padding of the Table.
     * @default 'normal'
     */
    padding: import_prop_types142.default.oneOf(["checkbox", "none", "normal"]),
    /**
     * Allows TableCells to inherit size of the Table.
     * @default 'medium'
     */
    size: import_prop_types142.default.oneOfType([import_prop_types142.default.oneOf(["medium", "small"]), import_prop_types142.default.string]),
    /**
     * Set the header sticky.
     *
     * ⚠️ It doesn't work with IE11.
     * @default false
     */
    stickyHeader: import_prop_types142.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types142.default.oneOfType([import_prop_types142.default.arrayOf(import_prop_types142.default.oneOfType([import_prop_types142.default.func, import_prop_types142.default.object, import_prop_types142.default.bool])), import_prop_types142.default.func, import_prop_types142.default.object])
  } : void 0;
  var Table_default = Table;

  // node_modules/@mui/material/TableBody/TableBody.js
  init_extends();
  var React194 = __toESM(require_react());
  var import_prop_types143 = __toESM(require_prop_types());
  var import_composeClasses104 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Table/Tablelvl2Context.js
  var React193 = __toESM(require_react());
  var Tablelvl2Context = /* @__PURE__ */ React193.createContext();
  if (true) {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  var Tablelvl2Context_default = Tablelvl2Context;

  // node_modules/@mui/material/TableBody/tableBodyClasses.js
  var import_generateUtilityClasses105 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass109 = __toESM(require_generateUtilityClass2());
  function getTableBodyUtilityClass(slot) {
    return (0, import_generateUtilityClass109.default)("MuiTableBody", slot);
  }
  var tableBodyClasses = (0, import_generateUtilityClasses105.default)("MuiTableBody", ["root"]);
  var tableBodyClasses_default = tableBodyClasses;

  // node_modules/@mui/material/TableBody/TableBody.js
  var import_jsx_runtime207 = __toESM(require_jsx_runtime());
  var _excluded144 = ["className", "component"];
  var useUtilityClasses103 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses104.default)(slots, getTableBodyUtilityClass, classes2);
  };
  var TableBodyRoot = styled_default2("tbody", {
    name: "MuiTableBody",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    display: "table-row-group"
  });
  var tablelvl2 = {
    variant: "body"
  };
  var defaultComponent2 = "tbody";
  var TableBody = /* @__PURE__ */ React194.forwardRef(function TableBody2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableBody"
    });
    const {
      className,
      component = defaultComponent2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded144);
    const ownerState = _extends({}, props, {
      component
    });
    const classes2 = useUtilityClasses103(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(Tablelvl2Context_default.Provider, {
      value: tablelvl2,
      children: /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(TableBodyRoot, _extends({
        className: clsx_default(classes2.root, className),
        as: component,
        ref,
        role: component === defaultComponent2 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  true ? TableBody.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `TableRow`.
     */
    children: import_prop_types143.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types143.default.object,
    /**
     * @ignore
     */
    className: import_prop_types143.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types143.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types143.default.oneOfType([import_prop_types143.default.arrayOf(import_prop_types143.default.oneOfType([import_prop_types143.default.func, import_prop_types143.default.object, import_prop_types143.default.bool])), import_prop_types143.default.func, import_prop_types143.default.object])
  } : void 0;
  var TableBody_default = TableBody;

  // node_modules/@mui/material/TableCell/TableCell.js
  init_extends();
  var React195 = __toESM(require_react());
  var import_prop_types144 = __toESM(require_prop_types());
  var import_composeClasses105 = __toESM(require_composeClasses2());
  var import_colorManipulator25 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/TableCell/tableCellClasses.js
  var import_generateUtilityClasses106 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass110 = __toESM(require_generateUtilityClass2());
  function getTableCellUtilityClass(slot) {
    return (0, import_generateUtilityClass110.default)("MuiTableCell", slot);
  }
  var tableCellClasses = (0, import_generateUtilityClasses106.default)("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  var tableCellClasses_default = tableCellClasses;

  // node_modules/@mui/material/TableCell/TableCell.js
  var import_jsx_runtime208 = __toESM(require_jsx_runtime());
  var _excluded145 = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
  var useUtilityClasses104 = (ownerState) => {
    const {
      classes: classes2,
      variant,
      align,
      padding: padding2,
      size,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize_default(align)}`, padding2 !== "normal" && `padding${capitalize_default(padding2)}`, `size${capitalize_default(size)}`]
    };
    return (0, import_composeClasses105.default)(slots, getTableCellUtilityClass, classes2);
  };
  var TableCellRoot = styled_default2("td", {
    name: "MuiTableCell",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[ownerState.variant], styles8[`size${capitalize_default(ownerState.size)}`], ownerState.padding !== "normal" && styles8[`padding${capitalize_default(ownerState.padding)}`], ownerState.align !== "inherit" && styles8[`align${capitalize_default(ownerState.align)}`], ownerState.stickyHeader && styles8.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    display: "table-cell",
    verticalAlign: "inherit",
    // Workaround for a rendering bug with spanned columns in Chrome 62.0.
    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
    borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === "light" ? (0, import_colorManipulator25.lighten)((0, import_colorManipulator25.alpha)(theme.palette.divider, 1), 0.88) : (0, import_colorManipulator25.darken)((0, import_colorManipulator25.alpha)(theme.palette.divider, 1), 0.68)}`,
    textAlign: "left",
    padding: 16
  }, ownerState.variant === "head" && {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === "body" && {
    color: (theme.vars || theme).palette.text.primary
  }, ownerState.variant === "footer" && {
    color: (theme.vars || theme).palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === "small" && {
    padding: "6px 16px",
    [`&.${tableCellClasses_default.paddingCheckbox}`]: {
      width: 24,
      // prevent the checkbox column from growing
      padding: "0 12px 0 16px",
      "& > *": {
        padding: 0
      }
    }
  }, ownerState.padding === "checkbox" && {
    width: 48,
    // prevent the checkbox column from growing
    padding: "0 0 0 4px"
  }, ownerState.padding === "none" && {
    padding: 0
  }, ownerState.align === "left" && {
    textAlign: "left"
  }, ownerState.align === "center" && {
    textAlign: "center"
  }, ownerState.align === "right" && {
    textAlign: "right",
    flexDirection: "row-reverse"
  }, ownerState.align === "justify" && {
    textAlign: "justify"
  }, ownerState.stickyHeader && {
    position: "sticky",
    top: 0,
    zIndex: 2,
    backgroundColor: (theme.vars || theme).palette.background.default
  }));
  var TableCell = /* @__PURE__ */ React195.forwardRef(function TableCell2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableCell"
    });
    const {
      align = "inherit",
      className,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded145);
    const table = React195.useContext(TableContext_default);
    const tablelvl24 = React195.useContext(Tablelvl2Context_default);
    const isHeadCell = tablelvl24 && tablelvl24.variant === "head";
    let component;
    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? "th" : "td";
    }
    let scope = scopeProp;
    if (component === "td") {
      scope = void 0;
    } else if (!scope && isHeadCell) {
      scope = "col";
    }
    const variant = variantProp || tablelvl24 && tablelvl24.variant;
    const ownerState = _extends({}, props, {
      align,
      component,
      padding: paddingProp || (table && table.padding ? table.padding : "normal"),
      size: sizeProp || (table && table.size ? table.size : "medium"),
      sortDirection,
      stickyHeader: variant === "head" && table && table.stickyHeader,
      variant
    });
    const classes2 = useUtilityClasses104(ownerState);
    let ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(TableCellRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes2.root, className),
      "aria-sort": ariaSort,
      scope,
      ownerState
    }, other));
  });
  true ? TableCell.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the text-align on the table cell content.
     *
     * Monetary or generally number fields **should be right aligned** as that allows
     * you to add them up quickly in your head without having to worry about decimals.
     * @default 'inherit'
     */
    align: import_prop_types144.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types144.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types144.default.object,
    /**
     * @ignore
     */
    className: import_prop_types144.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types144.default.elementType,
    /**
     * Sets the padding applied to the cell.
     * The prop defaults to the value (`'default'`) inherited from the parent Table component.
     */
    padding: import_prop_types144.default.oneOf(["checkbox", "none", "normal"]),
    /**
     * Set scope attribute.
     */
    scope: import_prop_types144.default.string,
    /**
     * Specify the size of the cell.
     * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
     */
    size: import_prop_types144.default.oneOfType([import_prop_types144.default.oneOf(["medium", "small"]), import_prop_types144.default.string]),
    /**
     * Set aria-sort direction.
     */
    sortDirection: import_prop_types144.default.oneOf(["asc", "desc", false]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types144.default.oneOfType([import_prop_types144.default.arrayOf(import_prop_types144.default.oneOfType([import_prop_types144.default.func, import_prop_types144.default.object, import_prop_types144.default.bool])), import_prop_types144.default.func, import_prop_types144.default.object]),
    /**
     * Specify the cell type.
     * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
     */
    variant: import_prop_types144.default.oneOfType([import_prop_types144.default.oneOf(["body", "footer", "head"]), import_prop_types144.default.string])
  } : void 0;
  var TableCell_default = TableCell;

  // node_modules/@mui/material/TableContainer/TableContainer.js
  init_extends();
  var React196 = __toESM(require_react());
  var import_prop_types145 = __toESM(require_prop_types());
  var import_composeClasses106 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/TableContainer/tableContainerClasses.js
  var import_generateUtilityClasses107 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass111 = __toESM(require_generateUtilityClass2());
  function getTableContainerUtilityClass(slot) {
    return (0, import_generateUtilityClass111.default)("MuiTableContainer", slot);
  }
  var tableContainerClasses = (0, import_generateUtilityClasses107.default)("MuiTableContainer", ["root"]);
  var tableContainerClasses_default = tableContainerClasses;

  // node_modules/@mui/material/TableContainer/TableContainer.js
  var import_jsx_runtime209 = __toESM(require_jsx_runtime());
  var _excluded146 = ["className", "component"];
  var useUtilityClasses105 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses106.default)(slots, getTableContainerUtilityClass, classes2);
  };
  var TableContainerRoot = styled_default2("div", {
    name: "MuiTableContainer",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    width: "100%",
    overflowX: "auto"
  });
  var TableContainer = /* @__PURE__ */ React196.forwardRef(function TableContainer2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableContainer"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded146);
    const ownerState = _extends({}, props, {
      component
    });
    const classes2 = useUtilityClasses105(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(TableContainerRoot, _extends({
      ref,
      as: component,
      className: clsx_default(classes2.root, className),
      ownerState
    }, other));
  });
  true ? TableContainer.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `Table`.
     */
    children: import_prop_types145.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types145.default.object,
    /**
     * @ignore
     */
    className: import_prop_types145.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types145.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types145.default.oneOfType([import_prop_types145.default.arrayOf(import_prop_types145.default.oneOfType([import_prop_types145.default.func, import_prop_types145.default.object, import_prop_types145.default.bool])), import_prop_types145.default.func, import_prop_types145.default.object])
  } : void 0;
  var TableContainer_default = TableContainer;

  // node_modules/@mui/material/TableFooter/TableFooter.js
  init_extends();
  var React197 = __toESM(require_react());
  var import_prop_types146 = __toESM(require_prop_types());
  var import_composeClasses107 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/TableFooter/tableFooterClasses.js
  var import_generateUtilityClasses108 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass112 = __toESM(require_generateUtilityClass2());
  function getTableFooterUtilityClass(slot) {
    return (0, import_generateUtilityClass112.default)("MuiTableFooter", slot);
  }
  var tableFooterClasses = (0, import_generateUtilityClasses108.default)("MuiTableFooter", ["root"]);
  var tableFooterClasses_default = tableFooterClasses;

  // node_modules/@mui/material/TableFooter/TableFooter.js
  var import_jsx_runtime210 = __toESM(require_jsx_runtime());
  var _excluded147 = ["className", "component"];
  var useUtilityClasses106 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses107.default)(slots, getTableFooterUtilityClass, classes2);
  };
  var TableFooterRoot = styled_default2("tfoot", {
    name: "MuiTableFooter",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    display: "table-footer-group"
  });
  var tablelvl22 = {
    variant: "footer"
  };
  var defaultComponent3 = "tfoot";
  var TableFooter = /* @__PURE__ */ React197.forwardRef(function TableFooter2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableFooter"
    });
    const {
      className,
      component = defaultComponent3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded147);
    const ownerState = _extends({}, props, {
      component
    });
    const classes2 = useUtilityClasses106(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime210.jsx)(Tablelvl2Context_default.Provider, {
      value: tablelvl22,
      children: /* @__PURE__ */ (0, import_jsx_runtime210.jsx)(TableFooterRoot, _extends({
        as: component,
        className: clsx_default(classes2.root, className),
        ref,
        role: component === defaultComponent3 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  true ? TableFooter.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `TableRow`.
     */
    children: import_prop_types146.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types146.default.object,
    /**
     * @ignore
     */
    className: import_prop_types146.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types146.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types146.default.oneOfType([import_prop_types146.default.arrayOf(import_prop_types146.default.oneOfType([import_prop_types146.default.func, import_prop_types146.default.object, import_prop_types146.default.bool])), import_prop_types146.default.func, import_prop_types146.default.object])
  } : void 0;
  var TableFooter_default = TableFooter;

  // node_modules/@mui/material/TableHead/TableHead.js
  init_extends();
  var React198 = __toESM(require_react());
  var import_prop_types147 = __toESM(require_prop_types());
  var import_composeClasses108 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/TableHead/tableHeadClasses.js
  var import_generateUtilityClasses109 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass113 = __toESM(require_generateUtilityClass2());
  function getTableHeadUtilityClass(slot) {
    return (0, import_generateUtilityClass113.default)("MuiTableHead", slot);
  }
  var tableHeadClasses = (0, import_generateUtilityClasses109.default)("MuiTableHead", ["root"]);
  var tableHeadClasses_default = tableHeadClasses;

  // node_modules/@mui/material/TableHead/TableHead.js
  var import_jsx_runtime211 = __toESM(require_jsx_runtime());
  var _excluded148 = ["className", "component"];
  var useUtilityClasses107 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses108.default)(slots, getTableHeadUtilityClass, classes2);
  };
  var TableHeadRoot = styled_default2("thead", {
    name: "MuiTableHead",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({
    display: "table-header-group"
  });
  var tablelvl23 = {
    variant: "head"
  };
  var defaultComponent4 = "thead";
  var TableHead = /* @__PURE__ */ React198.forwardRef(function TableHead2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableHead"
    });
    const {
      className,
      component = defaultComponent4
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded148);
    const ownerState = _extends({}, props, {
      component
    });
    const classes2 = useUtilityClasses107(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(Tablelvl2Context_default.Provider, {
      value: tablelvl23,
      children: /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(TableHeadRoot, _extends({
        as: component,
        className: clsx_default(classes2.root, className),
        ref,
        role: component === defaultComponent4 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  true ? TableHead.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `TableRow`.
     */
    children: import_prop_types147.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types147.default.object,
    /**
     * @ignore
     */
    className: import_prop_types147.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types147.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types147.default.oneOfType([import_prop_types147.default.arrayOf(import_prop_types147.default.oneOfType([import_prop_types147.default.func, import_prop_types147.default.object, import_prop_types147.default.bool])), import_prop_types147.default.func, import_prop_types147.default.object])
  } : void 0;
  var TableHead_default = TableHead;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  init_extends();
  var React203 = __toESM(require_react());
  var import_prop_types150 = __toESM(require_prop_types());
  var import_integerPropType12 = __toESM(require_integerPropType2());
  var import_chainPropTypes14 = __toESM(require_chainPropTypes2());
  var import_composeClasses110 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Toolbar/Toolbar.js
  init_extends();
  var React199 = __toESM(require_react());
  var import_prop_types148 = __toESM(require_prop_types());
  var import_composeClasses109 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/Toolbar/toolbarClasses.js
  var import_generateUtilityClasses110 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass114 = __toESM(require_generateUtilityClass2());
  function getToolbarUtilityClass(slot) {
    return (0, import_generateUtilityClass114.default)("MuiToolbar", slot);
  }
  var toolbarClasses = (0, import_generateUtilityClasses110.default)("MuiToolbar", ["root", "gutters", "regular", "dense"]);
  var toolbarClasses_default = toolbarClasses;

  // node_modules/@mui/material/Toolbar/Toolbar.js
  var import_jsx_runtime212 = __toESM(require_jsx_runtime());
  var _excluded149 = ["className", "component", "disableGutters", "variant"];
  var useUtilityClasses108 = (ownerState) => {
    const {
      classes: classes2,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return (0, import_composeClasses109.default)(slots, getToolbarUtilityClass, classes2);
  };
  var ToolbarRoot = styled_default2("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, !ownerState.disableGutters && styles8.gutters, styles8[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  var Toolbar = /* @__PURE__ */ React199.forwardRef(function Toolbar2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded149);
    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes2 = useUtilityClasses108(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(ToolbarRoot, _extends({
      as: component,
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? Toolbar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
     */
    children: import_prop_types148.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types148.default.object,
    /**
     * @ignore
     */
    className: import_prop_types148.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types148.default.elementType,
    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: import_prop_types148.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types148.default.oneOfType([import_prop_types148.default.arrayOf(import_prop_types148.default.oneOfType([import_prop_types148.default.func, import_prop_types148.default.object, import_prop_types148.default.bool])), import_prop_types148.default.func, import_prop_types148.default.object]),
    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: import_prop_types148.default.oneOfType([import_prop_types148.default.oneOf(["dense", "regular"]), import_prop_types148.default.string])
  } : void 0;
  var Toolbar_default = Toolbar;

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  init_extends();
  var React202 = __toESM(require_react());
  var import_prop_types149 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
  var React200 = __toESM(require_react());
  var import_jsx_runtime213 = __toESM(require_jsx_runtime());
  var KeyboardArrowLeft_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime213.jsx)("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
  var React201 = __toESM(require_react());
  var import_jsx_runtime214 = __toESM(require_jsx_runtime());
  var KeyboardArrowRight_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime214.jsx)("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  var import_jsx_runtime215 = __toESM(require_jsx_runtime());
  var import_jsx_runtime216 = __toESM(require_jsx_runtime());
  var _excluded150 = ["backIconButtonProps", "count", "disabled", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "slots", "slotProps"];
  var TablePaginationActions = /* @__PURE__ */ React202.forwardRef(function TablePaginationActions2(props, ref) {
    var _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$previousButton, _slots$firstButtonIco, _slots$lastButtonIcon, _slots$nextButtonIcon, _slots$previousButton2;
    const {
      backIconButtonProps,
      count,
      disabled = false,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton,
      slots = {},
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded150);
    const isRtl = useRtl();
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : IconButton_default;
    const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : IconButton_default;
    const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : IconButton_default;
    const PreviousButton = (_slots$previousButton = slots.previousButton) != null ? _slots$previousButton : IconButton_default;
    const FirstButtonIcon = (_slots$firstButtonIco = slots.firstButtonIcon) != null ? _slots$firstButtonIco : FirstPage_default;
    const LastButtonIcon = (_slots$lastButtonIcon = slots.lastButtonIcon) != null ? _slots$lastButtonIcon : LastPage_default;
    const NextButtonIcon = (_slots$nextButtonIcon = slots.nextButtonIcon) != null ? _slots$nextButtonIcon : KeyboardArrowRight_default;
    const PreviousButtonIcon = (_slots$previousButton2 = slots.previousButtonIcon) != null ? _slots$previousButton2 : KeyboardArrowLeft_default;
    const FirstButtonSlot = isRtl ? LastButton : FirstButton;
    const PreviousButtonSlot = isRtl ? NextButton : PreviousButton;
    const NextButtonSlot = isRtl ? PreviousButton : NextButton;
    const LastButtonSlot = isRtl ? FirstButton : LastButton;
    const firstButtonSlotProps = isRtl ? slotProps.lastButton : slotProps.firstButton;
    const previousButtonSlotProps = isRtl ? slotProps.nextButton : slotProps.previousButton;
    const nextButtonSlotProps = isRtl ? slotProps.previousButton : slotProps.nextButton;
    const lastButtonSlotProps = isRtl ? slotProps.firstButton : slotProps.lastButton;
    return /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)("div", _extends({
      ref
    }, other, {
      children: [showFirstButton && /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(FirstButtonSlot, _extends({
        onClick: handleFirstPageButtonClick,
        disabled: disabled || page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page)
      }, firstButtonSlotProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(LastButtonIcon, _extends({}, slotProps.lastButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(FirstButtonIcon, _extends({}, slotProps.firstButtonIcon))
      })), /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(PreviousButtonSlot, _extends({
        onClick: handleBackButtonClick,
        disabled: disabled || page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      }, previousButtonSlotProps != null ? previousButtonSlotProps : backIconButtonProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(NextButtonIcon, _extends({}, slotProps.nextButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(PreviousButtonIcon, _extends({}, slotProps.previousButtonIcon))
      })), /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(NextButtonSlot, _extends({
        onClick: handleNextButtonClick,
        disabled: disabled || (count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false),
        color: "inherit",
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      }, nextButtonSlotProps != null ? nextButtonSlotProps : nextIconButtonProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(PreviousButtonIcon, _extends({}, slotProps.previousButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(NextButtonIcon, _extends({}, slotProps.nextButtonIcon))
      })), showLastButton && /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(LastButtonSlot, _extends({
        onClick: handleLastPageButtonClick,
        disabled: disabled || page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page)
      }, lastButtonSlotProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(FirstButtonIcon, _extends({}, slotProps.firstButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(LastButtonIcon, _extends({}, slotProps.lastButtonIcon))
      }))]
    }));
  });
  true ? TablePaginationActions.propTypes = {
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    backIconButtonProps: import_prop_types149.default.object,
    /**
     * The total number of rows.
     */
    count: import_prop_types149.default.number.isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types149.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     *
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @returns {string}
     */
    getItemAriaLabel: import_prop_types149.default.func.isRequired,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    nextIconButtonProps: import_prop_types149.default.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {object} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types149.default.func.isRequired,
    /**
     * The zero-based index of the current page.
     */
    page: import_prop_types149.default.number.isRequired,
    /**
     * The number of rows per page.
     */
    rowsPerPage: import_prop_types149.default.number.isRequired,
    /**
     * If `true`, show the first-page button.
     */
    showFirstButton: import_prop_types149.default.bool.isRequired,
    /**
     * If `true`, show the last-page button.
     */
    showLastButton: import_prop_types149.default.bool.isRequired,
    /**
     * The props used for each slot inside the TablePaginationActions.
     * @default {}
     */
    slotProps: import_prop_types149.default.shape({
      firstButton: import_prop_types149.default.object,
      firstButtonIcon: import_prop_types149.default.object,
      lastButton: import_prop_types149.default.object,
      lastButtonIcon: import_prop_types149.default.object,
      nextButton: import_prop_types149.default.object,
      nextButtonIcon: import_prop_types149.default.object,
      previousButton: import_prop_types149.default.object,
      previousButtonIcon: import_prop_types149.default.object
    }),
    /**
     * The components used for each slot inside the TablePaginationActions.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types149.default.shape({
      firstButton: import_prop_types149.default.elementType,
      firstButtonIcon: import_prop_types149.default.elementType,
      lastButton: import_prop_types149.default.elementType,
      lastButtonIcon: import_prop_types149.default.elementType,
      nextButton: import_prop_types149.default.elementType,
      nextButtonIcon: import_prop_types149.default.elementType,
      previousButton: import_prop_types149.default.elementType,
      previousButtonIcon: import_prop_types149.default.elementType
    })
  } : void 0;
  var TablePaginationActions_default = TablePaginationActions;

  // node_modules/@mui/material/TablePagination/tablePaginationClasses.js
  var import_generateUtilityClasses111 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass115 = __toESM(require_generateUtilityClass2());
  function getTablePaginationUtilityClass(slot) {
    return (0, import_generateUtilityClass115.default)("MuiTablePagination", slot);
  }
  var tablePaginationClasses = (0, import_generateUtilityClasses111.default)("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  var tablePaginationClasses_default = tablePaginationClasses;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  var import_jsx_runtime217 = __toESM(require_jsx_runtime());
  var import_react8 = __toESM(require_react());
  var import_jsx_runtime218 = __toESM(require_jsx_runtime());
  var _InputBase;
  var _excluded151 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "disabled", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton", "slotProps", "slots"];
  var TablePaginationRoot = styled_default2(TableCell_default, {
    name: "MuiTablePagination",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })(({
    theme
  }) => ({
    overflow: "auto",
    color: (theme.vars || theme).palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    // Increase the specificity to override TableCell.
    "&:last-child": {
      padding: 0
    }
  }));
  var TablePaginationToolbar = styled_default2(Toolbar_default, {
    name: "MuiTablePagination",
    slot: "Toolbar",
    overridesResolver: (props, styles8) => _extends({
      [`& .${tablePaginationClasses_default.actions}`]: styles8.actions
    }, styles8.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up("sm")]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses_default.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  var TablePaginationSpacer = styled_default2("div", {
    name: "MuiTablePagination",
    slot: "Spacer",
    overridesResolver: (props, styles8) => styles8.spacer
  })({
    flex: "1 1 100%"
  });
  var TablePaginationSelectLabel = styled_default2("p", {
    name: "MuiTablePagination",
    slot: "SelectLabel",
    overridesResolver: (props, styles8) => styles8.selectLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  var TablePaginationSelect = styled_default2(Select_default, {
    name: "MuiTablePagination",
    slot: "Select",
    overridesResolver: (props, styles8) => _extends({
      [`& .${tablePaginationClasses_default.selectIcon}`]: styles8.selectIcon,
      [`& .${tablePaginationClasses_default.select}`]: styles8.select
    }, styles8.input, styles8.selectRoot)
  })({
    color: "inherit",
    fontSize: "inherit",
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses_default.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: "right",
      textAlignLast: "right"
      // Align <select> on Chrome.
    }
  });
  var TablePaginationMenuItem = styled_default2(MenuItem_default, {
    name: "MuiTablePagination",
    slot: "MenuItem",
    overridesResolver: (props, styles8) => styles8.menuItem
  })({});
  var TablePaginationDisplayedRows = styled_default2("p", {
    name: "MuiTablePagination",
    slot: "DisplayedRows",
    overridesResolver: (props, styles8) => styles8.displayedRows
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  function defaultLabelDisplayedRows({
    from: from2,
    to,
    count
  }) {
    return `${from2}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel2(type) {
    return `Go to ${type} page`;
  }
  var useUtilityClasses109 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return (0, import_composeClasses110.default)(slots, getTablePaginationUtilityClass, classes2);
  };
  var TablePagination = /* @__PURE__ */ React203.forwardRef(function TablePagination2(inProps, ref) {
    var _slotProps$select;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTablePagination"
    });
    const {
      ActionsComponent = TablePaginationActions_default,
      backIconButtonProps,
      className,
      colSpan: colSpanProp,
      component = TableCell_default,
      count,
      disabled = false,
      getItemAriaLabel = defaultGetAriaLabel2,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelRowsPerPage = "Rows per page:",
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded151);
    const ownerState = props;
    const classes2 = useUtilityClasses109(ownerState);
    const selectProps = (_slotProps$select = slotProps == null ? void 0 : slotProps.select) != null ? _slotProps$select : SelectProps;
    const MenuItemComponent = selectProps.native ? "option" : TablePaginationMenuItem;
    let colSpan;
    if (component === TableCell_default || component === "td") {
      colSpan = colSpanProp || 1e3;
    }
    const selectId = useId_default(selectProps.id);
    const labelId = useId_default(selectProps.labelId);
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(TablePaginationRoot, _extends({
      colSpan,
      ref,
      as: component,
      ownerState,
      className: clsx_default(classes2.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(TablePaginationToolbar, {
        className: classes2.toolbar,
        children: [/* @__PURE__ */ (0, import_jsx_runtime217.jsx)(TablePaginationSpacer, {
          className: classes2.spacer
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(TablePaginationSelectLabel, {
          className: classes2.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(TablePaginationSelect, _extends({
          variant: "standard"
        }, !selectProps.variant && {
          input: _InputBase || (_InputBase = /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(InputBase_default, {}))
        }, {
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId
        }, selectProps, {
          classes: _extends({}, selectProps.classes, {
            // TODO v5 remove `classes.input`
            root: clsx_default(classes2.input, classes2.selectRoot, (selectProps.classes || {}).root),
            select: clsx_default(classes2.select, (selectProps.classes || {}).select),
            // TODO v5 remove `selectIcon`
            icon: clsx_default(classes2.selectIcon, (selectProps.classes || {}).icon)
          }),
          disabled,
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, import_react8.createElement)(MenuItemComponent, _extends({}, !isHostComponent(MenuItemComponent) && {
            ownerState
          }, {
            className: classes2.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(TablePaginationDisplayedRows, {
          className: classes2.displayedRows,
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(ActionsComponent, {
          className: classes2.actions,
          backIconButtonProps,
          count,
          nextIconButtonProps,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton,
          showLastButton,
          slotProps: slotProps.actions,
          slots: slots.actions,
          getItemAriaLabel,
          disabled
        })]
      })
    }));
  });
  true ? TablePagination.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The component used for displaying the actions.
     * Either a string to use a HTML element or a component.
     * @default TablePaginationActions
     */
    ActionsComponent: import_prop_types150.default.elementType,
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.
     *
     * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.actions.previousButton` instead.
     */
    backIconButtonProps: import_prop_types150.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types150.default.object,
    /**
     * @ignore
     */
    className: import_prop_types150.default.string,
    /**
     * @ignore
     */
    colSpan: import_prop_types150.default.number,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types150.default.elementType,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: import_integerPropType12.default.isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types150.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: import_prop_types150.default.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: import_prop_types150.default.func,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: import_prop_types150.default.node,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     *
     * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.actions.nextButton` instead.
     */
    nextIconButtonProps: import_prop_types150.default.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types150.default.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: import_prop_types150.default.func,
    /**
     * The zero-based index of the current page.
     */
    page: (0, import_chainPropTypes14.default)(import_integerPropType12.default.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: import_integerPropType12.default.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: import_prop_types150.default.arrayOf(import_prop_types150.default.oneOfType([import_prop_types150.default.number, import_prop_types150.default.shape({
      label: import_prop_types150.default.string.isRequired,
      value: import_prop_types150.default.number.isRequired
    })]).isRequired),
    /**
     * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.
     *
     * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.select` instead.
     *
     * @default {}
     */
    SelectProps: import_prop_types150.default.object,
    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: import_prop_types150.default.bool,
    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: import_prop_types150.default.bool,
    /**
     * The props used for each slot inside the TablePagination.
     * @default {}
     */
    slotProps: import_prop_types150.default.shape({
      actions: import_prop_types150.default.shape({
        firstButton: import_prop_types150.default.object,
        firstButtonIcon: import_prop_types150.default.object,
        lastButton: import_prop_types150.default.object,
        lastButtonIcon: import_prop_types150.default.object,
        nextButton: import_prop_types150.default.object,
        nextButtonIcon: import_prop_types150.default.object,
        previousButton: import_prop_types150.default.object,
        previousButtonIcon: import_prop_types150.default.object
      }),
      select: import_prop_types150.default.object
    }),
    /**
     * The components used for each slot inside the TablePagination.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types150.default.shape({
      actions: import_prop_types150.default.shape({
        firstButton: import_prop_types150.default.elementType,
        firstButtonIcon: import_prop_types150.default.elementType,
        lastButton: import_prop_types150.default.elementType,
        lastButtonIcon: import_prop_types150.default.elementType,
        nextButton: import_prop_types150.default.elementType,
        nextButtonIcon: import_prop_types150.default.elementType,
        previousButton: import_prop_types150.default.elementType,
        previousButtonIcon: import_prop_types150.default.elementType
      })
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types150.default.oneOfType([import_prop_types150.default.arrayOf(import_prop_types150.default.oneOfType([import_prop_types150.default.func, import_prop_types150.default.object, import_prop_types150.default.bool])), import_prop_types150.default.func, import_prop_types150.default.object])
  } : void 0;
  var TablePagination_default = TablePagination;

  // node_modules/@mui/material/TableRow/TableRow.js
  init_extends();
  var React204 = __toESM(require_react());
  var import_prop_types151 = __toESM(require_prop_types());
  var import_composeClasses111 = __toESM(require_composeClasses2());
  var import_colorManipulator26 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/TableRow/tableRowClasses.js
  var import_generateUtilityClasses112 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass116 = __toESM(require_generateUtilityClass2());
  function getTableRowUtilityClass(slot) {
    return (0, import_generateUtilityClass116.default)("MuiTableRow", slot);
  }
  var tableRowClasses = (0, import_generateUtilityClasses112.default)("MuiTableRow", ["root", "selected", "hover", "head", "footer"]);
  var tableRowClasses_default = tableRowClasses;

  // node_modules/@mui/material/TableRow/TableRow.js
  var import_jsx_runtime219 = __toESM(require_jsx_runtime());
  var _excluded152 = ["className", "component", "hover", "selected"];
  var useUtilityClasses110 = (ownerState) => {
    const {
      classes: classes2,
      selected,
      hover,
      head,
      footer
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", hover && "hover", head && "head", footer && "footer"]
    };
    return (0, import_composeClasses111.default)(slots, getTableRowUtilityClass, classes2);
  };
  var TableRowRoot = styled_default2("tr", {
    name: "MuiTableRow",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.head && styles8.head, ownerState.footer && styles8.footer];
    }
  })(({
    theme
  }) => ({
    color: "inherit",
    display: "table-row",
    verticalAlign: "middle",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    [`&.${tableRowClasses_default.hover}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${tableRowClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator26.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator26.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      }
    }
  }));
  var defaultComponent5 = "tr";
  var TableRow = /* @__PURE__ */ React204.forwardRef(function TableRow2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableRow"
    });
    const {
      className,
      component = defaultComponent5,
      hover = false,
      selected = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded152);
    const tablelvl24 = React204.useContext(Tablelvl2Context_default);
    const ownerState = _extends({}, props, {
      component,
      hover,
      selected,
      head: tablelvl24 && tablelvl24.variant === "head",
      footer: tablelvl24 && tablelvl24.variant === "footer"
    });
    const classes2 = useUtilityClasses110(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(TableRowRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes2.root, className),
      role: component === defaultComponent5 ? null : "row",
      ownerState
    }, other));
  });
  true ? TableRow.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Should be valid `<tr>` children such as `TableCell`.
     */
    children: import_prop_types151.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types151.default.object,
    /**
     * @ignore
     */
    className: import_prop_types151.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types151.default.elementType,
    /**
     * If `true`, the table row will shade on hover.
     * @default false
     */
    hover: import_prop_types151.default.bool,
    /**
     * If `true`, the table row will have the selected shading.
     * @default false
     */
    selected: import_prop_types151.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types151.default.oneOfType([import_prop_types151.default.arrayOf(import_prop_types151.default.oneOfType([import_prop_types151.default.func, import_prop_types151.default.object, import_prop_types151.default.bool])), import_prop_types151.default.func, import_prop_types151.default.object])
  } : void 0;
  var TableRow_default = TableRow;

  // node_modules/@mui/material/TableSortLabel/TableSortLabel.js
  init_extends();
  var import_composeClasses112 = __toESM(require_composeClasses2());
  var import_prop_types152 = __toESM(require_prop_types());
  var React206 = __toESM(require_react());

  // node_modules/@mui/material/internal/svg-icons/ArrowDownward.js
  var React205 = __toESM(require_react());
  var import_jsx_runtime220 = __toESM(require_jsx_runtime());
  var ArrowDownward_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime220.jsx)("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");

  // node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js
  var import_generateUtilityClasses113 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass117 = __toESM(require_generateUtilityClass2());
  function getTableSortLabelUtilityClass(slot) {
    return (0, import_generateUtilityClass117.default)("MuiTableSortLabel", slot);
  }
  var tableSortLabelClasses = (0, import_generateUtilityClasses113.default)("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc"]);
  var tableSortLabelClasses_default = tableSortLabelClasses;

  // node_modules/@mui/material/TableSortLabel/TableSortLabel.js
  var import_jsx_runtime221 = __toESM(require_jsx_runtime());
  var import_jsx_runtime222 = __toESM(require_jsx_runtime());
  var _excluded153 = ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"];
  var useUtilityClasses111 = (ownerState) => {
    const {
      classes: classes2,
      direction: direction2,
      active
    } = ownerState;
    const slots = {
      root: ["root", active && "active"],
      icon: ["icon", `iconDirection${capitalize_default(direction2)}`]
    };
    return (0, import_composeClasses112.default)(slots, getTableSortLabelUtilityClass, classes2);
  };
  var TableSortLabelRoot = styled_default2(ButtonBase_default, {
    name: "MuiTableSortLabel",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.active && styles8.active];
    }
  })(({
    theme
  }) => ({
    cursor: "pointer",
    display: "inline-flex",
    justifyContent: "flex-start",
    flexDirection: "inherit",
    alignItems: "center",
    "&:focus": {
      color: (theme.vars || theme).palette.text.secondary
    },
    "&:hover": {
      color: (theme.vars || theme).palette.text.secondary,
      [`& .${tableSortLabelClasses_default.icon}`]: {
        opacity: 0.5
      }
    },
    [`&.${tableSortLabelClasses_default.active}`]: {
      color: (theme.vars || theme).palette.text.primary,
      [`& .${tableSortLabelClasses_default.icon}`]: {
        opacity: 1,
        color: (theme.vars || theme).palette.text.secondary
      }
    }
  }));
  var TableSortLabelIcon = styled_default2("span", {
    name: "MuiTableSortLabel",
    slot: "Icon",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.icon, styles8[`iconDirection${capitalize_default(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    fontSize: 18,
    marginRight: 4,
    marginLeft: 4,
    opacity: 0,
    transition: theme.transitions.create(["opacity", "transform"], {
      duration: theme.transitions.duration.shorter
    }),
    userSelect: "none"
  }, ownerState.direction === "desc" && {
    transform: "rotate(0deg)"
  }, ownerState.direction === "asc" && {
    transform: "rotate(180deg)"
  }));
  var TableSortLabel = /* @__PURE__ */ React206.forwardRef(function TableSortLabel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableSortLabel"
    });
    const {
      active = false,
      children,
      className,
      direction: direction2 = "asc",
      hideSortIcon = false,
      IconComponent = ArrowDownward_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded153);
    const ownerState = _extends({}, props, {
      active,
      direction: direction2,
      hideSortIcon,
      IconComponent
    });
    const classes2 = useUtilityClasses111(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime222.jsxs)(TableSortLabelRoot, _extends({
      className: clsx_default(classes2.root, className),
      component: "span",
      disableRipple: true,
      ownerState,
      ref
    }, other, {
      children: [children, hideSortIcon && !active ? null : /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(TableSortLabelIcon, {
        as: IconComponent,
        className: clsx_default(classes2.icon),
        ownerState
      })]
    }));
  });
  true ? TableSortLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the label will have the active styling (should be true for the sorted column).
     * @default false
     */
    active: import_prop_types152.default.bool,
    /**
     * Label contents, the arrow will be appended automatically.
     */
    children: import_prop_types152.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types152.default.object,
    /**
     * @ignore
     */
    className: import_prop_types152.default.string,
    /**
     * The current sort direction.
     * @default 'asc'
     */
    direction: import_prop_types152.default.oneOf(["asc", "desc"]),
    /**
     * Hide sort icon when active is false.
     * @default false
     */
    hideSortIcon: import_prop_types152.default.bool,
    /**
     * Sort icon to use.
     * @default ArrowDownwardIcon
     */
    IconComponent: import_prop_types152.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types152.default.oneOfType([import_prop_types152.default.arrayOf(import_prop_types152.default.oneOfType([import_prop_types152.default.func, import_prop_types152.default.object, import_prop_types152.default.bool])), import_prop_types152.default.func, import_prop_types152.default.object])
  } : void 0;
  var TableSortLabel_default = TableSortLabel;

  // node_modules/@mui/material/Tabs/Tabs.js
  init_extends();
  var React209 = __toESM(require_react());
  var import_react_is10 = __toESM(require_react_is3());
  var import_prop_types155 = __toESM(require_prop_types());
  var import_refType15 = __toESM(require_refType2());
  var import_composeClasses114 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/utils/scrollLeft.js
  var import_utils50 = __toESM(require_node2());

  // node_modules/@mui/material/internal/animate.js
  function easeInOutSin(time) {
    return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
  }
  function animate(property, element, to, options = {}, cb = () => {
  }) {
    const {
      ease = easeInOutSin,
      duration: duration2 = 300
      // standard
    } = options;
    let start2 = null;
    const from2 = element[property];
    let cancelled = false;
    const cancel = () => {
      cancelled = true;
    };
    const step = (timestamp) => {
      if (cancelled) {
        cb(new Error("Animation cancelled"));
        return;
      }
      if (start2 === null) {
        start2 = timestamp;
      }
      const time = Math.min(1, (timestamp - start2) / duration2);
      element[property] = ease(time) * (to - from2) + from2;
      if (time >= 1) {
        requestAnimationFrame(() => {
          cb(null);
        });
        return;
      }
      requestAnimationFrame(step);
    };
    if (from2 === to) {
      cb(new Error("Element already at target position"));
      return cancel;
    }
    requestAnimationFrame(step);
    return cancel;
  }

  // node_modules/@mui/material/Tabs/ScrollbarSize.js
  init_extends();
  var React207 = __toESM(require_react());
  var import_prop_types153 = __toESM(require_prop_types());
  var import_utils51 = __toESM(require_utils());
  var import_jsx_runtime223 = __toESM(require_jsx_runtime());
  var _excluded154 = ["onChange"];
  var styles6 = {
    width: 99,
    height: 99,
    position: "absolute",
    top: -9999,
    overflow: "scroll"
  };
  function ScrollbarSize(props) {
    const {
      onChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded154);
    const scrollbarHeight = React207.useRef();
    const nodeRef = React207.useRef(null);
    const setMeasurements = () => {
      scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
    };
    (0, import_utils51.unstable_useEnhancedEffect)(() => {
      const handleResize = debounce_default(() => {
        const prevHeight = scrollbarHeight.current;
        setMeasurements();
        if (prevHeight !== scrollbarHeight.current) {
          onChange(scrollbarHeight.current);
        }
      });
      const containerWindow = (0, import_utils51.ownerWindow)(nodeRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [onChange]);
    React207.useEffect(() => {
      setMeasurements();
      onChange(scrollbarHeight.current);
    }, [onChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("div", _extends({
      style: styles6,
      ref: nodeRef
    }, other));
  }
  true ? ScrollbarSize.propTypes = {
    onChange: import_prop_types153.default.func.isRequired
  } : void 0;

  // node_modules/@mui/material/TabScrollButton/TabScrollButton.js
  init_extends();
  var React208 = __toESM(require_react());
  var import_prop_types154 = __toESM(require_prop_types());
  var import_composeClasses113 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.js
  var import_generateUtilityClasses114 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass118 = __toESM(require_generateUtilityClass2());
  function getTabScrollButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass118.default)("MuiTabScrollButton", slot);
  }
  var tabScrollButtonClasses = (0, import_generateUtilityClasses114.default)("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
  var tabScrollButtonClasses_default = tabScrollButtonClasses;

  // node_modules/@mui/material/TabScrollButton/TabScrollButton.js
  var import_jsx_runtime224 = __toESM(require_jsx_runtime());
  var _excluded155 = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
  var useUtilityClasses112 = (ownerState) => {
    const {
      classes: classes2,
      orientation,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation, disabled && "disabled"]
    };
    return (0, import_composeClasses113.default)(slots, getTabScrollButtonUtilityClass, classes2);
  };
  var TabScrollButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiTabScrollButton",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, ownerState.orientation && styles8[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: 40,
    flexShrink: 0,
    opacity: 0.8,
    [`&.${tabScrollButtonClasses_default.disabled}`]: {
      opacity: 0
    }
  }, ownerState.orientation === "vertical" && {
    width: "100%",
    height: 40,
    "& svg": {
      transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
    }
  }));
  var TabScrollButton = /* @__PURE__ */ React208.forwardRef(function TabScrollButton2(inProps, ref) {
    var _slots$StartScrollBut, _slots$EndScrollButto;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTabScrollButton"
    });
    const {
      className,
      slots = {},
      slotProps = {},
      direction: direction2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded155);
    const isRtl = useRtl();
    const ownerState = _extends({
      isRtl
    }, props);
    const classes2 = useUtilityClasses112(ownerState);
    const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft_default;
    const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight_default;
    const startButtonIconProps = useSlotProps({
      elementType: StartButtonIcon,
      externalSlotProps: slotProps.startScrollButtonIcon,
      additionalProps: {
        fontSize: "small"
      },
      ownerState
    });
    const endButtonIconProps = useSlotProps({
      elementType: EndButtonIcon,
      externalSlotProps: slotProps.endScrollButtonIcon,
      additionalProps: {
        fontSize: "small"
      },
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(TabScrollButtonRoot, _extends({
      component: "div",
      className: clsx_default(classes2.root, className),
      ref,
      role: null,
      ownerState,
      tabIndex: null
    }, other, {
      children: direction2 === "left" ? /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(StartButtonIcon, _extends({}, startButtonIconProps)) : /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(EndButtonIcon, _extends({}, endButtonIconProps))
    }));
  });
  true ? TabScrollButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types154.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types154.default.object,
    /**
     * @ignore
     */
    className: import_prop_types154.default.string,
    /**
     * The direction the button should indicate.
     */
    direction: import_prop_types154.default.oneOf(["left", "right"]).isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types154.default.bool,
    /**
     * The component orientation (layout flow direction).
     */
    orientation: import_prop_types154.default.oneOf(["horizontal", "vertical"]).isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     * @default {}
     */
    slotProps: import_prop_types154.default.shape({
      endScrollButtonIcon: import_prop_types154.default.oneOfType([import_prop_types154.default.func, import_prop_types154.default.object]),
      startScrollButtonIcon: import_prop_types154.default.oneOfType([import_prop_types154.default.func, import_prop_types154.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types154.default.shape({
      EndScrollButtonIcon: import_prop_types154.default.elementType,
      StartScrollButtonIcon: import_prop_types154.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types154.default.oneOfType([import_prop_types154.default.arrayOf(import_prop_types154.default.oneOfType([import_prop_types154.default.func, import_prop_types154.default.object, import_prop_types154.default.bool])), import_prop_types154.default.func, import_prop_types154.default.object])
  } : void 0;
  var TabScrollButton_default = TabScrollButton;

  // node_modules/@mui/material/Tabs/tabsClasses.js
  var import_generateUtilityClasses115 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass119 = __toESM(require_generateUtilityClass2());
  function getTabsUtilityClass(slot) {
    return (0, import_generateUtilityClass119.default)("MuiTabs", slot);
  }
  var tabsClasses = (0, import_generateUtilityClasses115.default)("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
  var tabsClasses_default = tabsClasses;

  // node_modules/@mui/material/Tabs/Tabs.js
  var import_jsx_runtime225 = __toESM(require_jsx_runtime());
  var import_jsx_runtime226 = __toESM(require_jsx_runtime());
  var _excluded156 = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
  var nextItem2 = (list, item) => {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return list.firstChild;
  };
  var previousItem2 = (list, item) => {
    if (list === item) {
      return list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return list.lastChild;
  };
  var moveFocus2 = (list, currentFocus, traversalFunction) => {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus);
      } else {
        nextFocus.focus();
        return;
      }
    }
  };
  var useUtilityClasses113 = (ownerState) => {
    const {
      vertical,
      fixed,
      hideScrollbar,
      scrollableX,
      scrollableY,
      centered,
      scrollButtonsHideMobile,
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root", vertical && "vertical"],
      scroller: ["scroller", fixed && "fixed", hideScrollbar && "hideScrollbar", scrollableX && "scrollableX", scrollableY && "scrollableY"],
      flexContainer: ["flexContainer", vertical && "flexContainerVertical", centered && "centered"],
      indicator: ["indicator"],
      scrollButtons: ["scrollButtons", scrollButtonsHideMobile && "scrollButtonsHideMobile"],
      scrollableX: [scrollableX && "scrollableX"],
      hideScrollbar: [hideScrollbar && "hideScrollbar"]
    };
    return (0, import_composeClasses114.default)(slots, getTabsUtilityClass, classes2);
  };
  var TabsRoot = styled_default2("div", {
    name: "MuiTabs",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${tabsClasses_default.scrollButtons}`]: styles8.scrollButtons
      }, {
        [`& .${tabsClasses_default.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles8.scrollButtonsHideMobile
      }, styles8.root, ownerState.vertical && styles8.vertical];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    overflow: "hidden",
    minHeight: 48,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    display: "flex"
  }, ownerState.vertical && {
    flexDirection: "column"
  }, ownerState.scrollButtonsHideMobile && {
    [`& .${tabsClasses_default.scrollButtons}`]: {
      [theme.breakpoints.down("sm")]: {
        display: "none"
      }
    }
  }));
  var TabsScroller = styled_default2("div", {
    name: "MuiTabs",
    slot: "Scroller",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.scroller, ownerState.fixed && styles8.fixed, ownerState.hideScrollbar && styles8.hideScrollbar, ownerState.scrollableX && styles8.scrollableX, ownerState.scrollableY && styles8.scrollableY];
    }
  })(({
    ownerState
  }) => _extends({
    position: "relative",
    display: "inline-block",
    flex: "1 1 auto",
    whiteSpace: "nowrap"
  }, ownerState.fixed && {
    overflowX: "hidden",
    width: "100%"
  }, ownerState.hideScrollbar && {
    // Hide dimensionless scrollbar on macOS
    scrollbarWidth: "none",
    // Firefox
    "&::-webkit-scrollbar": {
      display: "none"
      // Safari + Chrome
    }
  }, ownerState.scrollableX && {
    overflowX: "auto",
    overflowY: "hidden"
  }, ownerState.scrollableY && {
    overflowY: "auto",
    overflowX: "hidden"
  }));
  var FlexContainer = styled_default2("div", {
    name: "MuiTabs",
    slot: "FlexContainer",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.flexContainer, ownerState.vertical && styles8.flexContainerVertical, ownerState.centered && styles8.centered];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex"
  }, ownerState.vertical && {
    flexDirection: "column"
  }, ownerState.centered && {
    justifyContent: "center"
  }));
  var TabsIndicator = styled_default2("span", {
    name: "MuiTabs",
    slot: "Indicator",
    overridesResolver: (props, styles8) => styles8.indicator
  })(({
    ownerState,
    theme
  }) => _extends({
    position: "absolute",
    height: 2,
    bottom: 0,
    width: "100%",
    transition: theme.transitions.create()
  }, ownerState.indicatorColor === "primary" && {
    backgroundColor: (theme.vars || theme).palette.primary.main
  }, ownerState.indicatorColor === "secondary" && {
    backgroundColor: (theme.vars || theme).palette.secondary.main
  }, ownerState.vertical && {
    height: "100%",
    width: 2,
    right: 0
  }));
  var TabsScrollbarSize = styled_default2(ScrollbarSize)({
    overflowX: "auto",
    overflowY: "hidden",
    // Hide dimensionless scrollbar on macOS
    scrollbarWidth: "none",
    // Firefox
    "&::-webkit-scrollbar": {
      display: "none"
      // Safari + Chrome
    }
  });
  var defaultIndicatorStyle = {};
  var warnedOnceTabPresent = false;
  var Tabs = /* @__PURE__ */ React209.forwardRef(function Tabs2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTabs"
    });
    const theme = useTheme6();
    const isRtl = useRtl();
    const {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      action,
      centered = false,
      children: childrenProp,
      className,
      component = "div",
      allowScrollButtonsMobile = false,
      indicatorColor = "primary",
      onChange,
      orientation = "horizontal",
      ScrollButtonComponent = TabScrollButton_default,
      scrollButtons = "auto",
      selectionFollowsFocus,
      slots = {},
      slotProps = {},
      TabIndicatorProps = {},
      TabScrollButtonProps = {},
      textColor = "primary",
      value,
      variant = "standard",
      visibleScrollbar = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded156);
    const scrollable = variant === "scrollable";
    const vertical = orientation === "vertical";
    const scrollStart = vertical ? "scrollTop" : "scrollLeft";
    const start2 = vertical ? "top" : "left";
    const end2 = vertical ? "bottom" : "right";
    const clientSize = vertical ? "clientHeight" : "clientWidth";
    const size = vertical ? "height" : "width";
    const ownerState = _extends({}, props, {
      component,
      allowScrollButtonsMobile,
      indicatorColor,
      orientation,
      vertical,
      scrollButtons,
      textColor,
      variant,
      visibleScrollbar,
      fixed: !scrollable,
      hideScrollbar: scrollable && !visibleScrollbar,
      scrollableX: scrollable && !vertical,
      scrollableY: scrollable && vertical,
      centered: centered && !scrollable,
      scrollButtonsHideMobile: !allowScrollButtonsMobile
    });
    const classes2 = useUtilityClasses113(ownerState);
    const startScrollButtonIconProps = useSlotProps({
      elementType: slots.StartScrollButtonIcon,
      externalSlotProps: slotProps.startScrollButtonIcon,
      ownerState
    });
    const endScrollButtonIconProps = useSlotProps({
      elementType: slots.EndScrollButtonIcon,
      externalSlotProps: slotProps.endScrollButtonIcon,
      ownerState
    });
    if (true) {
      if (centered && scrollable) {
        console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
      }
    }
    const [mounted, setMounted] = React209.useState(false);
    const [indicatorStyle, setIndicatorStyle] = React209.useState(defaultIndicatorStyle);
    const [displayStartScroll, setDisplayStartScroll] = React209.useState(false);
    const [displayEndScroll, setDisplayEndScroll] = React209.useState(false);
    const [updateScrollObserver, setUpdateScrollObserver] = React209.useState(false);
    const [scrollerStyle, setScrollerStyle] = React209.useState({
      overflow: "hidden",
      scrollbarWidth: 0
    });
    const valueToIndex = /* @__PURE__ */ new Map();
    const tabsRef = React209.useRef(null);
    const tabListRef = React209.useRef(null);
    const getTabsMeta = () => {
      const tabsNode = tabsRef.current;
      let tabsMeta;
      if (tabsNode) {
        const rect = tabsNode.getBoundingClientRect();
        tabsMeta = {
          clientWidth: tabsNode.clientWidth,
          scrollLeft: tabsNode.scrollLeft,
          scrollTop: tabsNode.scrollTop,
          scrollLeftNormalized: (0, import_utils50.unstable_getNormalizedScrollLeft)(tabsNode, isRtl ? "rtl" : "ltr"),
          scrollWidth: tabsNode.scrollWidth,
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right
        };
      }
      let tabMeta;
      if (tabsNode && value !== false) {
        const children2 = tabListRef.current.children;
        if (children2.length > 0) {
          const tab = children2[valueToIndex.get(value)];
          if (true) {
            if (!tab) {
              console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(", ")}.` : null].join("\n"));
            }
          }
          tabMeta = tab ? tab.getBoundingClientRect() : null;
          if (true) {
            if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0 && // if the whole Tabs component is hidden, don't warn
            tabsMeta.clientWidth !== 0) {
              tabsMeta = null;
              console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join("\n"));
              warnedOnceTabPresent = true;
            }
          }
        }
      }
      return {
        tabsMeta,
        tabMeta
      };
    };
    const updateIndicatorState = useEventCallback_default(() => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      let startValue = 0;
      let startIndicator;
      if (vertical) {
        startIndicator = "top";
        if (tabMeta && tabsMeta) {
          startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
        }
      } else {
        startIndicator = isRtl ? "right" : "left";
        if (tabMeta && tabsMeta) {
          const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
          startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
        }
      }
      const newIndicatorStyle = {
        [startIndicator]: startValue,
        // May be wrong until the font is loaded.
        [size]: tabMeta ? tabMeta[size] : 0
      };
      if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
        setIndicatorStyle(newIndicatorStyle);
      } else {
        const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
        const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
        if (dStart >= 1 || dSize >= 1) {
          setIndicatorStyle(newIndicatorStyle);
        }
      }
    });
    const scroll = (scrollValue, {
      animation = true
    } = {}) => {
      if (animation) {
        animate(scrollStart, tabsRef.current, scrollValue, {
          duration: theme.transitions.duration.standard
        });
      } else {
        tabsRef.current[scrollStart] = scrollValue;
      }
    };
    const moveTabsScroll = (delta) => {
      let scrollValue = tabsRef.current[scrollStart];
      if (vertical) {
        scrollValue += delta;
      } else {
        scrollValue += delta * (isRtl ? -1 : 1);
        scrollValue *= isRtl && (0, import_utils50.unstable_detectScrollType)() === "reverse" ? -1 : 1;
      }
      scroll(scrollValue);
    };
    const getScrollSize = () => {
      const containerSize = tabsRef.current[clientSize];
      let totalSize = 0;
      const children2 = Array.from(tabListRef.current.children);
      for (let i2 = 0; i2 < children2.length; i2 += 1) {
        const tab = children2[i2];
        if (totalSize + tab[clientSize] > containerSize) {
          if (i2 === 0) {
            totalSize = containerSize;
          }
          break;
        }
        totalSize += tab[clientSize];
      }
      return totalSize;
    };
    const handleStartScrollClick = () => {
      moveTabsScroll(-1 * getScrollSize());
    };
    const handleEndScrollClick = () => {
      moveTabsScroll(getScrollSize());
    };
    const handleScrollbarSizeChange = React209.useCallback((scrollbarWidth) => {
      setScrollerStyle({
        overflow: null,
        scrollbarWidth
      });
    }, []);
    const getConditionalElements = () => {
      const conditionalElements2 = {};
      conditionalElements2.scrollbarSizeListener = scrollable ? /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(TabsScrollbarSize, {
        onChange: handleScrollbarSizeChange,
        className: clsx_default(classes2.scrollableX, classes2.hideScrollbar)
      }) : null;
      const scrollButtonsActive = displayStartScroll || displayEndScroll;
      const showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === true);
      conditionalElements2.scrollButtonStart = showScrollButtons ? /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(ScrollButtonComponent, _extends({
        slots: {
          StartScrollButtonIcon: slots.StartScrollButtonIcon
        },
        slotProps: {
          startScrollButtonIcon: startScrollButtonIconProps
        },
        orientation,
        direction: isRtl ? "right" : "left",
        onClick: handleStartScrollClick,
        disabled: !displayStartScroll
      }, TabScrollButtonProps, {
        className: clsx_default(classes2.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      conditionalElements2.scrollButtonEnd = showScrollButtons ? /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(ScrollButtonComponent, _extends({
        slots: {
          EndScrollButtonIcon: slots.EndScrollButtonIcon
        },
        slotProps: {
          endScrollButtonIcon: endScrollButtonIconProps
        },
        orientation,
        direction: isRtl ? "left" : "right",
        onClick: handleEndScrollClick,
        disabled: !displayEndScroll
      }, TabScrollButtonProps, {
        className: clsx_default(classes2.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      return conditionalElements2;
    };
    const scrollSelectedIntoView = useEventCallback_default((animation) => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      if (!tabMeta || !tabsMeta) {
        return;
      }
      if (tabMeta[start2] < tabsMeta[start2]) {
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start2] - tabsMeta[start2]);
        scroll(nextScrollStart, {
          animation
        });
      } else if (tabMeta[end2] > tabsMeta[end2]) {
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end2] - tabsMeta[end2]);
        scroll(nextScrollStart, {
          animation
        });
      }
    });
    const updateScrollButtonState = useEventCallback_default(() => {
      if (scrollable && scrollButtons !== false) {
        setUpdateScrollObserver(!updateScrollObserver);
      }
    });
    React209.useEffect(() => {
      const handleResize = debounce_default(() => {
        if (tabsRef.current) {
          updateIndicatorState();
        }
      });
      let resizeObserver;
      const handleMutation = (records) => {
        records.forEach((record) => {
          record.removedNodes.forEach((item) => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.unobserve(item);
          });
          record.addedNodes.forEach((item) => {
            var _resizeObserver2;
            (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.observe(item);
          });
        });
        handleResize();
        updateScrollButtonState();
      };
      const win = ownerWindow_default(tabsRef.current);
      win.addEventListener("resize", handleResize);
      let mutationObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        Array.from(tabListRef.current.children).forEach((child) => {
          resizeObserver.observe(child);
        });
      }
      if (typeof MutationObserver !== "undefined") {
        mutationObserver = new MutationObserver(handleMutation);
        mutationObserver.observe(tabListRef.current, {
          childList: true
        });
      }
      return () => {
        var _mutationObserver, _resizeObserver3;
        handleResize.clear();
        win.removeEventListener("resize", handleResize);
        (_mutationObserver = mutationObserver) == null || _mutationObserver.disconnect();
        (_resizeObserver3 = resizeObserver) == null || _resizeObserver3.disconnect();
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    React209.useEffect(() => {
      const tabListChildren = Array.from(tabListRef.current.children);
      const length2 = tabListChildren.length;
      if (typeof IntersectionObserver !== "undefined" && length2 > 0 && scrollable && scrollButtons !== false) {
        const firstTab = tabListChildren[0];
        const lastTab = tabListChildren[length2 - 1];
        const observerOptions = {
          root: tabsRef.current,
          threshold: 0.99
        };
        const handleScrollButtonStart = (entries) => {
          setDisplayStartScroll(!entries[0].isIntersecting);
        };
        const firstObserver = new IntersectionObserver(handleScrollButtonStart, observerOptions);
        firstObserver.observe(firstTab);
        const handleScrollButtonEnd = (entries) => {
          setDisplayEndScroll(!entries[0].isIntersecting);
        };
        const lastObserver = new IntersectionObserver(handleScrollButtonEnd, observerOptions);
        lastObserver.observe(lastTab);
        return () => {
          firstObserver.disconnect();
          lastObserver.disconnect();
        };
      }
      return void 0;
    }, [scrollable, scrollButtons, updateScrollObserver, childrenProp == null ? void 0 : childrenProp.length]);
    React209.useEffect(() => {
      setMounted(true);
    }, []);
    React209.useEffect(() => {
      updateIndicatorState();
    });
    React209.useEffect(() => {
      scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
    }, [scrollSelectedIntoView, indicatorStyle]);
    React209.useImperativeHandle(action, () => ({
      updateIndicator: updateIndicatorState,
      updateScrollButtons: updateScrollButtonState
    }), [updateIndicatorState, updateScrollButtonState]);
    const indicator = /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(TabsIndicator, _extends({}, TabIndicatorProps, {
      className: clsx_default(classes2.indicator, TabIndicatorProps.className),
      ownerState,
      style: _extends({}, indicatorStyle, TabIndicatorProps.style)
    }));
    let childIndex = 0;
    const children = React209.Children.map(childrenProp, (child) => {
      if (!/* @__PURE__ */ React209.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is10.isFragment)(child)) {
          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      const childValue = child.props.value === void 0 ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      const selected = childValue === value;
      childIndex += 1;
      return /* @__PURE__ */ React209.cloneElement(child, _extends({
        fullWidth: variant === "fullWidth",
        indicator: selected && !mounted && indicator,
        selected,
        selectionFollowsFocus,
        onChange,
        textColor,
        value: childValue
      }, childIndex === 1 && value === false && !child.props.tabIndex ? {
        tabIndex: 0
      } : {}));
    });
    const handleKeyDown = (event) => {
      const list = tabListRef.current;
      const currentFocus = ownerDocument_default(list).activeElement;
      const role = currentFocus.getAttribute("role");
      if (role !== "tab") {
        return;
      }
      let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
      let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
      if (orientation === "horizontal" && isRtl) {
        previousItemKey = "ArrowRight";
        nextItemKey = "ArrowLeft";
      }
      switch (event.key) {
        case previousItemKey:
          event.preventDefault();
          moveFocus2(list, currentFocus, previousItem2);
          break;
        case nextItemKey:
          event.preventDefault();
          moveFocus2(list, currentFocus, nextItem2);
          break;
        case "Home":
          event.preventDefault();
          moveFocus2(list, null, nextItem2);
          break;
        case "End":
          event.preventDefault();
          moveFocus2(list, null, previousItem2);
          break;
        default:
          break;
      }
    };
    const conditionalElements = getConditionalElements();
    return /* @__PURE__ */ (0, import_jsx_runtime226.jsxs)(TabsRoot, _extends({
      className: clsx_default(classes2.root, className),
      ownerState,
      ref,
      as: component
    }, other, {
      children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /* @__PURE__ */ (0, import_jsx_runtime226.jsxs)(TabsScroller, {
        className: classes2.scroller,
        ownerState,
        style: {
          overflow: scrollerStyle.overflow,
          [vertical ? `margin${isRtl ? "Left" : "Right"}` : "marginBottom"]: visibleScrollbar ? void 0 : -scrollerStyle.scrollbarWidth
        },
        ref: tabsRef,
        children: [/* @__PURE__ */ (0, import_jsx_runtime225.jsx)(FlexContainer, {
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-orientation": orientation === "vertical" ? "vertical" : null,
          className: classes2.flexContainer,
          ownerState,
          onKeyDown: handleKeyDown,
          ref: tabListRef,
          role: "tablist",
          children
        }), mounted && indicator]
      }), conditionalElements.scrollButtonEnd]
    }));
  });
  true ? Tabs.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Callback fired when the component mounts.
     * This is useful when you want to trigger an action programmatically.
     * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
     *
     * @param {object} actions This object contains all possible actions
     * that can be triggered programmatically.
     */
    action: import_refType15.default,
    /**
     * If `true`, the scroll buttons aren't forced hidden on mobile.
     * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
     * @default false
     */
    allowScrollButtonsMobile: import_prop_types155.default.bool,
    /**
     * The label for the Tabs as a string.
     */
    "aria-label": import_prop_types155.default.string,
    /**
     * An id or list of ids separated by a space that label the Tabs.
     */
    "aria-labelledby": import_prop_types155.default.string,
    /**
     * If `true`, the tabs are centered.
     * This prop is intended for large views.
     * @default false
     */
    centered: import_prop_types155.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types155.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types155.default.object,
    /**
     * @ignore
     */
    className: import_prop_types155.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types155.default.elementType,
    /**
     * Determines the color of the indicator.
     * @default 'primary'
     */
    indicatorColor: import_prop_types155.default.oneOfType([import_prop_types155.default.oneOf(["primary", "secondary"]), import_prop_types155.default.string]),
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child (number)
     */
    onChange: import_prop_types155.default.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types155.default.oneOf(["horizontal", "vertical"]),
    /**
     * The component used to render the scroll buttons.
     * @default TabScrollButton
     */
    ScrollButtonComponent: import_prop_types155.default.elementType,
    /**
     * Determine behavior of scroll buttons when tabs are set to scroll:
     *
     * - `auto` will only present them when not all the items are visible.
     * - `true` will always present them.
     * - `false` will never present them.
     *
     * By default the scroll buttons are hidden on mobile.
     * This behavior can be disabled with `allowScrollButtonsMobile`.
     * @default 'auto'
     */
    scrollButtons: import_prop_types155.default.oneOf(["auto", false, true]),
    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: import_prop_types155.default.bool,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     * @default {}
     */
    slotProps: import_prop_types155.default.shape({
      endScrollButtonIcon: import_prop_types155.default.oneOfType([import_prop_types155.default.func, import_prop_types155.default.object]),
      startScrollButtonIcon: import_prop_types155.default.oneOfType([import_prop_types155.default.func, import_prop_types155.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types155.default.shape({
      EndScrollButtonIcon: import_prop_types155.default.elementType,
      StartScrollButtonIcon: import_prop_types155.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types155.default.oneOfType([import_prop_types155.default.arrayOf(import_prop_types155.default.oneOfType([import_prop_types155.default.func, import_prop_types155.default.object, import_prop_types155.default.bool])), import_prop_types155.default.func, import_prop_types155.default.object]),
    /**
     * Props applied to the tab indicator element.
     * @default  {}
     */
    TabIndicatorProps: import_prop_types155.default.object,
    /**
     * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.
     * @default {}
     */
    TabScrollButtonProps: import_prop_types155.default.object,
    /**
     * Determines the color of the `Tab`.
     * @default 'primary'
     */
    textColor: import_prop_types155.default.oneOf(["inherit", "primary", "secondary"]),
    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `false`.
     */
    value: import_prop_types155.default.any,
    /**
     * Determines additional display behavior of the tabs:
     *
     *  - `scrollable` will invoke scrolling properties and allow for horizontally
     *  scrolling (or swiping) of the tab bar.
     *  - `fullWidth` will make the tabs grow to use all the available space,
     *  which should be used for small views, like on mobile.
     *  - `standard` will render the default state.
     * @default 'standard'
     */
    variant: import_prop_types155.default.oneOf(["fullWidth", "scrollable", "standard"]),
    /**
     * If `true`, the scrollbar is visible. It can be useful when displaying
     * a long vertical list of tabs.
     * @default false
     */
    visibleScrollbar: import_prop_types155.default.bool
  } : void 0;
  var Tabs_default = Tabs;

  // node_modules/@mui/material/TextField/TextField.js
  init_extends();
  var React210 = __toESM(require_react());
  var import_prop_types156 = __toESM(require_prop_types());
  var import_composeClasses115 = __toESM(require_composeClasses2());
  var import_useId7 = __toESM(require_useId2());
  var import_refType16 = __toESM(require_refType2());

  // node_modules/@mui/material/TextField/textFieldClasses.js
  var import_generateUtilityClasses116 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass120 = __toESM(require_generateUtilityClass2());
  function getTextFieldUtilityClass(slot) {
    return (0, import_generateUtilityClass120.default)("MuiTextField", slot);
  }
  var textFieldClasses = (0, import_generateUtilityClasses116.default)("MuiTextField", ["root"]);
  var textFieldClasses_default = textFieldClasses;

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime227 = __toESM(require_jsx_runtime());
  var import_jsx_runtime228 = __toESM(require_jsx_runtime());
  var _excluded157 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses114 = (ownerState) => {
    const {
      classes: classes2
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses115.default)(slots, getTextFieldUtilityClass, classes2);
  };
  var TextFieldRoot = styled_default2(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles8) => styles8.root
  })({});
  var TextField = /* @__PURE__ */ React210.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded157);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes2 = useUtilityClasses114(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = (0, import_useId7.default)(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime228.jsxs)(TextFieldRoot, _extends({
      className: clsx_default(classes2.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types156.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types156.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types156.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types156.default.object,
    /**
     * @ignore
     */
    className: import_prop_types156.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types156.default.oneOfType([import_prop_types156.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types156.default.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types156.default.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types156.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types156.default.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types156.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types156.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types156.default.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types156.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types156.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types156.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types156.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_refType16.default,
    /**
     * The label content.
     */
    label: import_prop_types156.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types156.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types156.default.oneOfType([import_prop_types156.default.number, import_prop_types156.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types156.default.oneOfType([import_prop_types156.default.number, import_prop_types156.default.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: import_prop_types156.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types156.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types156.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types156.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types156.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types156.default.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types156.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types156.default.oneOfType([import_prop_types156.default.number, import_prop_types156.default.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: import_prop_types156.default.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: import_prop_types156.default.object,
    /**
     * The size of the component.
     */
    size: import_prop_types156.default.oneOfType([import_prop_types156.default.oneOf(["medium", "small"]), import_prop_types156.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types156.default.oneOfType([import_prop_types156.default.arrayOf(import_prop_types156.default.oneOfType([import_prop_types156.default.func, import_prop_types156.default.object, import_prop_types156.default.bool])), import_prop_types156.default.func, import_prop_types156.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: import_prop_types156.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types156.default.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types156.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // node_modules/@mui/material/ToggleButton/ToggleButton.js
  init_extends();
  var React213 = __toESM(require_react());
  var import_prop_types157 = __toESM(require_prop_types());
  var import_resolveProps3 = __toESM(require_resolveProps2());
  var import_composeClasses116 = __toESM(require_composeClasses2());

  // node_modules/@mui/material/ToggleButton/toggleButtonClasses.js
  var import_generateUtilityClasses117 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass121 = __toESM(require_generateUtilityClass2());
  function getToggleButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass121.default)("MuiToggleButton", slot);
  }
  var toggleButtonClasses = (0, import_generateUtilityClasses117.default)("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge", "fullWidth"]);
  var toggleButtonClasses_default = toggleButtonClasses;

  // node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupContext.js
  var React211 = __toESM(require_react());
  var ToggleButtonGroupContext = /* @__PURE__ */ React211.createContext({});
  if (true) {
    ToggleButtonGroupContext.displayName = "ToggleButtonGroupContext";
  }
  var ToggleButtonGroupContext_default = ToggleButtonGroupContext;

  // node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupButtonContext.js
  var React212 = __toESM(require_react());
  var ToggleButtonGroupButtonContext = /* @__PURE__ */ React212.createContext(void 0);
  if (true) {
    ToggleButtonGroupButtonContext.displayName = "ToggleButtonGroupButtonContext";
  }
  var ToggleButtonGroupButtonContext_default = ToggleButtonGroupButtonContext;

  // node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js
  function isValueSelected(value, candidate) {
    if (candidate === void 0 || value === void 0) {
      return false;
    }
    if (Array.isArray(candidate)) {
      return candidate.indexOf(value) >= 0;
    }
    return value === candidate;
  }

  // node_modules/@mui/material/ToggleButton/ToggleButton.js
  var import_jsx_runtime229 = __toESM(require_jsx_runtime());
  var _excluded158 = ["value"];
  var _excluded222 = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];
  var useUtilityClasses115 = (ownerState) => {
    const {
      classes: classes2,
      fullWidth,
      selected,
      disabled,
      size,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", disabled && "disabled", fullWidth && "fullWidth", `size${capitalize_default(size)}`, color2]
    };
    return (0, import_composeClasses116.default)(slots, getToggleButtonUtilityClass, classes2);
  };
  var ToggleButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiToggleButton",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [styles8.root, styles8[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    let selectedColor = ownerState.color === "standard" ? theme.palette.text.primary : theme.palette[ownerState.color].main;
    let selectedColorChannel;
    if (theme.vars) {
      selectedColor = ownerState.color === "standard" ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;
      selectedColorChannel = ownerState.color === "standard" ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;
    }
    return _extends({}, theme.typography.button, {
      borderRadius: (theme.vars || theme).shape.borderRadius,
      padding: 11,
      border: `1px solid ${(theme.vars || theme).palette.divider}`,
      color: (theme.vars || theme).palette.action.active
    }, ownerState.fullWidth && {
      width: "100%"
    }, {
      [`&.${toggleButtonClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled,
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      },
      "&:hover": {
        textDecoration: "none",
        // Reset on mouse devices
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${toggleButtonClasses_default.selected}`]: {
        color: selectedColor,
        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity),
        "&:hover": {
          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity)
          }
        }
      }
    }, ownerState.size === "small" && {
      padding: 7,
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && {
      padding: 15,
      fontSize: theme.typography.pxToRem(15)
    });
  });
  var ToggleButton = /* @__PURE__ */ React213.forwardRef(function ToggleButton2(inProps, ref) {
    const _React$useContext = React213.useContext(ToggleButtonGroupContext_default), {
      value: contextValue
    } = _React$useContext, contextProps = _objectWithoutPropertiesLoose(_React$useContext, _excluded158);
    const toggleButtonGroupButtonContextPositionClassName = React213.useContext(ToggleButtonGroupButtonContext_default);
    const resolvedProps = (0, import_resolveProps3.default)(_extends({}, contextProps, {
      selected: isValueSelected(inProps.value, contextValue)
    }), inProps);
    const props = useThemeProps2({
      props: resolvedProps,
      name: "MuiToggleButton"
    });
    const {
      children,
      className,
      color: color2 = "standard",
      disabled = false,
      disableFocusRipple = false,
      fullWidth = false,
      onChange,
      onClick,
      selected,
      size = "medium",
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded222);
    const ownerState = _extends({}, props, {
      color: color2,
      disabled,
      disableFocusRipple,
      fullWidth,
      size
    });
    const classes2 = useUtilityClasses115(ownerState);
    const handleChange = (event) => {
      if (onClick) {
        onClick(event, value);
        if (event.defaultPrevented) {
          return;
        }
      }
      if (onChange) {
        onChange(event, value);
      }
    };
    const positionClassName = toggleButtonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(ToggleButtonRoot, _extends({
      className: clsx_default(contextProps.className, classes2.root, className, positionClassName),
      disabled,
      focusRipple: !disableFocusRipple,
      ref,
      onClick: handleChange,
      onChange,
      value,
      ownerState,
      "aria-pressed": selected
    }, other, {
      children
    }));
  });
  true ? ToggleButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types157.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types157.default.object,
    /**
     * @ignore
     */
    className: import_prop_types157.default.string,
    /**
     * The color of the button when it is in an active state.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'standard'
     */
    color: import_prop_types157.default.oneOfType([import_prop_types157.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types157.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types157.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types157.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types157.default.bool,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types157.default.bool,
    /**
     * Callback fired when the state changes.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected button.
     */
    onChange: import_prop_types157.default.func,
    /**
     * Callback fired when the button is clicked.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected button.
     */
    onClick: import_prop_types157.default.func,
    /**
     * If `true`, the button is rendered in an active state.
     */
    selected: import_prop_types157.default.bool,
    /**
     * The size of the component.
     * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
     * @default 'medium'
     */
    size: import_prop_types157.default.oneOfType([import_prop_types157.default.oneOf(["small", "medium", "large"]), import_prop_types157.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types157.default.oneOfType([import_prop_types157.default.arrayOf(import_prop_types157.default.oneOfType([import_prop_types157.default.func, import_prop_types157.default.object, import_prop_types157.default.bool])), import_prop_types157.default.func, import_prop_types157.default.object]),
    /**
     * The value to associate with the button when selected in a
     * ToggleButtonGroup.
     */
    value: import_prop_types157.default.any.isRequired
  } : void 0;
  var ToggleButton_default = ToggleButton;

  // node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
  init_extends();
  var React214 = __toESM(require_react());
  var import_react_is11 = __toESM(require_react_is3());
  var import_prop_types158 = __toESM(require_prop_types());
  var import_composeClasses117 = __toESM(require_composeClasses2());
  var import_getValidReactChildren2 = __toESM(require_getValidReactChildren2());

  // node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js
  var import_generateUtilityClasses118 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass122 = __toESM(require_generateUtilityClass2());
  function getToggleButtonGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass122.default)("MuiToggleButtonGroup", slot);
  }
  var toggleButtonGroupClasses = (0, import_generateUtilityClasses118.default)("MuiToggleButtonGroup", ["root", "selected", "horizontal", "vertical", "disabled", "grouped", "groupedHorizontal", "groupedVertical", "fullWidth", "firstButton", "lastButton", "middleButton"]);
  var toggleButtonGroupClasses_default = toggleButtonGroupClasses;

  // node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
  var import_jsx_runtime230 = __toESM(require_jsx_runtime());
  var _excluded159 = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];
  var useUtilityClasses116 = (ownerState) => {
    const {
      classes: classes2,
      orientation,
      fullWidth,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation === "vertical" && "vertical", fullWidth && "fullWidth"],
      grouped: ["grouped", `grouped${capitalize_default(orientation)}`, disabled && "disabled"],
      firstButton: ["firstButton"],
      lastButton: ["lastButton"],
      middleButton: ["middleButton"]
    };
    return (0, import_composeClasses117.default)(slots, getToggleButtonGroupUtilityClass, classes2);
  };
  var ToggleButtonGroupRoot = styled_default2("div", {
    name: "MuiToggleButtonGroup",
    slot: "Root",
    overridesResolver: (props, styles8) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${toggleButtonGroupClasses_default.grouped}`]: styles8.grouped
      }, {
        [`& .${toggleButtonGroupClasses_default.grouped}`]: styles8[`grouped${capitalize_default(ownerState.orientation)}`]
      }, {
        [`& .${toggleButtonGroupClasses_default.firstButton}`]: styles8.firstButton
      }, {
        [`& .${toggleButtonGroupClasses_default.lastButton}`]: styles8.lastButton
      }, {
        [`& .${toggleButtonGroupClasses_default.middleButton}`]: styles8.middleButton
      }, styles8.root, ownerState.orientation === "vertical" && styles8.vertical, ownerState.fullWidth && styles8.fullWidth];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-flex",
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [`& .${toggleButtonGroupClasses_default.grouped}`]: _extends({}, ownerState.orientation === "horizontal" ? {
      [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
        borderLeft: 0,
        marginLeft: 0
      }
    } : {
      [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
        borderTop: 0,
        marginTop: 0
      }
    })
  }, ownerState.orientation === "horizontal" ? {
    [`& .${toggleButtonGroupClasses_default.firstButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    [`& .${toggleButtonGroupClasses_default.lastButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
      marginLeft: -1,
      borderLeft: "1px solid transparent",
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    }
  } : {
    [`& .${toggleButtonGroupClasses_default.firstButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    },
    [`& .${toggleButtonGroupClasses_default.lastButton},& .${toggleButtonGroupClasses_default.middleButton}`]: {
      marginTop: -1,
      borderTop: "1px solid transparent",
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0
    }
  }, ownerState.orientation === "horizontal" ? {
    [`& .${toggleButtonGroupClasses_default.lastButton}.${toggleButtonClasses_default.disabled},& .${toggleButtonGroupClasses_default.middleButton}.${toggleButtonClasses_default.disabled}`]: {
      borderLeft: "1px solid transparent"
    }
  } : {
    [`& .${toggleButtonGroupClasses_default.lastButton}.${toggleButtonClasses_default.disabled},& .${toggleButtonGroupClasses_default.middleButton}.${toggleButtonClasses_default.disabled}`]: {
      borderTop: "1px solid transparent"
    }
  }));
  var ToggleButtonGroup = /* @__PURE__ */ React214.forwardRef(function ToggleButtonGroup2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiToggleButtonGroup"
    });
    const {
      children,
      className,
      color: color2 = "standard",
      disabled = false,
      exclusive = false,
      fullWidth = false,
      onChange,
      orientation = "horizontal",
      size = "medium",
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded159);
    const ownerState = _extends({}, props, {
      disabled,
      fullWidth,
      orientation,
      size
    });
    const classes2 = useUtilityClasses116(ownerState);
    const handleChange = React214.useCallback((event, buttonValue) => {
      if (!onChange) {
        return;
      }
      const index = value && value.indexOf(buttonValue);
      let newValue;
      if (value && index >= 0) {
        newValue = value.slice();
        newValue.splice(index, 1);
      } else {
        newValue = value ? value.concat(buttonValue) : [buttonValue];
      }
      onChange(event, newValue);
    }, [onChange, value]);
    const handleExclusiveChange = React214.useCallback((event, buttonValue) => {
      if (!onChange) {
        return;
      }
      onChange(event, value === buttonValue ? null : buttonValue);
    }, [onChange, value]);
    const context = React214.useMemo(() => ({
      className: classes2.grouped,
      onChange: exclusive ? handleExclusiveChange : handleChange,
      value,
      size,
      fullWidth,
      color: color2,
      disabled
    }), [classes2.grouped, exclusive, handleExclusiveChange, handleChange, value, size, fullWidth, color2, disabled]);
    const validChildren = (0, import_getValidReactChildren2.default)(children);
    const childrenCount = validChildren.length;
    const getButtonPositionClassName = (index) => {
      const isFirstButton = index === 0;
      const isLastButton = index === childrenCount - 1;
      if (isFirstButton && isLastButton) {
        return "";
      }
      if (isFirstButton) {
        return classes2.firstButton;
      }
      if (isLastButton) {
        return classes2.lastButton;
      }
      return classes2.middleButton;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(ToggleButtonGroupRoot, _extends({
      role: "group",
      className: clsx_default(classes2.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(ToggleButtonGroupContext_default.Provider, {
        value: context,
        children: validChildren.map((child, index) => {
          if (true) {
            if ((0, import_react_is11.isFragment)(child)) {
              console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
            }
          }
          return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(ToggleButtonGroupButtonContext_default.Provider, {
            value: getButtonPositionClassName(index),
            children: child
          }, index);
        })
      })
    }));
  });
  true ? ToggleButtonGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types158.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types158.default.object,
    /**
     * @ignore
     */
    className: import_prop_types158.default.string,
    /**
     * The color of the button when it is selected.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'standard'
     */
    color: import_prop_types158.default.oneOfType([import_prop_types158.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types158.default.string]),
    /**
     * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
     * @default false
     */
    disabled: import_prop_types158.default.bool,
    /**
     * If `true`, only allow one of the child ToggleButton values to be selected.
     * @default false
     */
    exclusive: import_prop_types158.default.bool,
    /**
     * If `true`, the button group will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types158.default.bool,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected buttons. When `exclusive` is true
     * this is a single value; when false an array of selected values. If no value
     * is selected and `exclusive` is true the value is null; when false an empty array.
     */
    onChange: import_prop_types158.default.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types158.default.oneOf(["horizontal", "vertical"]),
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types158.default.oneOfType([import_prop_types158.default.oneOf(["small", "medium", "large"]), import_prop_types158.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types158.default.oneOfType([import_prop_types158.default.arrayOf(import_prop_types158.default.oneOfType([import_prop_types158.default.func, import_prop_types158.default.object, import_prop_types158.default.bool])), import_prop_types158.default.func, import_prop_types158.default.object]),
    /**
     * The currently selected value within the group or an array of selected
     * values when `exclusive` is false.
     *
     * The value must have reference equality with the option in order to be selected.
     */
    value: import_prop_types158.default.any
  } : void 0;
  var ToggleButtonGroup_default = ToggleButtonGroup;

  // node_modules/@mui/material/useScrollTrigger/useScrollTrigger.js
  init_extends();
  var React215 = __toESM(require_react());
  var _excluded160 = ["getTrigger", "target"];
  function defaultTrigger(store, options) {
    const {
      disableHysteresis = false,
      threshold = 100,
      target
    } = options;
    const previous = store.current;
    if (target) {
      store.current = target.pageYOffset !== void 0 ? target.pageYOffset : target.scrollTop;
    }
    if (!disableHysteresis && previous !== void 0) {
      if (store.current < previous) {
        return false;
      }
    }
    return store.current > threshold;
  }
  var defaultTarget = typeof window !== "undefined" ? window : null;
  function useScrollTrigger(options = {}) {
    const {
      getTrigger = defaultTrigger,
      target = defaultTarget
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded160);
    const store = React215.useRef();
    const [trigger, setTrigger] = React215.useState(() => getTrigger(store, other));
    React215.useEffect(() => {
      const handleScroll = () => {
        setTrigger(getTrigger(store, _extends({
          target
        }, other)));
      };
      handleScroll();
      target.addEventListener("scroll", handleScroll, {
        passive: true
      });
      return () => {
        target.removeEventListener("scroll", handleScroll, {
          passive: true
        });
      };
    }, [target, getTrigger, JSON.stringify(other)]);
    return trigger;
  }

  // node_modules/@mui/material/generateUtilityClass/index.js
  var import_utils54 = __toESM(require_node2());

  // node_modules/@mui/material/generateUtilityClasses/index.js
  var import_utils55 = __toESM(require_node2());

  // node_modules/notistack/notistack.esm.js
  var import_react9 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/notistack/node_modules/clsx/dist/clsx.m.js
  function r2(e2) {
    var t2, f, n2 = "";
    if ("string" == typeof e2 || "number" == typeof e2) n2 += e2;
    else if ("object" == typeof e2) if (Array.isArray(e2)) for (t2 = 0; t2 < e2.length; t2++) e2[t2] && (f = r2(e2[t2])) && (n2 && (n2 += " "), n2 += f);
    else for (t2 in e2) e2[t2] && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  function clsx2() {
    for (var e2, t2, f = 0, n2 = ""; f < arguments.length; ) (e2 = arguments[f++]) && (t2 = r2(e2)) && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  var clsx_m_default = clsx2;

  // node_modules/goober/dist/goober.modern.js
  var e = { data: "" };
  var t = (t2) => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t2 || e;
  var l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a = /\/\*[^]*?\*\/|  +/g;
  var n = /\n+/g;
  var o = (e2, t2) => {
    let r3 = "", l2 = "", a2 = "";
    for (let n2 in e2) {
      let c2 = e2[n2];
      "@" == n2[0] ? "i" == n2[1] ? r3 = n2 + " " + c2 + ";" : l2 += "f" == n2[1] ? o(c2, n2) : n2 + "{" + o(c2, "k" == n2[1] ? "" : t2) + "}" : "object" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3) => n2.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + ":" + c2 + ";");
    }
    return r3 + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l2;
  };
  var c = {};
  var s = (e2) => {
    if ("object" == typeof e2) {
      let t2 = "";
      for (let r3 in e2) t2 += r3 + s(e2[r3]);
      return t2;
    }
    return e2;
  };
  var i = (e2, t2, r3, i2, p2) => {
    let u2 = s(e2), d = c[u2] || (c[u2] = ((e3) => {
      let t3 = 0, r4 = 11;
      for (; t3 < e3.length; ) r4 = 101 * r4 + e3.charCodeAt(t3++) >>> 0;
      return "go" + r4;
    })(u2));
    if (!c[d]) {
      let t3 = u2 !== e2 ? e2 : ((e3) => {
        let t4, r4, o2 = [{}];
        for (; t4 = l.exec(e3.replace(a, "")); ) t4[4] ? o2.shift() : t4[3] ? (r4 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r4] = o2[0][r4] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
        return o2[0];
      })(e2);
      c[d] = o(p2 ? { ["@keyframes " + d]: t3 } : t3, r3 ? "" : "." + d);
    }
    let f = r3 && c.g ? c.g : null;
    return r3 && (c.g = c[d]), ((e3, t3, r4, l2) => {
      l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r4 ? e3 + t3.data : t3.data + e3);
    })(c[d], t2, i2, f), d;
  };
  var p = (e2, t2, r3) => e2.reduce((e3, l2, a2) => {
    let n2 = t2[a2];
    if (n2 && n2.call) {
      let e4 = n2(r3), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
      n2 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
    }
    return e3 + l2 + (null == n2 ? "" : n2);
  }, "");
  function u(e2) {
    let r3 = this || {}, l2 = e2.call ? e2(r3.p) : e2;
    return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r3.p) : l2.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r3.p) : t2), {}) : l2, t(r3.target), r3.g, r3.o, r3.k);
  }
  var b = u.bind({ g: 1 });
  var h = u.bind({ k: 1 });

  // node_modules/notistack/notistack.esm.js
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _inheritsLoose2(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  var noOp = function noOp2() {
    return "";
  };
  var SnackbarContext = /* @__PURE__ */ import_react9.default.createContext({
    enqueueSnackbar: noOp,
    closeSnackbar: noOp
  });
  var breakpoints = {
    downXs: "@media (max-width:599.95px)",
    upSm: "@media (min-width:600px)"
  };
  var capitalise = function capitalise2(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
  };
  var originKeyExtractor = function originKeyExtractor2(anchor) {
    return "" + capitalise(anchor.vertical) + capitalise(anchor.horizontal);
  };
  var isDefined = function isDefined2(value) {
    return !!value || value === 0;
  };
  var UNMOUNTED2 = "unmounted";
  var EXITED2 = "exited";
  var ENTERING2 = "entering";
  var ENTERED2 = "entered";
  var EXITING2 = "exiting";
  var Transition2 = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose2(Transition3, _React$Component);
    function Transition3(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      var appear = props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props["in"]) {
        if (appear) {
          initialStatus = EXITED2;
          _this.appearStatus = ENTERING2;
        } else {
          initialStatus = ENTERED2;
        }
      } else if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED2;
      } else {
        initialStatus = EXITED2;
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref["in"];
      if (nextIn && prevState.status === UNMOUNTED2) {
        return {
          status: EXITED2
        };
      }
      return null;
    };
    var _proto = Transition3.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props["in"]) {
          if (status !== ENTERING2 && status !== ENTERED2) {
            nextStatus = ENTERING2;
          }
        } else if (status === ENTERING2 || status === ENTERED2) {
          nextStatus = EXITING2;
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout3 = this.props.timeout;
      var enter = timeout3;
      var exit = timeout3;
      if (timeout3 != null && typeof timeout3 !== "number" && typeof timeout3 !== "string") {
        exit = timeout3.exit;
        enter = timeout3.enter;
      }
      return {
        exit,
        enter
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING2) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED2) {
        this.setState({
          status: UNMOUNTED2
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var isAppearing = mounting;
      var timeouts = this.getTimeouts();
      if (!mounting && !enter) {
        this.safeSetState({
          status: ENTERED2
        }, function() {
          if (_this2.props.onEntered) {
            _this2.props.onEntered(_this2.node, isAppearing);
          }
        });
        return;
      }
      if (this.props.onEnter) {
        this.props.onEnter(this.node, isAppearing);
      }
      this.safeSetState({
        status: ENTERING2
      }, function() {
        if (_this2.props.onEntering) {
          _this2.props.onEntering(_this2.node, isAppearing);
        }
        _this2.onTransitionEnd(timeouts.enter, function() {
          _this2.safeSetState({
            status: ENTERED2
          }, function() {
            if (_this2.props.onEntered) {
              _this2.props.onEntered(_this2.node, isAppearing);
            }
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      if (!exit) {
        this.safeSetState({
          status: EXITED2
        }, function() {
          if (_this3.props.onExited) {
            _this3.props.onExited(_this3.node);
          }
        });
        return;
      }
      if (this.props.onExit) {
        this.props.onExit(this.node);
      }
      this.safeSetState({
        status: EXITING2
      }, function() {
        if (_this3.props.onExiting) {
          _this3.props.onExiting(_this3.node);
        }
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED2
          }, function() {
            if (_this3.props.onExited) {
              _this3.props.onExited(_this3.node);
            }
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null && this.nextCallback.cancel) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function() {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback();
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout3, handler) {
      this.setNextCallback(handler);
      var doesNotHaveTimeoutOrListener = timeout3 == null && !this.props.addEndListener;
      if (!this.node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        this.props.addEndListener(this.node, this.nextCallback);
      }
      if (timeout3 != null) {
        setTimeout(this.nextCallback, timeout3);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED2) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return children(status, childProps);
    };
    _createClass(Transition3, [{
      key: "node",
      get: function get() {
        var _this$props$nodeRef;
        var node2 = (_this$props$nodeRef = this.props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current;
        if (!node2) {
          throw new Error("notistack - Custom snackbar is not refForwarding");
        }
        return node2;
      }
    }]);
    return Transition3;
  }(import_react9.default.Component);
  function noop2() {
  }
  Transition2.defaultProps = {
    "in": false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop2,
    onEntering: noop2,
    onEntered: noop2,
    onExit: noop2,
    onExiting: noop2,
    onExited: noop2
  };
  function setRef3(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
  function useForkRef13(refA, refB) {
    return (0, import_react9.useMemo)(function() {
      if (refA == null && refB == null) {
        return null;
      }
      return function(refValue) {
        setRef3(refA, refValue);
        setRef3(refB, refValue);
      };
    }, [refA, refB]);
  }
  function getTransitionProps2(props) {
    var timeout3 = props.timeout, _props$style = props.style, style4 = _props$style === void 0 ? {} : _props$style, mode = props.mode;
    return {
      duration: typeof timeout3 === "object" ? timeout3[mode] || 0 : timeout3,
      easing: style4.transitionTimingFunction,
      delay: style4.transitionDelay
    };
  }
  var defaultEasing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var reflow2 = function reflow3(node2) {
    node2.scrollTop = node2.scrollTop;
  };
  var formatMs2 = function formatMs3(milliseconds) {
    return Math.round(milliseconds) + "ms";
  };
  function createTransition(props, options) {
    if (props === void 0) {
      props = ["all"];
    }
    var _ref = options || {}, _ref$duration = _ref.duration, duration2 = _ref$duration === void 0 ? 300 : _ref$duration, _ref$easing = _ref.easing, easing2 = _ref$easing === void 0 ? defaultEasing.easeInOut : _ref$easing, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 0 : _ref$delay;
    var properties2 = Array.isArray(props) ? props : [props];
    return properties2.map(function(animatedProp) {
      var formattedDuration = typeof duration2 === "string" ? duration2 : formatMs2(duration2);
      var formattedDelay = typeof delay === "string" ? delay : formatMs2(delay);
      return animatedProp + " " + formattedDuration + " " + easing2 + " " + formattedDelay;
    }).join(",");
  }
  function ownerDocument8(node2) {
    return node2 && node2.ownerDocument || document;
  }
  function ownerWindow6(node2) {
    var doc = ownerDocument8(node2);
    return doc.defaultView || window;
  }
  function debounce4(func, wait) {
    if (wait === void 0) {
      wait = 166;
    }
    var timeout3;
    function debounced() {
      var _this = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var later = function later2() {
        func.apply(_this, args);
      };
      clearTimeout(timeout3);
      timeout3 = setTimeout(later, wait);
    }
    debounced.clear = function() {
      clearTimeout(timeout3);
    };
    return debounced;
  }
  function getTranslateValue2(direction2, node2) {
    var rect = node2.getBoundingClientRect();
    var containerWindow = ownerWindow6(node2);
    var transform;
    if (node2.fakeTransform) {
      transform = node2.fakeTransform;
    } else {
      var computedStyle = containerWindow.getComputedStyle(node2);
      transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    var offsetX = 0;
    var offsetY = 0;
    if (transform && transform !== "none" && typeof transform === "string") {
      var transformValues = transform.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    switch (direction2) {
      case "left":
        return "translateX(" + (containerWindow.innerWidth + offsetX - rect.left) + "px)";
      case "right":
        return "translateX(-" + (rect.left + rect.width - offsetX) + "px)";
      case "up":
        return "translateY(" + (containerWindow.innerHeight + offsetY - rect.top) + "px)";
      default:
        return "translateY(-" + (rect.top + rect.height - offsetY) + "px)";
    }
  }
  function setTranslateValue2(direction2, node2) {
    if (!node2) return;
    var transform = getTranslateValue2(direction2, node2);
    if (transform) {
      node2.style.webkitTransform = transform;
      node2.style.transform = transform;
    }
  }
  var Slide3 = /* @__PURE__ */ (0, import_react9.forwardRef)(function(props, ref) {
    var children = props.children, _props$direction = props.direction, direction2 = _props$direction === void 0 ? "down" : _props$direction, inProp = props["in"], style4 = props.style, _props$timeout = props.timeout, timeout3 = _props$timeout === void 0 ? 0 : _props$timeout, onEnter = props.onEnter, onEntered = props.onEntered, onExit = props.onExit, onExited = props.onExited, other = _objectWithoutPropertiesLoose2(props, ["children", "direction", "in", "style", "timeout", "onEnter", "onEntered", "onExit", "onExited"]);
    var nodeRef = (0, import_react9.useRef)(null);
    var handleRefIntermediary = useForkRef13(children.ref, nodeRef);
    var handleRef = useForkRef13(handleRefIntermediary, ref);
    var handleEnter = function handleEnter2(node2, isAppearing) {
      setTranslateValue2(direction2, node2);
      reflow2(node2);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    };
    var handleEntering = function handleEntering2(node2) {
      var easing2 = (style4 === null || style4 === void 0 ? void 0 : style4.transitionTimingFunction) || defaultEasing.easeOut;
      var transitionProps = getTransitionProps2({
        timeout: timeout3,
        mode: "enter",
        style: _extends2({}, style4, {
          transitionTimingFunction: easing2
        })
      });
      node2.style.webkitTransition = createTransition("-webkit-transform", transitionProps);
      node2.style.transition = createTransition("transform", transitionProps);
      node2.style.webkitTransform = "none";
      node2.style.transform = "none";
    };
    var handleExit = function handleExit2(node2) {
      var easing2 = (style4 === null || style4 === void 0 ? void 0 : style4.transitionTimingFunction) || defaultEasing.sharp;
      var transitionProps = getTransitionProps2({
        timeout: timeout3,
        mode: "exit",
        style: _extends2({}, style4, {
          transitionTimingFunction: easing2
        })
      });
      node2.style.webkitTransition = createTransition("-webkit-transform", transitionProps);
      node2.style.transition = createTransition("transform", transitionProps);
      setTranslateValue2(direction2, node2);
      if (onExit) {
        onExit(node2);
      }
    };
    var handleExited = function handleExited2(node2) {
      node2.style.webkitTransition = "";
      node2.style.transition = "";
      if (onExited) {
        onExited(node2);
      }
    };
    var updatePosition = (0, import_react9.useCallback)(function() {
      if (nodeRef.current) {
        setTranslateValue2(direction2, nodeRef.current);
      }
    }, [direction2]);
    (0, import_react9.useEffect)(function() {
      if (inProp || direction2 === "down" || direction2 === "right") {
        return void 0;
      }
      var handleResize = debounce4(function() {
        if (nodeRef.current) {
          setTranslateValue2(direction2, nodeRef.current);
        }
      });
      var containerWindow = ownerWindow6(nodeRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return function() {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [direction2, inProp]);
    (0, import_react9.useEffect)(function() {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return (0, import_react9.createElement)(Transition2, Object.assign({
      appear: true,
      nodeRef,
      onEnter: handleEnter,
      onEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      "in": inProp,
      timeout: timeout3
    }, other), function(state, childProps) {
      return (0, import_react9.cloneElement)(children, _extends2({
        ref: handleRef,
        style: _extends2({
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, style4, {}, children.props.style)
      }, childProps));
    });
  });
  Slide3.displayName = "Slide";
  var SvgIcon3 = function SvgIcon4(props) {
    return import_react9.default.createElement("svg", Object.assign({
      viewBox: "0 0 24 24",
      focusable: "false",
      style: {
        fontSize: 20,
        marginInlineEnd: 8,
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0
      }
    }, props));
  };
  var CheckIcon = function CheckIcon2() {
    return import_react9.default.createElement(SvgIcon3, null, import_react9.default.createElement("path", {
      d: "M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z"
    }));
  };
  var WarningIcon = function WarningIcon2() {
    return import_react9.default.createElement(SvgIcon3, null, import_react9.default.createElement("path", {
      d: "M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z"
    }));
  };
  var ErrorIcon = function ErrorIcon2() {
    return import_react9.default.createElement(SvgIcon3, null, import_react9.default.createElement("path", {
      d: "M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z"
    }));
  };
  var InfoIcon = function InfoIcon2() {
    return import_react9.default.createElement(SvgIcon3, null, import_react9.default.createElement("path", {
      d: "M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\n        0 22,12A10,10 0 0,0 12,2Z"
    }));
  };
  var defaultIconVariants = {
    "default": void 0,
    success: /* @__PURE__ */ import_react9.default.createElement(CheckIcon, null),
    warning: /* @__PURE__ */ import_react9.default.createElement(WarningIcon, null),
    error: /* @__PURE__ */ import_react9.default.createElement(ErrorIcon, null),
    info: /* @__PURE__ */ import_react9.default.createElement(InfoIcon, null)
  };
  var defaults = {
    maxSnack: 3,
    persist: false,
    hideIconVariant: false,
    disableWindowBlurListener: false,
    variant: "default",
    autoHideDuration: 5e3,
    iconVariant: defaultIconVariants,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: "left"
    },
    TransitionComponent: Slide3,
    transitionDuration: {
      enter: 225,
      exit: 195
    }
  };
  var getAutoHideDuration = function getAutoHideDuration2(optionsDuration, propsDuration) {
    var isNumberOrNull = function isNumberOrNull2(numberish) {
      return typeof numberish === "number" || numberish === null;
    };
    if (isNumberOrNull(optionsDuration)) return optionsDuration;
    if (isNumberOrNull(propsDuration)) return propsDuration;
    return defaults.autoHideDuration;
  };
  var getTransitionDuration = function getTransitionDuration2(optionsDuration, propsDuration) {
    var is = function is2(item, types) {
      return types.some(function(t2) {
        return typeof item === t2;
      });
    };
    if (is(optionsDuration, ["string", "number"])) {
      return optionsDuration;
    }
    if (is(optionsDuration, ["object"])) {
      return _extends2({}, defaults.transitionDuration, {}, is(propsDuration, ["object"]) && propsDuration, {}, optionsDuration);
    }
    if (is(propsDuration, ["string", "number"])) {
      return propsDuration;
    }
    if (is(propsDuration, ["object"])) {
      return _extends2({}, defaults.transitionDuration, {}, propsDuration);
    }
    return defaults.transitionDuration;
  };
  var merge3 = function merge4(options, props) {
    return function(name, shouldObjectMerge) {
      if (shouldObjectMerge === void 0) {
        shouldObjectMerge = false;
      }
      if (shouldObjectMerge) {
        return _extends2({}, defaults[name], {}, props[name], {}, options[name]);
      }
      if (name === "autoHideDuration") {
        return getAutoHideDuration(options.autoHideDuration, props.autoHideDuration);
      }
      if (name === "transitionDuration") {
        return getTransitionDuration(options.transitionDuration, props.transitionDuration);
      }
      return options[name] || props[name] || defaults[name];
    };
  };
  function makeStyles2(styles8) {
    return Object.entries(styles8).reduce(function(acc, _ref) {
      var _extends22;
      var key = _ref[0], value = _ref[1];
      return _extends2({}, acc, (_extends22 = {}, _extends22[key] = u(value), _extends22));
    }, {});
  }
  var ComponentClasses = {
    SnackbarContainer: "notistack-SnackbarContainer",
    Snackbar: "notistack-Snackbar",
    CollapseWrapper: "notistack-CollapseWrapper",
    MuiContent: "notistack-MuiContent",
    MuiContentVariant: function MuiContentVariant(variant) {
      return "notistack-MuiContent-" + variant;
    }
  };
  var classes = /* @__PURE__ */ makeStyles2({
    root: {
      height: 0
    },
    entered: {
      height: "auto"
    }
  });
  var collapsedSize = "0px";
  var timeout2 = 175;
  var Collapse3 = /* @__PURE__ */ (0, import_react9.forwardRef)(function(props, ref) {
    var children = props.children, inProp = props["in"], onExited = props.onExited;
    var wrapperRef = (0, import_react9.useRef)(null);
    var nodeRef = (0, import_react9.useRef)(null);
    var handleRef = useForkRef13(ref, nodeRef);
    var getWrapperSize = function getWrapperSize2() {
      return wrapperRef.current ? wrapperRef.current.clientHeight : 0;
    };
    var handleEnter = function handleEnter2(node2) {
      node2.style.height = collapsedSize;
    };
    var handleEntering = function handleEntering2(node2) {
      var wrapperSize = getWrapperSize();
      var _getTransitionProps = getTransitionProps2({
        timeout: timeout2,
        mode: "enter"
      }), transitionDuration = _getTransitionProps.duration, easing2 = _getTransitionProps.easing;
      node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : transitionDuration + "ms";
      node2.style.height = wrapperSize + "px";
      node2.style.transitionTimingFunction = easing2 || "";
    };
    var handleEntered = function handleEntered2(node2) {
      node2.style.height = "auto";
    };
    var handleExit = function handleExit2(node2) {
      node2.style.height = getWrapperSize() + "px";
    };
    var handleExiting = function handleExiting2(node2) {
      reflow2(node2);
      var _getTransitionProps2 = getTransitionProps2({
        timeout: timeout2,
        mode: "exit"
      }), transitionDuration = _getTransitionProps2.duration, easing2 = _getTransitionProps2.easing;
      node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : transitionDuration + "ms";
      node2.style.height = collapsedSize;
      node2.style.transitionTimingFunction = easing2 || "";
    };
    return (0, import_react9.createElement)(Transition2, {
      "in": inProp,
      unmountOnExit: true,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited,
      onExiting: handleExiting,
      nodeRef,
      timeout: timeout2
    }, function(state, childProps) {
      return (0, import_react9.createElement)("div", Object.assign({
        ref: handleRef,
        className: clsx_m_default(classes.root, state === "entered" && classes.entered),
        style: _extends2({
          pointerEvents: "all",
          overflow: "hidden",
          minHeight: collapsedSize,
          transition: createTransition("height")
        }, state === "entered" && {
          overflow: "visible"
        }, {}, state === "exited" && !inProp && {
          visibility: "hidden"
        })
      }, childProps), (0, import_react9.createElement)("div", {
        ref: wrapperRef,
        className: ComponentClasses.CollapseWrapper,
        // Hack to get children with a negative margin to not falsify the height computation.
        style: {
          display: "flex",
          width: "100%"
        }
      }, children));
    });
  });
  Collapse3.displayName = "Collapse";
  var direction = {
    right: "left",
    left: "right",
    bottom: "up",
    top: "down"
  };
  var getSlideDirection = function getSlideDirection2(anchorOrigin) {
    if (anchorOrigin.horizontal !== "center") {
      return direction[anchorOrigin.horizontal];
    }
    return direction[anchorOrigin.vertical];
  };
  var toSnackbarAnchorOrigin = function toSnackbarAnchorOrigin2(anchorOrigin) {
    return "anchorOrigin" + originKeyExtractor(anchorOrigin);
  };
  var keepSnackbarClassKeys = function keepSnackbarClassKeys2(classes2) {
    if (classes2 === void 0) {
      classes2 = {};
    }
    var containerClasses2 = {
      containerRoot: true,
      containerAnchorOriginTopCenter: true,
      containerAnchorOriginBottomCenter: true,
      containerAnchorOriginTopRight: true,
      containerAnchorOriginBottomRight: true,
      containerAnchorOriginTopLeft: true,
      containerAnchorOriginBottomLeft: true
    };
    return Object.keys(classes2).filter(function(key) {
      return !containerClasses2[key];
    }).reduce(function(obj, key) {
      var _extends22;
      return _extends2({}, obj, (_extends22 = {}, _extends22[key] = classes2[key], _extends22));
    }, {});
  };
  var noOp$1 = function noOp3() {
  };
  function createChainedFunction3(funcs, snackbarId) {
    return funcs.reduce(function(acc, func) {
      if (func === null || func === void 0) {
        return acc;
      }
      return function chainedFunction() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var argums = [].concat(args);
        if (snackbarId && argums.indexOf(snackbarId) === -1) {
          argums.push(snackbarId);
        }
        acc.apply(this, argums);
        func.apply(this, argums);
      };
    }, noOp$1);
  }
  var useEnhancedEffect9 = typeof window !== "undefined" ? import_react9.useLayoutEffect : import_react9.useEffect;
  function useEventCallback7(fn2) {
    var ref = (0, import_react9.useRef)(fn2);
    useEnhancedEffect9(function() {
      ref.current = fn2;
    });
    return (0, import_react9.useCallback)(function() {
      return (
        // @ts-expect-error hide `this`
        ref.current.apply(void 0, arguments)
      );
    }, []);
  }
  var Snackbar3 = /* @__PURE__ */ (0, import_react9.forwardRef)(function(props, ref) {
    var children = props.children, className = props.className, autoHideDuration = props.autoHideDuration, _props$disableWindowB = props.disableWindowBlurListener, disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB, onClose = props.onClose, id = props.id, open = props.open, _props$SnackbarProps = props.SnackbarProps, SnackbarProps = _props$SnackbarProps === void 0 ? {} : _props$SnackbarProps;
    var timerAutoHide = (0, import_react9.useRef)();
    var handleClose = useEventCallback7(function() {
      if (onClose) {
        onClose.apply(void 0, arguments);
      }
    });
    var setAutoHideTimer = useEventCallback7(function(autoHideDurationParam) {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }
      if (timerAutoHide.current) {
        clearTimeout(timerAutoHide.current);
      }
      timerAutoHide.current = setTimeout(function() {
        handleClose(null, "timeout", id);
      }, autoHideDurationParam);
    });
    (0, import_react9.useEffect)(function() {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return function() {
        if (timerAutoHide.current) {
          clearTimeout(timerAutoHide.current);
        }
      };
    }, [open, autoHideDuration, setAutoHideTimer]);
    var handlePause = function handlePause2() {
      if (timerAutoHide.current) {
        clearTimeout(timerAutoHide.current);
      }
    };
    var handleResume = (0, import_react9.useCallback)(function() {
      if (autoHideDuration != null) {
        setAutoHideTimer(autoHideDuration * 0.5);
      }
    }, [autoHideDuration, setAutoHideTimer]);
    var handleMouseEnter = function handleMouseEnter2(event) {
      if (SnackbarProps.onMouseEnter) {
        SnackbarProps.onMouseEnter(event);
      }
      handlePause();
    };
    var handleMouseLeave = function handleMouseLeave2(event) {
      if (SnackbarProps.onMouseLeave) {
        SnackbarProps.onMouseLeave(event);
      }
      handleResume();
    };
    (0, import_react9.useEffect)(function() {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return function() {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, handleResume, open]);
    return (0, import_react9.createElement)("div", Object.assign({
      ref
    }, SnackbarProps, {
      className: clsx_m_default(ComponentClasses.Snackbar, className),
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    }), children);
  });
  Snackbar3.displayName = "Snackbar";
  var _root;
  var classes$1 = /* @__PURE__ */ makeStyles2({
    root: (_root = {
      display: "flex",
      flexWrap: "wrap",
      flexGrow: 1
    }, _root[breakpoints.upSm] = {
      flexGrow: "initial",
      minWidth: "288px"
    }, _root)
  });
  var SnackbarContent3 = /* @__PURE__ */ (0, import_react9.forwardRef)(function(_ref, ref) {
    var className = _ref.className, props = _objectWithoutPropertiesLoose2(_ref, ["className"]);
    return import_react9.default.createElement("div", Object.assign({
      ref,
      className: clsx_m_default(classes$1.root, className)
    }, props));
  });
  SnackbarContent3.displayName = "SnackbarContent";
  var classes$2 = /* @__PURE__ */ makeStyles2({
    root: {
      backgroundColor: "#313131",
      fontSize: "0.875rem",
      lineHeight: 1.43,
      letterSpacing: "0.01071em",
      color: "#fff",
      alignItems: "center",
      padding: "6px 16px",
      borderRadius: "4px",
      boxShadow: "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)"
    },
    lessPadding: {
      paddingLeft: 8 * 2.5 + "px"
    },
    "default": {
      backgroundColor: "#313131"
    },
    success: {
      backgroundColor: "#43a047"
    },
    error: {
      backgroundColor: "#d32f2f"
    },
    warning: {
      backgroundColor: "#ff9800"
    },
    info: {
      backgroundColor: "#2196f3"
    },
    message: {
      display: "flex",
      alignItems: "center",
      padding: "8px 0"
    },
    action: {
      display: "flex",
      alignItems: "center",
      marginLeft: "auto",
      paddingLeft: "16px",
      marginRight: "-8px"
    }
  });
  var ariaDescribedby = "notistack-snackbar";
  var MaterialDesignContent = /* @__PURE__ */ (0, import_react9.forwardRef)(function(props, forwardedRef) {
    var id = props.id, message = props.message, componentOrFunctionAction = props.action, iconVariant = props.iconVariant, variant = props.variant, hideIconVariant = props.hideIconVariant, style4 = props.style, className = props.className;
    var icon = iconVariant[variant];
    var action = componentOrFunctionAction;
    if (typeof action === "function") {
      action = action(id);
    }
    return import_react9.default.createElement(SnackbarContent3, {
      ref: forwardedRef,
      role: "alert",
      "aria-describedby": ariaDescribedby,
      style: style4,
      className: clsx_m_default(ComponentClasses.MuiContent, ComponentClasses.MuiContentVariant(variant), classes$2.root, classes$2[variant], className, !hideIconVariant && icon && classes$2.lessPadding)
    }, import_react9.default.createElement("div", {
      id: ariaDescribedby,
      className: classes$2.message
    }, !hideIconVariant ? icon : null, message), action && import_react9.default.createElement("div", {
      className: classes$2.action
    }, action));
  });
  MaterialDesignContent.displayName = "MaterialDesignContent";
  var MaterialDesignContent$1 = /* @__PURE__ */ (0, import_react9.memo)(MaterialDesignContent);
  var styles7 = /* @__PURE__ */ makeStyles2({
    wrappedRoot: {
      width: "100%",
      position: "relative",
      transform: "translateX(0)",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      minWidth: "288px"
    }
  });
  var SnackbarItem = function SnackbarItem2(props) {
    var timeout3 = (0, import_react9.useRef)();
    var _useState = (0, import_react9.useState)(true), collapsed = _useState[0], setCollapsed = _useState[1];
    var handleClose = createChainedFunction3([props.snack.onClose, props.onClose]);
    var handleEntered = function handleEntered2() {
      if (props.snack.requestClose) {
        handleClose(null, "instructed", props.snack.id);
      }
    };
    var handleExitedScreen = (0, import_react9.useCallback)(function() {
      timeout3.current = setTimeout(function() {
        setCollapsed(function(col) {
          return !col;
        });
      }, 125);
    }, []);
    (0, import_react9.useEffect)(function() {
      return function() {
        if (timeout3.current) {
          clearTimeout(timeout3.current);
        }
      };
    }, []);
    var snack = props.snack, allClasses = props.classes, _props$Component = props.Component, Component2 = _props$Component === void 0 ? MaterialDesignContent$1 : _props$Component;
    var classes2 = (0, import_react9.useMemo)(function() {
      return keepSnackbarClassKeys(allClasses);
    }, [allClasses]);
    var open = snack.open, SnackbarProps = snack.SnackbarProps, TransitionComponent = snack.TransitionComponent, TransitionProps = snack.TransitionProps, transitionDuration = snack.transitionDuration, disableWindowBlurListener = snack.disableWindowBlurListener, componentOrFunctionContent = snack.content, otherSnack = _objectWithoutPropertiesLoose2(snack, ["open", "SnackbarProps", "TransitionComponent", "TransitionProps", "transitionDuration", "disableWindowBlurListener", "content", "entered", "requestClose", "onEnter", "onEntered", "onExit", "onExited"]);
    var transitionProps = _extends2({
      direction: getSlideDirection(otherSnack.anchorOrigin),
      timeout: transitionDuration
    }, TransitionProps);
    var content = componentOrFunctionContent;
    if (typeof content === "function") {
      content = content(otherSnack.id, otherSnack.message);
    }
    var callbacks = ["onEnter", "onEntered", "onExit", "onExited"].reduce(function(acc, cbName) {
      var _extends22;
      return _extends2({}, acc, (_extends22 = {}, _extends22[cbName] = createChainedFunction3([props.snack[cbName], props[cbName]], otherSnack.id), _extends22));
    }, {});
    return import_react9.default.createElement(Collapse3, {
      "in": collapsed,
      onExited: callbacks.onExited
    }, import_react9.default.createElement(Snackbar3, {
      open,
      id: otherSnack.id,
      disableWindowBlurListener,
      autoHideDuration: otherSnack.autoHideDuration,
      className: clsx_m_default(styles7.wrappedRoot, classes2.root, classes2[toSnackbarAnchorOrigin(otherSnack.anchorOrigin)]),
      SnackbarProps,
      onClose: handleClose
    }, import_react9.default.createElement(TransitionComponent, Object.assign({}, transitionProps, {
      appear: true,
      "in": open,
      onExit: callbacks.onExit,
      onExited: handleExitedScreen,
      onEnter: callbacks.onEnter,
      // order matters. first callbacks.onEntered to set entered: true,
      // then handleEntered to check if there's a request for closing
      onEntered: createChainedFunction3([callbacks.onEntered, handleEntered], otherSnack.id)
    }), content || import_react9.default.createElement(Component2, Object.assign({}, otherSnack)))));
  };
  var _root$1;
  var _rootDense;
  var _left;
  var _right;
  var _center;
  var indents = {
    view: {
      "default": 20,
      dense: 4
    },
    snackbar: {
      "default": 6,
      dense: 2
    }
  };
  var collapseWrapper = "." + ComponentClasses.CollapseWrapper;
  var xsWidthMargin = 16;
  var styles$1 = /* @__PURE__ */ makeStyles2({
    root: (_root$1 = {
      boxSizing: "border-box",
      display: "flex",
      maxHeight: "100%",
      position: "fixed",
      zIndex: 1400,
      height: "auto",
      width: "auto",
      transition: /* @__PURE__ */ createTransition(["top", "right", "bottom", "left", "max-width"], {
        duration: 300,
        easing: "ease"
      }),
      // container itself is invisible and should not block clicks, clicks should be passed to its children
      // a pointerEvents: all is applied in the collapse component
      pointerEvents: "none"
    }, _root$1[collapseWrapper] = {
      padding: indents.snackbar["default"] + "px 0px",
      transition: "padding 300ms ease 0ms"
    }, _root$1.maxWidth = "calc(100% - " + indents.view["default"] * 2 + "px)", _root$1[breakpoints.downXs] = {
      width: "100%",
      maxWidth: "calc(100% - " + xsWidthMargin * 2 + "px)"
    }, _root$1),
    rootDense: (_rootDense = {}, _rootDense[collapseWrapper] = {
      padding: indents.snackbar.dense + "px 0px"
    }, _rootDense),
    top: {
      top: indents.view["default"] - indents.snackbar["default"] + "px",
      flexDirection: "column"
    },
    bottom: {
      bottom: indents.view["default"] - indents.snackbar["default"] + "px",
      flexDirection: "column-reverse"
    },
    left: (_left = {
      left: indents.view["default"] + "px"
    }, _left[breakpoints.upSm] = {
      alignItems: "flex-start"
    }, _left[breakpoints.downXs] = {
      left: xsWidthMargin + "px"
    }, _left),
    right: (_right = {
      right: indents.view["default"] + "px"
    }, _right[breakpoints.upSm] = {
      alignItems: "flex-end"
    }, _right[breakpoints.downXs] = {
      right: xsWidthMargin + "px"
    }, _right),
    center: (_center = {
      left: "50%",
      transform: "translateX(-50%)"
    }, _center[breakpoints.upSm] = {
      alignItems: "center"
    }, _center)
  });
  var SnackbarContainer = function SnackbarContainer2(props) {
    var _props$classes = props.classes, classes2 = _props$classes === void 0 ? {} : _props$classes, anchorOrigin = props.anchorOrigin, dense = props.dense, children = props.children;
    var combinedClassname = clsx_m_default(
      ComponentClasses.SnackbarContainer,
      styles$1[anchorOrigin.vertical],
      styles$1[anchorOrigin.horizontal],
      styles$1.root,
      // root should come after others to override maxWidth
      classes2.containerRoot,
      classes2["containerAnchorOrigin" + originKeyExtractor(anchorOrigin)],
      dense && styles$1.rootDense
    );
    return import_react9.default.createElement("div", {
      className: combinedClassname
    }, children);
  };
  var SnackbarContainer$1 = /* @__PURE__ */ (0, import_react9.memo)(SnackbarContainer);
  var __DEV__ = true;
  var messages = {
    NO_PERSIST_ALL: "Reached maxSnack while all enqueued snackbars have 'persist' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented."
  };
  var warning = function(messageKey) {
    if (!__DEV__) return;
    var message = messages[messageKey];
    if (typeof console !== "undefined") {
      console.error("WARNING - notistack: " + message);
    }
    try {
      throw new Error(message);
    } catch (x) {
    }
  };
  var isOptions = function isOptions2(messageOrOptions) {
    var isMessage = typeof messageOrOptions === "string" || (0, import_react9.isValidElement)(messageOrOptions);
    return !isMessage;
  };
  var enqueueSnackbar;
  var closeSnackbar;
  var SnackbarProvider = /* @__PURE__ */ function(_Component) {
    _inheritsLoose2(SnackbarProvider2, _Component);
    function SnackbarProvider2(props) {
      var _this;
      _this = _Component.call(this, props) || this;
      _this.enqueueSnackbar = function(messageOrOptions, optsOrUndefined) {
        if (optsOrUndefined === void 0) {
          optsOrUndefined = {};
        }
        if (messageOrOptions === void 0 || messageOrOptions === null) {
          throw new Error("enqueueSnackbar called with invalid argument");
        }
        var opts = isOptions(messageOrOptions) ? messageOrOptions : optsOrUndefined;
        var message = isOptions(messageOrOptions) ? messageOrOptions.message : messageOrOptions;
        var key = opts.key, preventDuplicate = opts.preventDuplicate, options = _objectWithoutPropertiesLoose2(opts, ["key", "preventDuplicate"]);
        var hasSpecifiedKey = isDefined(key);
        var id = hasSpecifiedKey ? key : (/* @__PURE__ */ new Date()).getTime() + Math.random();
        var merger = merge3(options, _this.props);
        var snack = _extends2({
          id
        }, options, {
          message,
          open: true,
          entered: false,
          requestClose: false,
          persist: merger("persist"),
          action: merger("action"),
          content: merger("content"),
          variant: merger("variant"),
          anchorOrigin: merger("anchorOrigin"),
          disableWindowBlurListener: merger("disableWindowBlurListener"),
          autoHideDuration: merger("autoHideDuration"),
          hideIconVariant: merger("hideIconVariant"),
          TransitionComponent: merger("TransitionComponent"),
          transitionDuration: merger("transitionDuration"),
          TransitionProps: merger("TransitionProps", true),
          iconVariant: merger("iconVariant", true),
          style: merger("style", true),
          SnackbarProps: merger("SnackbarProps", true),
          className: clsx_m_default(_this.props.className, options.className)
        });
        if (snack.persist) {
          snack.autoHideDuration = void 0;
        }
        _this.setState(function(state) {
          if (preventDuplicate === void 0 && _this.props.preventDuplicate || preventDuplicate) {
            var compareFunction = function compareFunction2(item) {
              return hasSpecifiedKey ? item.id === id : item.message === message;
            };
            var inQueue = state.queue.findIndex(compareFunction) > -1;
            var inView = state.snacks.findIndex(compareFunction) > -1;
            if (inQueue || inView) {
              return state;
            }
          }
          return _this.handleDisplaySnack(_extends2({}, state, {
            queue: [].concat(state.queue, [snack])
          }));
        });
        return id;
      };
      _this.handleDisplaySnack = function(state) {
        var snacks = state.snacks;
        if (snacks.length >= _this.maxSnack) {
          return _this.handleDismissOldest(state);
        }
        return _this.processQueue(state);
      };
      _this.processQueue = function(state) {
        var queue = state.queue, snacks = state.snacks;
        if (queue.length > 0) {
          return _extends2({}, state, {
            snacks: [].concat(snacks, [queue[0]]),
            queue: queue.slice(1, queue.length)
          });
        }
        return state;
      };
      _this.handleDismissOldest = function(state) {
        if (state.snacks.some(function(item) {
          return !item.open || item.requestClose;
        })) {
          return state;
        }
        var popped = false;
        var ignore = false;
        var persistentCount = state.snacks.reduce(function(acc, current) {
          return acc + (current.open && current.persist ? 1 : 0);
        }, 0);
        if (persistentCount === _this.maxSnack) {
          true ? warning("NO_PERSIST_ALL") : void 0;
          ignore = true;
        }
        var snacks = state.snacks.map(function(item) {
          if (!popped && (!item.persist || ignore)) {
            popped = true;
            if (!item.entered) {
              return _extends2({}, item, {
                requestClose: true
              });
            }
            if (item.onClose) {
              item.onClose(null, "maxsnack", item.id);
            }
            if (_this.props.onClose) {
              _this.props.onClose(null, "maxsnack", item.id);
            }
            return _extends2({}, item, {
              open: false
            });
          }
          return _extends2({}, item);
        });
        return _extends2({}, state, {
          snacks
        });
      };
      _this.handleEnteredSnack = function(node2, isAppearing, key) {
        if (!isDefined(key)) {
          throw new Error("handleEnteredSnack Cannot be called with undefined key");
        }
        _this.setState(function(_ref) {
          var snacks = _ref.snacks;
          return {
            snacks: snacks.map(function(item) {
              return item.id === key ? _extends2({}, item, {
                entered: true
              }) : _extends2({}, item);
            })
          };
        });
      };
      _this.handleCloseSnack = function(event, reason, key) {
        if (_this.props.onClose) {
          _this.props.onClose(event, reason, key);
        }
        var shouldCloseAll = key === void 0;
        _this.setState(function(_ref2) {
          var snacks = _ref2.snacks, queue = _ref2.queue;
          return {
            snacks: snacks.map(function(item) {
              if (!shouldCloseAll && item.id !== key) {
                return _extends2({}, item);
              }
              return item.entered ? _extends2({}, item, {
                open: false
              }) : _extends2({}, item, {
                requestClose: true
              });
            }),
            queue: queue.filter(function(item) {
              return item.id !== key;
            })
          };
        });
      };
      _this.closeSnackbar = function(key) {
        var toBeClosed = _this.state.snacks.find(function(item) {
          return item.id === key;
        });
        if (isDefined(key) && toBeClosed && toBeClosed.onClose) {
          toBeClosed.onClose(null, "instructed", key);
        }
        _this.handleCloseSnack(null, "instructed", key);
      };
      _this.handleExitedSnack = function(node2, key) {
        if (!isDefined(key)) {
          throw new Error("handleExitedSnack Cannot be called with undefined key");
        }
        _this.setState(function(state) {
          var newState = _this.processQueue(_extends2({}, state, {
            snacks: state.snacks.filter(function(item) {
              return item.id !== key;
            })
          }));
          if (newState.queue.length === 0) {
            return newState;
          }
          return _this.handleDismissOldest(newState);
        });
      };
      enqueueSnackbar = _this.enqueueSnackbar;
      closeSnackbar = _this.closeSnackbar;
      _this.state = {
        snacks: [],
        queue: [],
        contextValue: {
          enqueueSnackbar: _this.enqueueSnackbar.bind(_assertThisInitialized2(_this)),
          closeSnackbar: _this.closeSnackbar.bind(_assertThisInitialized2(_this))
        }
      };
      return _this;
    }
    var _proto = SnackbarProvider2.prototype;
    _proto.render = function render() {
      var _this2 = this;
      var contextValue = this.state.contextValue;
      var _this$props = this.props, domRoot = _this$props.domRoot, children = _this$props.children, _this$props$dense = _this$props.dense, dense = _this$props$dense === void 0 ? false : _this$props$dense, _this$props$Component = _this$props.Components, Components = _this$props$Component === void 0 ? {} : _this$props$Component, classes2 = _this$props.classes;
      var categ = this.state.snacks.reduce(function(acc, current) {
        var _extends22;
        var category = originKeyExtractor(current.anchorOrigin);
        var existingOfCategory = acc[category] || [];
        return _extends2({}, acc, (_extends22 = {}, _extends22[category] = [].concat(existingOfCategory, [current]), _extends22));
      }, {});
      var snackbars = Object.keys(categ).map(function(origin) {
        var snacks = categ[origin];
        var nomineeSnack = snacks[0];
        return import_react9.default.createElement(SnackbarContainer$1, {
          key: origin,
          dense,
          anchorOrigin: nomineeSnack.anchorOrigin,
          classes: classes2
        }, snacks.map(function(snack) {
          return import_react9.default.createElement(SnackbarItem, {
            key: snack.id,
            snack,
            classes: classes2,
            Component: Components[snack.variant],
            onClose: _this2.handleCloseSnack,
            onEnter: _this2.props.onEnter,
            onExit: _this2.props.onExit,
            onExited: createChainedFunction3([_this2.handleExitedSnack, _this2.props.onExited], snack.id),
            onEntered: createChainedFunction3([_this2.handleEnteredSnack, _this2.props.onEntered], snack.id)
          });
        }));
      });
      return import_react9.default.createElement(SnackbarContext.Provider, {
        value: contextValue
      }, children, domRoot ? (0, import_react_dom2.createPortal)(snackbars, domRoot) : snackbars);
    };
    _createClass(SnackbarProvider2, [{
      key: "maxSnack",
      get: function get() {
        return this.props.maxSnack || defaults.maxSnack;
      }
    }]);
    return SnackbarProvider2;
  }(import_react9.Component);

  // src/index.tsx
  var import_react16 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // src/App.tsx
  var import_react15 = __toESM(require_react());

  // src/components/Workspace.tsx
  var import_Add2 = __toESM(require_Add());
  var import_Delete = __toESM(require_Delete());
  var import_GitHub = __toESM(require_GitHub());
  var import_Info = __toESM(require_Info());
  var import_Keyboard = __toESM(require_Keyboard());
  var import_Twitter = __toESM(require_Twitter());
  var import_react13 = __toESM(require_react());
  var import_react14 = __toESM(require_react());

  // src/presets/ansi.json
  var ansi_default = [{ angle: 0, center: "", fn: "", main: "Esc", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F1", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F2", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F3", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F4", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F5", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F6", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F7", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F8", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F9", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F10", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F11", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F12", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "`", model: 0, needBump: false, shift: "~", type: 0 }, { angle: 0, center: "", fn: "", main: "1", model: 0, needBump: false, shift: "!", type: 0 }, { angle: 0, center: "", fn: "", main: "2", model: 0, needBump: false, shift: "@", type: 0 }, { angle: 0, center: "", fn: "", main: "3", model: 0, needBump: false, shift: "#", type: 0 }, { angle: 0, center: "", fn: "", main: "4", model: 0, needBump: false, shift: "$", type: 0 }, { angle: 0, center: "", fn: "", main: "5", model: 0, needBump: false, shift: "%", type: 0 }, { angle: 0, center: "", fn: "", main: "6", model: 0, needBump: false, shift: "^", type: 0 }, { angle: 0, center: "", fn: "", main: "7", model: 0, needBump: false, shift: "&", type: 0 }, { angle: 0, center: "", fn: "", main: "8", model: 0, needBump: false, shift: "*", type: 0 }, { angle: 0, center: "", fn: "", main: "9", model: 0, needBump: false, shift: "(", type: 0 }, { angle: 0, center: "", fn: "", main: "0", model: 0, needBump: false, shift: ")", type: 0 }, { angle: 0, center: "", fn: "", main: "-", model: 0, needBump: false, shift: "_", type: 0 }, { angle: 0, center: "", fn: "", main: "=", model: 0, needBump: false, shift: "+", type: 0 }, { angle: 0, center: "", fn: "", main: "Tab", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Q", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "W", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "E", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "R", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "T", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Y", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "U", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "I", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "O", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "P", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "[", model: 0, needBump: false, shift: "{", type: 0 }, { angle: 0, center: "", fn: "", main: "]", model: 0, needBump: false, shift: "}", type: 0 }, { angle: 0, center: "", fn: "", main: "\\", model: 0, needBump: false, shift: "|", type: 0 }, { angle: 0, center: "", fn: "", main: "Caps Lock", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "A", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "S", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "D", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F", model: 1, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "G", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "H", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "J", model: 1, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "K", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "L", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: ";", model: 0, needBump: false, shift: ":", type: 0 }, { angle: 0, center: "", fn: "", main: "'", model: 0, needBump: false, shift: '"', type: 0 }, { angle: 0, center: "", fn: "", main: "\u21A9\uFE0E", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "\u21E7", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Z", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "X", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "C", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "V", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "B", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "N", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "M", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: ",", model: 0, needBump: false, shift: "<", type: 0 }, { angle: 0, center: "", fn: "", main: ".", model: 0, needBump: false, shift: ">", type: 0 }, { angle: 0, center: "", fn: "", main: "/", model: 0, needBump: false, shift: "?", type: 0 }, { angle: 0, center: "", fn: "", main: "\u21E7", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Ctrl", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Win", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Alt", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Alt", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Win", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Menu", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Ctrl", model: 0, needBump: false, shift: "", type: 0 }];

  // src/presets/nescius66.json
  var nescius66_default = [{ angle: 0, center: "", fn: "F1", main: "Esc", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "F2", main: "0", model: 0, needBump: false, shift: "!", type: 0 }, { angle: 0, center: "", fn: "F3", main: "1", model: 0, needBump: false, shift: "@", type: 0 }, { angle: 0, center: "", fn: "F4", main: "2", model: 0, needBump: false, shift: "#", type: 0 }, { angle: 0, center: "", fn: "F5", main: "3", model: 0, needBump: false, shift: "$", type: 0 }, { angle: 0, center: "", fn: "F6", main: "4", model: 0, needBump: false, shift: "%", type: 0 }, { angle: 0, center: "", fn: "F7", main: "5", model: 0, needBump: false, shift: "^", type: 0 }, { angle: 0, center: "", fn: "F8", main: "6", model: 0, needBump: false, shift: "&", type: 0 }, { angle: 0, center: "", fn: "F9", main: "7", model: 0, needBump: false, shift: "*", type: 0 }, { angle: 0, center: "", fn: "F10", main: "8", model: 0, needBump: false, shift: "[", type: 0 }, { angle: 0, center: "", fn: "F11", main: "9", model: 0, needBump: false, shift: "]", type: 0 }, { angle: 0, center: "", fn: "F12", main: "-", model: 0, needBump: false, shift: "_", type: 0 }, { angle: 0, center: "", fn: "", main: "Tab", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Q", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "W", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "E", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "R", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "T", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Y", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "U", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "I", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "O", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "P", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "=", model: 0, needBump: false, shift: "+", type: 0 }, { angle: 0, center: "", fn: "", main: "Ctrl", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "A", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "S", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "D", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "F", model: 1, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "G", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "\u2190", main: "H", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "\u2193", main: "J", model: 1, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "\u2191", main: "K", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "\u2192", main: "L", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: ";", model: 0, needBump: false, shift: ":", type: 0 }, { angle: 0, center: "", fn: "", main: "\u21A9\uFE0E", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "\u21E7", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Z", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "X", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "C", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "V", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "B", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "N", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "M", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: ",", model: 0, needBump: false, shift: "<", type: 0 }, { angle: 0, center: "", fn: "", main: ".", model: 0, needBump: false, shift: ">", type: 0 }, { angle: 0, center: "", fn: "", main: "\\", model: 0, needBump: false, shift: "|", type: 0 }, { angle: 0, center: "", fn: "", main: "", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Win", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Fn", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "Alt", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "(", model: 0, needBump: false, shift: "{", type: 0 }, { angle: 0, center: "", fn: "", main: ")", model: 0, needBump: false, shift: "}", type: 0 }, { angle: 0, center: "", fn: "", main: "Bs", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "\u21A9\uFE0E", model: 0, needBump: false, shift: "", type: 0 }, { angle: 0, center: "", fn: "", main: "/", model: 0, needBump: false, shift: "?", type: 0 }, { angle: 0, center: "", fn: "", main: "'", model: 0, needBump: false, shift: '"', type: 0 }, { angle: 0, center: "\u534A/\u5168", fn: "", main: "'", model: 0, needBump: false, shift: "", type: 1 }, { angle: 0, center: "\u534A/\u5168", fn: "", main: "'", model: 0, needBump: false, shift: "", type: 1 }, { angle: 0, center: "\u25B6\uFE0E", fn: "", main: "'", model: 0, needBump: false, shift: "", type: 1 }, { angle: 90, center: "\u25B6\uFE0E", fn: "", main: "'", model: 0, needBump: false, shift: "", type: 1 }, { angle: 180, center: "\u25B6\uFE0E", fn: "", main: "'", model: 0, needBump: false, shift: "", type: 1 }, { angle: 270, center: "\u25B6\uFE0E", fn: "", main: "'", model: 0, needBump: false, shift: "", type: 1 }];

  // src/components/Buttons.tsx
  var import_AutoAwesome = __toESM(require_AutoAwesome());
  var import_Download = __toESM(require_Download());
  var import_Upload = __toESM(require_Upload());
  var import_jszip = __toESM(require_jszip_min());
  var import_react11 = __toESM(require_react());
  var import_react12 = __toESM(require_react());

  // src/components/providers/OpenscadWorkerProvider.tsx
  var import_react10 = __toESM(require_react());

  // src/lib/WorkspaceFile.ts
  var WorkspaceFile = class extends File {
    path;
    constructor(fileBits, fileName, options) {
      super(fileBits, fileName, options);
      this.path = options?.path || fileName;
    }
  };

  // src/lib/executeWorkerJob.ts
  var worker = new Worker("./worker.js", { type: "module" });
  var promiseMap = {};
  worker.addEventListener(
    "message",
    (event) => {
      const { id } = event.data;
      const { resolve, reject } = promiseMap[id];
      if (!resolve || !reject) {
        throw new Error("Unknown message id");
      }
      if (event.data.err) {
        reject(event.data.err);
      } else {
        resolve(event.data);
      }
      promiseMap[id] = null;
      delete promiseMap[id];
    }
  );
  worker.addEventListener("error", (event) => {
    console.log(event);
  });
  worker.addEventListener("unhandledrejection", (event) => {
    console.log(event);
  });
  async function executeWorkerJob(message) {
    const id = Math.random().toString(36).substring(2, 9);
    const promise = new Promise((resolve, reject) => {
      promiseMap[id] = { resolve, reject };
    });
    worker.postMessage({
      id,
      ...message
    });
    return promise;
  }

  // src/lib/openSCAD/execute.ts
  async function executeOpenSCAD(type, code) {
    const message = {
      type,
      data: {
        code
      }
    };
    const response = await executeWorkerJob(message);
    const data = response.data;
    let output;
    if (data.output) {
      output = new WorkspaceFile([data.output], "output.stl");
    }
    return {
      ...data,
      output
    };
  }

  // src/components/providers/OpenscadWorkerProvider.tsx
  var OpenSCADWorkerContext = (0, import_react10.createContext)({
    log: []
  });
  function OpenscadWorkerProvider({ children }) {
    const [log, setLog] = (0, import_react10.useState)([]);
    const [previewFile, setPreviewFile] = (0, import_react10.useState)(null);
    const [isExporting, setIsExporting] = (0, import_react10.useState)(false);
    const [isRendering, setIsRendering] = (0, import_react10.useState)(false);
    const value = {
      log,
      previewFile,
      isExporting,
      isRendering,
      execExport: async (code) => {
        setIsExporting(true);
        const output = await executeOpenSCAD("export" /* EXPORT */, code);
        setLog((prevLog) => [
          ...prevLog,
          ...output.log.stdErr,
          ...output.log.stdOut
        ]);
        setIsExporting(false);
        return output.output;
      },
      preview: async (code) => {
        setIsRendering(true);
        const output = await executeOpenSCAD("preview" /* PREVIEW */, code);
        setLog((prevLog) => [
          ...prevLog,
          ...output.log.stdErr,
          ...output.log.stdOut
        ]);
        if (output.output) {
          setPreviewFile(output.output);
        }
        setIsRendering(false);
      },
      reset: () => {
        setLog([]);
        setPreviewFile(null);
        setIsExporting(false);
        setIsRendering(false);
      },
      resetLog: () => {
        setLog([]);
      }
    };
    return /* @__PURE__ */ import_react10.default.createElement(OpenSCADWorkerContext.Provider, { value }, children);
  }
  function useOpenSCADProvider() {
    return import_react10.default.useContext(OpenSCADWorkerContext);
  }

  // src/components/Buttons.tsx
  var escapeString = (str) => {
    return str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/'/g, "\\'").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
  };
  var makeFilenameSafe = (name) => {
    return name.replace(/\//g, "slash").replace(/\\/g, "backslash").replace(/:/g, "colon").replace(/\*/g, "asterisk").replace(/\?/g, "question").replace(/"/g, "quote").replace(/</g, "less").replace(/>/g, "greater").replace(/\|/g, "pipe");
  };
  var keycap = "";
  function Buttons({ fields, setFields }) {
    const { execExport, isExporting } = useOpenSCADProvider();
    const [loadingState, setLoadingState] = (0, import_react11.useState)({
      loading: false,
      exportedFile: 0
    });
    const downloadFile = (0, import_react11.useCallback)((filename, obj) => {
      const url = URL.createObjectURL(obj);
      const a2 = document.createElement("a");
      a2.href = url;
      a2.download = filename;
      a2.click();
    }, []);
    const handleDownload = (0, import_react11.useCallback)(() => {
      const json = JSON.stringify(fields);
      const blob = new Blob([json], { type: "application/json" });
      downloadFile("keycap-builder.json", blob);
    }, [fields, downloadFile]);
    const handleUpload = (0, import_react11.useCallback)(() => {
      const input = document.createElement("input");
      input.type = "file";
      input.accept = "application/json";
      input.onchange = () => {
        const file = input.files?.item(0);
        if (file) {
          const reader = new FileReader();
          reader.onload = () => {
            const json = reader.result;
            const data = JSON.parse(json);
            const newFields = data.map((field) => ({
              ...field
            }));
            setFields(newFields);
          };
          reader.readAsText(file);
        }
      };
      input.click();
    }, [setFields]);
    const exportKeycap = async () => {
      if (!keycap) {
        const response = await fetch("Keycap.scad", {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (!response.ok) {
          console.error("Failed to export keycap:", response.statusText);
          return;
        }
        keycap = await response.text();
      }
      const exportedFiles = [];
      setLoadingState({ loading: true, exportedFile: 0 });
      for (let index = 0; index < fields.length; index++) {
        const field = fields[index];
        const importModelPath = ["Cap_U.stl", "Cap_O.stl", "Cap_Flat.stl"][field.model];
        const replacements = {
          LLB: field.type === 0 ? escapeString(field.main) : "",
          LLT: field.type === 0 ? escapeString(field.shift) : "",
          LRT: field.type === 0 ? escapeString(field.fn) : "",
          LC: field.type === 1 ? escapeString(field.center) : "",
          MODEL_PATH: importModelPath,
          CENTER_ROTATION: field.angle.toString(),
          NEED_BUMP: field.needBump.toString()
        };
        let customKeycap = keycap;
        for (const [key, value] of Object.entries(replacements)) {
          const regex = new RegExp(key, "g");
          customKeycap = customKeycap.replace(regex, value);
        }
        const safeLLB = makeFilenameSafe(field.main);
        const safeLLT = makeFilenameSafe(field.shift);
        const safeLRB = makeFilenameSafe(field.fn);
        const safeLC = makeFilenameSafe(field.center);
        const modelType = ["U", "O", "F"][field.model];
        const needBump = field.needBump ? "Bump" : "";
        const filename = field.type === 0 ? `Keycap_${safeLLB}_${safeLLT}_${safeLRB}_${needBump}_${modelType}.stl` : `Keycap_${safeLC}_${field.angle}_${needBump}_${modelType}.stl`;
        const stlFile = await execExport(customKeycap);
        exportedFiles.push({ file: stlFile, name: filename });
        setLoadingState({ loading: true, exportedFile: index + 1 });
      }
      if (exportedFiles.length === 1) {
        const file = exportedFiles[0];
        downloadFile(file.name, file.file);
      } else {
        const zip = new import_jszip.default();
        for (const { name, file } of exportedFiles) {
          zip.file(name, file);
        }
        const zipBlob = await zip.generateAsync({ type: "blob" });
        downloadFile("keycaps.zip", zipBlob);
      }
      setLoadingState({ loading: false, exportedFile: 0 });
    };
    return /* @__PURE__ */ import_react11.default.createElement(import_react12.Fragment, null, /* @__PURE__ */ import_react11.default.createElement(
      Button_default,
      {
        variant: "outlined",
        disabled: isExporting,
        endIcon: /* @__PURE__ */ import_react11.default.createElement(import_AutoAwesome.default, null),
        onClick: exportKeycap,
        sx: {
          borderColor: "#fff",
          color: "#fff",
          "&:hover": {
            borderColor: "#ccc",
            color: "#ccc"
          }
        }
      },
      "Export Keycap"
    ), /* @__PURE__ */ import_react11.default.createElement(
      Button_default,
      {
        variant: "outlined",
        disabled: isExporting,
        endIcon: /* @__PURE__ */ import_react11.default.createElement(import_Download.default, null),
        onClick: handleDownload,
        sx: {
          borderColor: "#fff",
          color: "#fff",
          "&:hover": {
            borderColor: "#ccc",
            color: "#ccc"
          }
        }
      },
      "Download Layout"
    ), /* @__PURE__ */ import_react11.default.createElement(
      Button_default,
      {
        variant: "outlined",
        disabled: isExporting,
        endIcon: /* @__PURE__ */ import_react11.default.createElement(import_Upload.default, null),
        onClick: handleUpload,
        sx: {
          borderColor: "#fff",
          color: "#fff",
          "&:hover": {
            borderColor: "#ccc",
            color: "#ccc"
          }
        }
      },
      "Upload Layout"
    ), loadingState.loading && /* @__PURE__ */ import_react11.default.createElement(
      Box_default,
      {
        sx: {
          position: "fixed",
          top: 0,
          left: 0,
          width: "100vw",
          height: "100vh",
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          zIndex: 1300
        }
      },
      /* @__PURE__ */ import_react11.default.createElement(
        Box_default,
        {
          sx: {
            position: "relative",
            display: "inline-flex",
            backgroundColor: "white",
            borderRadius: "50%",
            padding: 2
          }
        },
        /* @__PURE__ */ import_react11.default.createElement(
          CircularProgress_default,
          {
            variant: "determinate",
            size: 120,
            value: loadingState.exportedFile / fields.length * 100
          }
        ),
        /* @__PURE__ */ import_react11.default.createElement(
          Box_default,
          {
            sx: {
              top: 0,
              left: 0,
              bottom: 0,
              right: 0,
              position: "absolute",
              display: "flex",
              alignItems: "center",
              justifyContent: "center"
            }
          },
          /* @__PURE__ */ import_react11.default.createElement(
            Typography_default,
            {
              variant: "caption",
              component: "div",
              sx: { color: "black", fontSize: 20 }
            },
            `${Math.round(loadingState.exportedFile / fields.length * 100)}%`
          )
        )
      )
    ));
  }

  // src/components/Workspace.tsx
  var defaultField = () => {
    return {
      main: "",
      shift: "",
      fn: "",
      center: "",
      angle: 0,
      type: 0,
      needBump: false,
      model: 0
    };
  };
  var presets = [ansi_default, nescius66_default, [defaultField()]];
  var toolbarHeight = 64;
  var FIELD_WIDTH = 140;
  function FieldHeader({
    title,
    tooltip,
    expandable = false
  }) {
    return /* @__PURE__ */ import_react13.default.createElement(
      Box_default,
      {
        sx: {
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          mr: 2,
          width: FIELD_WIDTH
        }
      },
      /* @__PURE__ */ import_react13.default.createElement(Typography_default, null, title),
      expandable ? /* @__PURE__ */ import_react13.default.createElement(ExpandableTooltip, { title: tooltip, arrow: true }, /* @__PURE__ */ import_react13.default.createElement(IconButton_default, null, /* @__PURE__ */ import_react13.default.createElement(import_Info.default, null))) : /* @__PURE__ */ import_react13.default.createElement(Tooltip_default, { title: tooltip, arrow: true }, /* @__PURE__ */ import_react13.default.createElement(IconButton_default, null, /* @__PURE__ */ import_react13.default.createElement(import_Info.default, null)))
    );
  }
  var ExpandableTooltip = styled_default2(({ className, ...props }) => /* @__PURE__ */ import_react13.default.createElement(Tooltip_default, { ...props, classes: { popper: className } }))({
    [`& .${tooltipClasses_default.tooltip}`]: {
      maxWidth: "none"
    }
  });
  function Workspace() {
    const [fields, setFields] = (0, import_react14.useState)([defaultField()]);
    const handleAddField = () => {
      setFields([...fields, defaultField()]);
    };
    const handleRemoveField = (index) => {
      const newFields = fields.filter((_5, i2) => i2 !== index);
      if (newFields.length === 0) {
        setFields([defaultField()]);
      } else {
        setFields(newFields);
      }
    };
    const [preset, setPreset] = (0, import_react14.useState)(0);
    (0, import_react14.useEffect)(() => {
      loadPreset(0);
    }, []);
    const loadPreset = (preset2) => {
      if (preset2 < 0 && preset2 < presets.length) return;
      const newFields = presets[preset2].map((field) => ({
        ...field
      }));
      setFields(newFields);
    };
    const handlePresetChange = (event) => {
      const newPreset = event.target.value;
      setPreset(newPreset);
      loadPreset(newPreset);
    };
    return /* @__PURE__ */ import_react13.default.createElement(import_react13.Fragment, null, /* @__PURE__ */ import_react13.default.createElement(
      AppBar_default,
      {
        position: "fixed",
        sx: {
          zIndex: (theme) => theme.zIndex.drawer + 1
        }
      },
      /* @__PURE__ */ import_react13.default.createElement(Toolbar_default, { sx: { gap: 2 } }, /* @__PURE__ */ import_react13.default.createElement(Stack_default, { alignItems: "center", direction: "row", gap: 1 }, /* @__PURE__ */ import_react13.default.createElement(Typography_default, { variant: "body1" }, "Keycap Builder for Web"), /* @__PURE__ */ import_react13.default.createElement(import_Keyboard.default, null)), /* @__PURE__ */ import_react13.default.createElement(Stack_default, { direction: "row", alignItems: "center", gap: 2 }, /* @__PURE__ */ import_react13.default.createElement(FormControl_default, { size: "small" }, /* @__PURE__ */ import_react13.default.createElement(
        InputLabel_default,
        {
          id: "select-filter-by-field-label",
          style: { color: "white" }
        },
        "Preset"
      ), /* @__PURE__ */ import_react13.default.createElement(
        Select_default,
        {
          sx: {
            color: "white",
            ".MuiOutlinedInput-notchedOutline": {
              borderColor: "rgba(228, 219, 233, 0.25)"
            },
            "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
              borderColor: "rgba(228, 219, 233, 0.25)"
            },
            "&:hover .MuiOutlinedInput-notchedOutline": {
              borderColor: "rgba(228, 219, 233, 0.25)"
            },
            ".MuiSvgIcon-root ": {
              fill: "white !important"
            }
          },
          labelId: "select-filter-by-field-label",
          id: "select-filter-by-field",
          value: preset,
          onChange: handlePresetChange
        },
        /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 0 }, "ANSI"),
        /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 1 }, "Nescius66"),
        /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 2 }, "Blank")
      )), /* @__PURE__ */ import_react13.default.createElement(Tooltip_default, { title: "Please give me a star!", arrow: true }, /* @__PURE__ */ import_react13.default.createElement(
        Button_default,
        {
          variant: "text",
          color: "inherit",
          sx: { p: 0 },
          href: "https://github.com/ruchi12377/keycap_builder_web",
          target: "_blank",
          rel: "noopener noreferrer",
          size: "large",
          startIcon: /* @__PURE__ */ import_react13.default.createElement(import_GitHub.default, { fontSize: "large" })
        },
        "GitHub"
      )), /* @__PURE__ */ import_react13.default.createElement(
        Tooltip_default,
        {
          title: "If you have any questions, please contact me on Twitter!",
          arrow: true
        },
        /* @__PURE__ */ import_react13.default.createElement(
          Button_default,
          {
            variant: "text",
            color: "inherit",
            sx: { p: 0 },
            href: "https://twitter.com/ruchi12377",
            target: "_blank",
            rel: "noopener noreferrer",
            size: "large",
            startIcon: /* @__PURE__ */ import_react13.default.createElement(import_Twitter.default, { fontSize: "large" })
          },
          "Twitter"
        )
      )), /* @__PURE__ */ import_react13.default.createElement(Box_default, { component: "div", sx: { flexGrow: 1 } }), /* @__PURE__ */ import_react13.default.createElement(Buttons, { fields, setFields }))
    ), /* @__PURE__ */ import_react13.default.createElement(Box_default, { component: "main", sx: { flexGrow: 1, pt: 0 } }, /* @__PURE__ */ import_react13.default.createElement(Toolbar_default, null), /* @__PURE__ */ import_react13.default.createElement(
      Box_default,
      {
        component: "div",
        sx: {
          width: "100vw",
          height: `calc(100vh - ${toolbarHeight}px)`,
          overflow: "auto"
        }
      },
      /* @__PURE__ */ import_react13.default.createElement(
        Box_default,
        {
          sx: {
            padding: "20px",
            display: "flex",
            overflow: "scroll",
            gap: 1
          }
        },
        /* @__PURE__ */ import_react13.default.createElement(Box_default, { sx: { flex: 1 } }, /* @__PURE__ */ import_react13.default.createElement(Box_default, { sx: { display: "flex", alignItems: "center", mb: 2 } }, /* @__PURE__ */ import_react13.default.createElement(FieldHeader, { title: "Main", tooltip: "Main key label" }), /* @__PURE__ */ import_react13.default.createElement(FieldHeader, { title: "Shift", tooltip: "Shift key label" }), /* @__PURE__ */ import_react13.default.createElement(FieldHeader, { title: "Fn", tooltip: "Function key label" }), /* @__PURE__ */ import_react13.default.createElement(
          FieldHeader,
          {
            title: "Center",
            tooltip: "Centered key label. ex) \u25B2 \u2190"
          }
        ), /* @__PURE__ */ import_react13.default.createElement(
          FieldHeader,
          {
            title: "Center Angle",
            tooltip: "Center key label's angle"
          }
        ), /* @__PURE__ */ import_react13.default.createElement(
          FieldHeader,
          {
            title: "Label Type",
            tooltip: "Type of label. Normal or Centered"
          }
        ), /* @__PURE__ */ import_react13.default.createElement(
          FieldHeader,
          {
            title: "Key Bump",
            tooltip: "Put key bump like F and J key",
            expandable: true
          }
        ), /* @__PURE__ */ import_react13.default.createElement(
          FieldHeader,
          {
            title: "Model Type",
            tooltip: /* @__PURE__ */ import_react13.default.createElement("img", { src: "model.jpg", alt: "Type of model", width: 500 }),
            expandable: true
          }
        ), /* @__PURE__ */ import_react13.default.createElement(Typography_default, { sx: { mr: 2, width: FIELD_WIDTH } }, /* @__PURE__ */ import_react13.default.createElement(IconButton_default, { color: "primary", onClick: handleAddField }, /* @__PURE__ */ import_react13.default.createElement(import_Add2.default, { fontSize: "large" })))), fields.map((field, rowIndex) => /* @__PURE__ */ import_react13.default.createElement(
          Box_default,
          {
            key: rowIndex,
            sx: { display: "flex", alignItems: "center", mb: 2 }
          },
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              value: field.main,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].main = e2.target.value;
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH },
              disabled: field.type === 1
            }
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              value: field.shift,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].shift = e2.target.value;
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH },
              disabled: field.type === 1
            }
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              value: field.fn,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].fn = e2.target.value;
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH },
              disabled: field.type === 1
            }
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              value: field.center,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].center = e2.target.value;
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH },
              disabled: field.type === 0
            }
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              value: field.angle,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].angle = Number.parseInt(
                  e2.target.value
                );
                setFields(newFields);
              },
              inputProps: {
                inputMode: "numeric",
                pattern: "[0-9]*"
              },
              sx: { mr: 2, width: FIELD_WIDTH },
              disabled: field.type === 0
            }
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              select: true,
              value: field.type,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].type = Number.parseInt(
                  e2.target.value,
                  10
                );
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH }
            },
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 0 }, "General"),
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 1 }, "Center")
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              select: true,
              value: field.needBump ? 1 : 0,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].needBump = Number.parseInt(e2.target.value, 10) === 1;
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH }
            },
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 0 }, "No"),
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 1 }, "Yes")
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            TextField_default,
            {
              select: true,
              value: field.model,
              onChange: (e2) => {
                const newFields = [...fields];
                newFields[rowIndex].model = Number.parseInt(
                  e2.target.value,
                  10
                );
                setFields(newFields);
              },
              sx: { mr: 2, width: FIELD_WIDTH }
            },
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 0 }, "Normal"),
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 1 }, "Pit"),
            /* @__PURE__ */ import_react13.default.createElement(MenuItem_default, { value: 2 }, "Flat")
          ),
          /* @__PURE__ */ import_react13.default.createElement(
            IconButton_default,
            {
              color: "secondary",
              onClick: () => handleRemoveField(rowIndex)
            },
            /* @__PURE__ */ import_react13.default.createElement(import_Delete.default, { fontSize: "large" })
          )
        )))
      )
    )), /* @__PURE__ */ import_react13.default.createElement(
      Box_default,
      {
        component: "footer",
        sx: {
          py: 2,
          px: 4,
          mt: "auto",
          backgroundColor: (theme) => theme.palette.mode === "light" ? theme.palette.grey[200] : theme.palette.grey[800],
          textAlign: "center"
        }
      },
      /* @__PURE__ */ import_react13.default.createElement(Typography_default, { variant: "body2", color: "text.secondary" }, "\xA9 2024 - ", (/* @__PURE__ */ new Date()).getFullYear(), " Ruchi12377. All rights reserved.")
    ));
  }

  // src/App.tsx
  function App() {
    return /* @__PURE__ */ import_react15.default.createElement(Workspace, null);
  }

  // src/index.tsx
  (0, import_client.createRoot)(document.getElementById("root")).render(
    /* @__PURE__ */ import_react16.default.createElement(import_react16.default.StrictMode, null, /* @__PURE__ */ import_react16.default.createElement(CssBaseline_default, null), /* @__PURE__ */ import_react16.default.createElement(SnackbarProvider, null), /* @__PURE__ */ import_react16.default.createElement(OpenscadWorkerProvider, null, /* @__PURE__ */ import_react16.default.createElement(App, null)))
  );
  window.addEventListener("unhandledrejection", (event) => {
    enqueueSnackbar(event.reason.message, { variant: "error" });
  });
  window.addEventListener("error", (event) => {
    enqueueSnackbar(event.message, { variant: "error" });
  });
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v5.15.14
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/utils/node/index.js:
  (**
   * @mui/utils v5.15.20
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

jszip/dist/jszip.min.js:
  (*!
  
  JSZip v3.10.1 - A JavaScript class for generating and reading zip files
  <http://stuartk.com/jszip>
  
  (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
  Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.
  
  JSZip uses the library pako released under the MIT license :
  https://github.com/nodeca/pako/blob/main/LICENSE
  *)

@mui/private-theming/index.js:
  (**
   * @mui/private-theming v5.15.20
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/base/index.js:
  (**
   * @mui/base v5.0.0-beta.40
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/material/index.js:
  (**
   * @mui/material v5.15.20
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=index.js.map
